============================= test session starts ==============================
platform darwin -- Python 3.11.8, pytest-8.4.0, pluggy-1.6.0 -- /Users/nicholasbaro/Python/semant/venv/bin/python3.11
cachedir: .pytest_cache
rootdir: /Users/nicholasbaro/Python/semant
configfile: pytest.ini
plugins: anyio-4.9.0, cov-4.1.0, langsmith-0.3.43, mock-3.12.0, asyncio-1.0.0
asyncio: mode=Mode.AUTO, asyncio_default_fixture_loop_scope=function, asyncio_default_test_loop_scope=function
collecting ... collected 243 items

tests/agents/test_code_review_agent.py::test_agent_initialization PASSED [  0%]
tests/agents/test_code_review_agent.py::test_code_review_basic_functionality PASSED [  0%]
tests/agents/test_code_review_agent.py::test_code_review_error_handling PASSED [  1%]
tests/agents/test_code_review_agent.py::test_analysis_functions_mocked PASSED [  1%]
tests/agents/test_code_review_agent.py::test_scoring_and_recommendations PASSED [  2%]
tests/agents/test_code_review_agent.py::test_message_processing_basic PASSED [  2%]
tests/test_agent_factory.py::test_create_agent PASSED                    [  2%]
tests/test_agent_factory.py::test_create_capability_agent PASSED         [  3%]
tests/test_agent_factory.py::test_agent_initialization PASSED            [  3%]
tests/test_agent_factory.py::test_agent_capability_management PASSED     [  4%]
tests/test_agent_integrator.py::test_register_agent FAILED               [  4%]
tests/test_agent_integrator.py::test_route_message FAILED                [  4%]
tests/test_agent_integrator.py::test_broadcast_message FAILED            [  5%]
tests/test_agent_integrator.py::test_get_agent_status FAILED             [  5%]
tests/test_agent_integrator.py::test_get_all_agent_statuses FAILED       [  6%]
tests/test_agent_integrator.py::test_knowledge_graph_updates FAILED      [  6%]
tests/test_agent_integrator.py::test_knowledge_graph_queries FAILED      [  6%]
tests/test_agent_integrator.py::test_process_message_called_during_routing FAILED [  7%]
tests/test_agent_recovery.py::test_agent_recovery PASSED                 [  7%]
tests/test_agent_recovery.py::test_agent_recovery_success PASSED         [  8%]
tests/test_agent_recovery.py::test_agent_recovery_failure PASSED         [  8%]
tests/test_agent_recovery.py::test_agent_recovery_timeout PASSED         [  9%]
tests/test_agent_recovery.py::test_max_recovery_attempts PASSED          [  9%]
tests/test_agent_recovery.py::test_role_recovery PASSED                  [  9%]
tests/test_agent_recovery.py::test_knowledge_graph_integration PASSED    [ 10%]
tests/test_agent_recovery.py::test_recovery_strategies PASSED            [ 10%]
tests/test_agent_recovery.py::test_recovery_strategy_metrics PASSED      [ 11%]
tests/test_agent_recovery.py::test_kg_initialization_failure PASSED      [ 11%]
tests/test_agent_recovery.py::test_kg_query_failure PASSED               [ 11%]
tests/test_agent_recovery.py::test_kg_update_failure PASSED              [ 12%]
tests/test_agent_recovery.py::test_kg_transaction_rollback PASSED        [ 12%]
tests/test_agent_recovery.py::test_kg_cache_invalidation PASSED          [ 13%]
tests/test_agents.py::TestBaseAgent::test_initialization PASSED          [ 13%]
tests/test_agents.py::TestBaseAgent::test_state_transitions PASSED       [ 13%]
tests/test_agents.py::TestBaseAgent::test_message_handling PASSED        [ 14%]
tests/test_agents.py::TestSensorAgent::test_process_message PASSED       [ 14%]
tests/test_agents.py::TestDataProcessorAgent::test_process_message PASSED [ 15%]
tests/test_agents.py::TestPromptAgent::test_prompt_generation PASSED     [ 15%]
tests/test_agents.py::TestPromptAgent::test_code_review PASSED           [ 16%]
tests/test_agents.py::TestPromptAgent::test_template_management PASSED   [ 16%]
tests/test_agents.py::TestPromptAgent::test_error_handling PASSED        [ 16%]
tests/test_capability_handling.py::test_capability_type_conversion FAILED [ 17%]
tests/test_capability_handling.py::test_capability_operations PASSED     [ 17%]
tests/test_capability_handling.py::test_registry_capability_handling FAILED [ 18%]
tests/test_capability_handling.py::test_capability_consistency FAILED    [ 18%]
tests/test_capability_handling.py::test_capability_edge_cases FAILED     [ 18%]
tests/test_capability_handling.py::test_capability_initialization PASSED [ 19%]
tests/test_capability_management.py::TestCapabilityManagement::test_add_capability PASSED [ 19%]
tests/test_capability_management.py::TestCapabilityManagement::test_remove_capability PASSED [ 20%]
tests/test_capability_management.py::TestCapabilityManagement::test_remove_nonexistent_capability PASSED [ 20%]
tests/test_capability_management.py::TestCapabilityManagement::test_knowledge_graph_updates PASSED [ 20%]
tests/test_capability_management.py::TestCapabilityManagement::test_capability_conflicts PASSED [ 21%]
tests/test_capability_management.py::TestCapabilityManagement::test_capability_dependencies PASSED [ 21%]
tests/test_chat_endpoint.py::test_chat_endpoint PASSED                   [ 22%]
tests/test_chat_endpoint.py::test_chat_with_history PASSED               [ 22%]
tests/test_chat_endpoint.py::test_chat_help_message PASSED               [ 23%]
tests/test_consulting_agents.py::test_engagement_initialization FAILED   [ 23%]
tests/test_consulting_agents.py::test_strategy_development FAILED        [ 23%]
tests/test_consulting_agents.py::test_implementation_planning FAILED     [ 24%]
tests/test_consulting_agents.py::test_value_framework_development FAILED [ 24%]
tests/test_consulting_agents.py::test_end_to_end_engagement FAILED       [ 25%]
tests/test_consulting_agents.py::test_knowledge_graph_consistency FAILED [ 25%]
tests/test_consulting_agents.py::test_agent_diary_functionality FAILED   [ 25%]
tests/test_consulting_agents.py::test_agent_diary_in_knowledge_graph FAILED [ 26%]
tests/test_dynamic_agents.py::test_agent_initialization ERROR            [ 26%]
tests/test_dynamic_agents.py::test_capability_tracking ERROR             [ 27%]
tests/test_dynamic_agents.py::test_knowledge_graph_operations ERROR      [ 27%]
tests/test_dynamic_agents.py::test_agent_creation FAILED                 [ 27%]
tests/test_dynamic_agents.py::test_role_delegation FAILED                [ 28%]
tests/test_dynamic_agents.py::test_agent_scaling FAILED                  [ 28%]
tests/test_dynamic_agents.py::test_supervisor_agent FAILED               [ 29%]
tests/test_dynamic_agents.py::test_workload_monitoring FAILED            [ 29%]
tests/test_email_send.py::test_email FAILED                              [ 30%]
tests/test_graph_monitoring.py::test_stats_collection FAILED             [ 30%]
tests/test_graph_monitoring.py::test_timestamp_tracking PASSED           [ 30%]
tests/test_graph_monitoring.py::test_cache_monitoring FAILED             [ 31%]
tests/test_graph_monitoring.py::test_index_monitoring PASSED             [ 31%]
tests/test_graph_monitoring.py::test_performance_monitoring FAILED       [ 32%]
tests/test_graph_optimizations.py::test_knowledge_graph_manager_add_triple PASSED [ 32%]
tests/test_graph_optimizations.py::test_knowledge_graph_manager_timestamp_tracking PASSED [ 32%]
tests/test_graph_optimizations.py::test_async_lru_cache PASSED           [ 33%]
tests/test_graph_optimizations.py::test_triple_indexing PASSED           [ 33%]
tests/test_graph_optimizations.py::test_concurrent_operations PASSED     [ 34%]
tests/test_graph_optimizations.py::test_cache_invalidation PASSED        [ 34%]
tests/test_graph_performance.py::test_query_performance PASSED           [ 34%]
tests/test_graph_performance.py::test_concurrent_query_performance PASSED [ 35%]
tests/test_graph_performance.py::test_indexing_performance PASSED        [ 35%]
tests/test_graph_performance.py::test_cache_eviction_performance PASSED  [ 36%]
tests/test_graph_performance.py::test_memory_usage PASSED                [ 36%]
tests/test_graphdb_integration.py::test_graphdb_connection PASSED        [ 37%]
tests/test_graphdb_integration.py::test_add_and_query_triple PASSED      [ 37%]
tests/test_graphdb_integration.py::test_reasoner_with_graphdb PASSED     [ 37%]
tests/test_graphdb_integration.py::test_traverse_knowledge_graph PASSED  [ 38%]
tests/test_implementation_guide.py::test_pdf_exists[Data Collected During Interactions.pdf] PASSED [ 38%]
tests/test_implementation_guide.py::test_pdf_exists[Self-Assembling AI Agent Architectures for Dynamic Corporate Knowledge Systems.pdf] PASSED [ 39%]
tests/test_implementation_guide.py::test_pdf_exists[Agent Initialization Prompt for a Multi-Agent Knowledge Graph System.pdf] PASSED [ 39%]
tests/test_implementation_guide.py::test_pdf_exists[Judge Agent System Initialization.pdf] PASSED [ 39%]
tests/test_implementation_guide.py::test_pdf_exists[Analysis of the Cohort Definition RDF File and Knowledge Graph Integration.pdf] PASSED [ 40%]
tests/test_implementation_guide.py::test_pdf_exists[Comparable Multi-Agent Knowledge-Graph Systems.pdf] PASSED [ 40%]
tests/test_implementation_guide.py::test_pdf_header[Data Collected During Interactions.pdf] PASSED [ 41%]
tests/test_implementation_guide.py::test_pdf_header[Self-Assembling AI Agent Architectures for Dynamic Corporate Knowledge Systems.pdf] PASSED [ 41%]
tests/test_implementation_guide.py::test_pdf_header[Agent Initialization Prompt for a Multi-Agent Knowledge Graph System.pdf] PASSED [ 41%]
tests/test_implementation_guide.py::test_pdf_header[Judge Agent System Initialization.pdf] PASSED [ 42%]
tests/test_implementation_guide.py::test_pdf_header[Analysis of the Cohort Definition RDF File and Knowledge Graph Integration.pdf] PASSED [ 42%]
tests/test_implementation_guide.py::test_pdf_header[Comparable Multi-Agent Knowledge-Graph Systems.pdf] PASSED [ 43%]
tests/test_integration_management.py::test_integration_management ERROR  [ 43%]
tests/test_integration_management.py::test_module_management ERROR       [ 44%]
tests/test_integration_management.py::test_integration_metrics ERROR     [ 44%]
tests/test_knowledge_graph.py::test_knowledge_graph_initialization PASSED [ 44%]
tests/test_knowledge_graph.py::test_agent_knowledge_graph_access PASSED  [ 45%]
tests/test_knowledge_graph.py::test_knowledge_graph_updates PASSED       [ 45%]
tests/test_knowledge_graph.py::test_knowledge_graph_validation PASSED    [ 46%]
tests/test_knowledge_graph.py::test_triple_addition PASSED               [ 46%]
tests/test_knowledge_graph.py::test_graph_update PASSED                  [ 46%]
tests/test_knowledge_graph.py::test_graph_query PASSED                   [ 47%]
tests/test_knowledge_graph.py::test_semantic_relationships PASSED        [ 47%]
tests/test_knowledge_graph.py::test_complex_query_patterns PASSED        [ 48%]
tests/test_knowledge_graph.py::test_load_ontology PASSED                 [ 48%]
tests/test_knowledge_graph.py::test_load_sample_data PASSED              [ 48%]
tests/test_knowledge_graph.py::test_initialize_graph PASSED              [ 49%]
tests/test_knowledge_graph.py::test_add_triple PASSED                    [ 49%]
tests/test_knowledge_graph.py::test_query_graph PASSED                   [ 50%]
tests/test_knowledge_graph.py::test_performance_metrics PASSED           [ 50%]
tests/test_knowledge_graph.py::test_type_conversion PASSED               [ 51%]
tests/test_knowledge_graph.py::test_cache_metrics PASSED                 [ 51%]
tests/test_knowledge_graph.py::test_clear_metrics PASSED                 [ 51%]
tests/test_knowledge_graph.py::test_subclass_reasoning_sensors PASSED    [ 52%]
tests/test_knowledge_graph.py::test_average_sensor_reading_per_machine PASSED [ 52%]
tests/test_knowledge_graph.py::test_high_alert_sensors PASSED            [ 53%]
tests/test_knowledge_graph.py::test_machine_status_summary PASSED        [ 53%]
tests/test_knowledge_graph.py::test_query_no_data PASSED                 [ 53%]
tests/test_knowledge_graph.py::test_high_risk_machines PASSED            [ 54%]
tests/test_knowledge_graph.py::test_machine_risk_scoring PASSED          [ 54%]
tests/test_knowledge_graph.py::test_graph_versioning PASSED              [ 55%]
tests/test_knowledge_graph.py::test_graph_security PASSED                [ 55%]
tests/test_knowledge_graph.py::test_graph_validation PASSED              [ 55%]
tests/test_knowledge_graph.py::test_selective_cache_invalidation PASSED  [ 56%]
tests/test_knowledge_graph.py::test_enhanced_metrics PASSED              [ 56%]
tests/test_knowledge_graph.py::test_agentic_ontology_loading PASSED      [ 57%]
tests/test_knowledge_graph.py::test_kg_manager_cleanup PASSED            [ 57%]
tests/test_knowledge_graph.py::test_kg_manager_caching PASSED            [ 58%]
tests/test_knowledge_graph.py::test_kg_manager_cache_invalidation PASSED [ 58%]
tests/test_knowledge_graph.py::test_kg_manager_cache_ttl PASSED          [ 58%]
tests/test_knowledge_graph.py::test_kg_manager_concurrent_access PASSED  [ 59%]
tests/test_knowledge_graph.py::test_kg_manager_error_handling PASSED     [ 59%]
tests/test_knowledge_graph.py::test_kg_manager_metrics PASSED            [ 60%]
tests/test_knowledge_graph.py::test_kg_manager_bulk_operations PASSED    [ 60%]
tests/test_main_api.py::test_investigate PASSED                          [ 60%]
tests/test_main_api.py::test_traverse PASSED                             [ 61%]
tests/test_main_api.py::test_feedback PASSED                             [ 61%]
tests/test_performance.py::TestPerformance::test_message_processing_performance ERROR [ 62%]
tests/test_performance.py::TestPerformance::test_concurrent_operations ERROR [ 62%]
tests/test_performance.py::TestPerformance::test_resource_usage ERROR    [ 62%]
tests/test_performance.py::TestPerformance::test_recovery_performance ERROR [ 63%]
tests/test_prompt_agent.py::TestPromptAgent::test_prompt_generation FAILED [ 63%]
tests/test_prompt_agent.py::TestPromptAgent::test_knowledge_graph_integration FAILED [ 64%]
tests/test_prompt_agent.py::TestPromptAgent::test_prompt_validation FAILED [ 64%]
tests/test_prompt_agent.py::TestPromptAgent::test_prompt_metrics FAILED  [ 65%]
tests/test_reasoner.py::test_investigate_research_topic FAILED           [ 65%]
tests/test_reasoner.py::test_find_topic_entries FAILED                   [ 65%]
tests/test_reasoner.py::test_find_related_papers FAILED                  [ 66%]
tests/test_reasoner.py::test_extract_key_insights FAILED                 [ 66%]
tests/test_reasoner.py::test_calculate_confidence PASSED                 [ 67%]
tests/test_reasoner.py::test_traverse_knowledge_graph FAILED             [ 67%]
tests/test_reasoner.py::test_find_related_concepts PASSED                [ 67%]
tests/test_remote_graph_manager.py::test_query_graph PASSED              [ 68%]
tests/test_remote_graph_manager.py::test_update_graph PASSED             [ 68%]
tests/test_remote_graph_manager.py::test_import_graph PASSED             [ 69%]
tests/test_remote_graph_manager.py::test_remote_graph_manager_integration PASSED [ 69%]
tests/test_research_agent.py::test_initialize PASSED                     [ 69%]
tests/test_research_agent.py::test_process_message FAILED                [ 70%]
tests/test_research_agent.py::test_test_agent_initialization FAILED      [ 70%]
tests/test_research_agent.py::test_test_agent_message_history FAILED     [ 71%]
tests/test_research_agent.py::test_test_agent_knowledge_graph FAILED     [ 71%]
tests/test_research_agent.py::test_process_message_without_topic FAILED  [ 72%]
tests/test_research_agent.py::test_process_message_with_topic FAILED     [ 72%]
tests/test_research_agent.py::test_query_knowledge_graph_without_topic PASSED [ 72%]
tests/test_research_agent.py::test_query_knowledge_graph_with_topic PASSED [ 73%]
tests/test_research_agent.py::test_update_knowledge_graph PASSED         [ 73%]
tests/test_research_agent.py::test_confidence_scoring FAILED             [ 74%]
tests/test_research_agent.py::test_evidence_tracking FAILED              [ 74%]
tests/test_research_agent.py::test_multiple_research_paths FAILED        [ 74%]
tests/test_research_agent.py::test_error_handling FAILED                 [ 75%]
tests/test_research_agent.py::test_reasoner_integration FAILED           [ 75%]
tests/test_research_agent.py::test_research_findings_persistence FAILED  [ 76%]
tests/test_security_audit.py::test_security_levels ERROR                 [ 76%]
tests/test_security_audit.py::test_audit_logging ERROR                   [ 76%]
tests/test_security_audit.py::test_security_metrics ERROR                [ 77%]
tests/test_vertex_auth.py::test_credentials FAILED                       [ 77%]
tests/test_vertex_auth.py::test_vertex_initialization FAILED             [ 78%]
tests/test_vertex_auth.py::test_model_access FAILED                      [ 78%]
tests/test_vertex_email.py::test_vertex_email PASSED                     [ 79%]
tests/test_vertex_integration.py::test_vertex_initialization FAILED      [ 79%]
tests/test_vertex_integration.py::test_email_enhancement PASSED          [ 79%]
tests/test_vertex_integration.py::test_message_processing PASSED         [ 80%]
tests/test_vertex_integration.py::test_invalid_message_type FAILED       [ 80%]
tests/test_vertex_integration.py::test_knowledge_graph_integration FAILED [ 81%]
tests/test_vertex_integration.py::test_error_handling FAILED             [ 81%]
tests/test_vertex_integration.py::test_empty_subject_and_body FAILED     [ 81%]
tests/test_vertex_integration.py::test_credentials FAILED                [ 82%]
tests/test_vertex_integration.py::test_model_access FAILED               [ 82%]
tests/test_workflow_manager.py::test_agent_registration ERROR            [ 83%]
tests/test_workflow_manager.py::test_workflow_creation FAILED            [ 83%]
tests/test_workflow_manager.py::test_workflow_assembly FAILED            [ 83%]
tests/test_workflow_manager.py::test_workflow_execution ERROR            [ 84%]
tests/test_workflow_manager.py::test_workflow_supervision ERROR          [ 84%]
tests/test_workflow_manager.py::test_workflow_validation FAILED          [ 85%]
tests/test_workflow_manager.py::test_load_balancing FAILED               [ 85%]
tests/test_workflow_manager.py::test_workflow_metrics FAILED             [ 86%]
tests/test_workflow_manager.py::test_registry_state_consistency FAILED   [ 86%]
tests/test_workflow_manager.py::test_concurrent_registration_and_assembly FAILED [ 86%]
tests/test_workflow_manager.py::test_registry_recovery FAILED            [ 87%]
tests/test_workflow_manager.py::test_capability_conflicts FAILED         [ 87%]
tests/test_workflow_manager.py::test_registry_persistence FAILED         [ 88%]
tests/test_workflow_manager.py::test_anomaly_detection_workflow ERROR    [ 88%]
tests/test_workflow_manager.py::test_workflow_dependency_execution ERROR [ 88%]
tests/test_workflow_manager.py::test_workflow_timeout_handling ERROR     [ 89%]
tests/test_workflow_manager.py::test_workflow_error_recovery ERROR       [ 89%]
tests/test_workflow_manager.py::test_transaction_atomicity FAILED        [ 90%]
tests/test_workflow_manager.py::test_retry_logic FAILED                  [ 90%]
tests/test_workflow_manager.py::test_concurrent_transactions FAILED      [ 90%]
tests/test_workflow_manager.py::test_transaction_timeout FAILED          [ 91%]
tests/test_workflow_persistence.py::test_workflow_persistence_save_load PASSED [ 91%]
tests/test_workflow_persistence.py::test_workflow_persistence_versioning FAILED [ 92%]
tests/test_workflow_persistence.py::test_workflow_persistence_recovery FAILED [ 92%]
tests/test_workflow_persistence.py::test_workflow_monitoring FAILED      [ 93%]
tests/test_workflow_persistence.py::test_workflow_alerts PASSED          [ 93%]
tests/test_workflow_persistence.py::test_workflow_manager_integration FAILED [ 93%]
tests/unit/test_additional_agents.py::test_diary_write_and_query PASSED  [ 94%]
tests/unit/test_additional_agents.py::test_diary_agent PASSED            [ 94%]
tests/unit/test_additional_agents.py::test_judge_evaluates_email PASSED  [ 95%]
tests/unit/test_additional_agents.py::test_simple_agents_response PASSED [ 95%]
tests/unit/test_additional_agents.py::test_simple_agents_knowledge_graph PASSED [ 95%]
tests/unit/test_corporate_knowledge_agent.py::test_agent_initialization PASSED [ 96%]
tests/unit/test_corporate_knowledge_agent.py::test_document_ingest PASSED [ 96%]
tests/unit/test_corporate_knowledge_agent.py::test_knowledge_query PASSED [ 97%]
tests/unit/test_corporate_knowledge_agent.py::test_document_update PASSED [ 97%]
tests/unit/test_corporate_knowledge_agent.py::test_unknown_message_type PASSED [ 97%]
tests/unit/test_judge_agent.py::test_judge_evaluates_email ERROR         [ 98%]
tests/unit/test_test_agents.py::test_test_agent_initialization FAILED    [ 98%]
tests/unit/test_test_agents.py::test_test_agent_process_message FAILED   [ 99%]
tests/unit/test_test_agents.py::test_test_agent_update_knowledge_graph PASSED [ 99%]
tests/unit/test_vertex_email_agent.py::test_send_email PASSED            [100%]

==================================== ERRORS ====================================
_________________ ERROR at setup of test_agent_initialization __________________

factory = <agents.core.agent_factory.AgentFactory object at 0x12667fa90>

    @pytest_asyncio.fixture
    async def test_agent(factory):
        """Create a test agent with mixed capability types."""
        capabilities = {
            Capability("custom_capability", "A custom capability"),
            CapabilityType.KNOWLEDGE_GRAPH,
            CapabilityType.MESSAGE_PROCESSING
        }
>       agent = await factory.create_agent("test_agent", "test", capabilities)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_dynamic_agents.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <agents.core.agent_factory.AgentFactory object at 0x12667fa90>
agent_type = 'test_agent', agent_id = 'test'
capabilities = {<CapabilityType.KNOWLEDGE_GRAPH: 'knowledge_graph'>, <[AttributeError("'str' object has no attribute 'value'") raised in repr()] Capability object at 0x140c7bd50>, <CapabilityType.MESSAGE_PROCESSING: 'message_processing'>}
kwargs = {}

    async def create_agent(
        self,
        agent_type: str,
        agent_id: Optional[str] = None,
        capabilities: Optional[Set[Capability]] = None,
        **kwargs
    ) -> BaseAgent:
        """Create a new agent instance.
    
        Args:
            agent_type: The type of agent to create.
            agent_id: Optional ID for the agent. If not provided, one will be generated.
            capabilities: Optional initial capabilities. If not provided, will use defaults.
            **kwargs: Additional arguments to pass to the agent constructor.
    
        Returns:
            BaseAgent: The created agent instance.
    
        Raises:
            ValueError: If the agent type is not registered.
            RuntimeError: If agent creation fails.
        """
        if agent_type not in self._agent_classes:
>           raise ValueError(f"Unknown agent type: {agent_type}")
E           ValueError: Unknown agent type: test_agent

agents/core/agent_factory.py:112: ValueError
__________________ ERROR at setup of test_capability_tracking __________________

factory = <agents.core.agent_factory.AgentFactory object at 0x140e54e90>

    @pytest_asyncio.fixture
    async def capability_agent(factory):
        """Create a capability tracking agent."""
        capabilities = {CapabilityType.KNOWLEDGE_GRAPH}
>       agent = await factory.create_agent("capability_agent", "test", capabilities)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_dynamic_agents.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <agents.core.agent_factory.AgentFactory object at 0x140e54e90>
agent_type = 'capability_agent', agent_id = 'test'
capabilities = {<CapabilityType.KNOWLEDGE_GRAPH: 'knowledge_graph'>}
kwargs = {}

    async def create_agent(
        self,
        agent_type: str,
        agent_id: Optional[str] = None,
        capabilities: Optional[Set[Capability]] = None,
        **kwargs
    ) -> BaseAgent:
        """Create a new agent instance.
    
        Args:
            agent_type: The type of agent to create.
            agent_id: Optional ID for the agent. If not provided, one will be generated.
            capabilities: Optional initial capabilities. If not provided, will use defaults.
            **kwargs: Additional arguments to pass to the agent constructor.
    
        Returns:
            BaseAgent: The created agent instance.
    
        Raises:
            ValueError: If the agent type is not registered.
            RuntimeError: If agent creation fails.
        """
        if agent_type not in self._agent_classes:
>           raise ValueError(f"Unknown agent type: {agent_type}")
E           ValueError: Unknown agent type: capability_agent

agents/core/agent_factory.py:112: ValueError
______________ ERROR at setup of test_knowledge_graph_operations _______________

factory = <agents.core.agent_factory.AgentFactory object at 0x140b32cd0>

    @pytest_asyncio.fixture
    async def capability_agent(factory):
        """Create a capability tracking agent."""
        capabilities = {CapabilityType.KNOWLEDGE_GRAPH}
>       agent = await factory.create_agent("capability_agent", "test", capabilities)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_dynamic_agents.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <agents.core.agent_factory.AgentFactory object at 0x140b32cd0>
agent_type = 'capability_agent', agent_id = 'test'
capabilities = {<CapabilityType.KNOWLEDGE_GRAPH: 'knowledge_graph'>}
kwargs = {}

    async def create_agent(
        self,
        agent_type: str,
        agent_id: Optional[str] = None,
        capabilities: Optional[Set[Capability]] = None,
        **kwargs
    ) -> BaseAgent:
        """Create a new agent instance.
    
        Args:
            agent_type: The type of agent to create.
            agent_id: Optional ID for the agent. If not provided, one will be generated.
            capabilities: Optional initial capabilities. If not provided, will use defaults.
            **kwargs: Additional arguments to pass to the agent constructor.
    
        Returns:
            BaseAgent: The created agent instance.
    
        Raises:
            ValueError: If the agent type is not registered.
            RuntimeError: If agent creation fails.
        """
        if agent_type not in self._agent_classes:
>           raise ValueError(f"Unknown agent type: {agent_type}")
E           ValueError: Unknown agent type: capability_agent

agents/core/agent_factory.py:112: ValueError
________________ ERROR at setup of test_integration_management _________________

    @pytest_asyncio.fixture
    async def setup_integration_test():
        """Set up test environment for integration testing."""
        registry = AgentRegistry()
        knowledge_graph = Graph()
        factory = AgentFactory(registry, knowledge_graph)
    
        # Register test agent templates
        await factory.register_agent_template(
            "integration_test",
            TestIntegrationAgent,
>           {CapabilityType.INTEGRATION_MANAGEMENT}
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        )

tests/test_integration_management.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <enum 'CapabilityType'>, name = 'INTEGRATION_MANAGEMENT'

    def __getattr__(cls, name):
        """
        Return the enum member matching `name`
    
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        if _is_dunder(name):
            raise AttributeError(name)
        try:
            return cls._member_map_[name]
        except KeyError:
>           raise AttributeError(name) from None
E           AttributeError: INTEGRATION_MANAGEMENT

/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/enum.py:784: AttributeError
___________________ ERROR at setup of test_module_management ___________________

    @pytest_asyncio.fixture
    async def setup_integration_test():
        """Set up test environment for integration testing."""
        registry = AgentRegistry()
        knowledge_graph = Graph()
        factory = AgentFactory(registry, knowledge_graph)
    
        # Register test agent templates
        await factory.register_agent_template(
            "integration_test",
            TestIntegrationAgent,
>           {CapabilityType.INTEGRATION_MANAGEMENT}
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        )

tests/test_integration_management.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <enum 'CapabilityType'>, name = 'INTEGRATION_MANAGEMENT'

    def __getattr__(cls, name):
        """
        Return the enum member matching `name`
    
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        if _is_dunder(name):
            raise AttributeError(name)
        try:
            return cls._member_map_[name]
        except KeyError:
>           raise AttributeError(name) from None
E           AttributeError: INTEGRATION_MANAGEMENT

/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/enum.py:784: AttributeError
__________________ ERROR at setup of test_integration_metrics __________________

    @pytest_asyncio.fixture
    async def setup_integration_test():
        """Set up test environment for integration testing."""
        registry = AgentRegistry()
        knowledge_graph = Graph()
        factory = AgentFactory(registry, knowledge_graph)
    
        # Register test agent templates
        await factory.register_agent_template(
            "integration_test",
            TestIntegrationAgent,
>           {CapabilityType.INTEGRATION_MANAGEMENT}
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        )

tests/test_integration_management.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <enum 'CapabilityType'>, name = 'INTEGRATION_MANAGEMENT'

    def __getattr__(cls, name):
        """
        Return the enum member matching `name`
    
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        if _is_dunder(name):
            raise AttributeError(name)
        try:
            return cls._member_map_[name]
        except KeyError:
>           raise AttributeError(name) from None
E           AttributeError: INTEGRATION_MANAGEMENT

/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/enum.py:784: AttributeError
____ ERROR at setup of TestPerformance.test_message_processing_performance _____

self = <tests.test_performance.TestPerformance object at 0x1121b4310>

    @pytest_asyncio.fixture
    async def setup_performance_test(self):
        """Set up test environment for performance testing."""
        knowledge_graph = Graph()
>       agent = TestPerformanceAgent(
            "test_performance_agent",
            capabilities={
                Capability(CapabilityType.TASK_EXECUTION, "1.0"),
                Capability(CapabilityType.KNOWLEDGE_GRAPH_QUERY, "1.0"),
                Capability(CapabilityType.KNOWLEDGE_GRAPH_UPDATE, "1.0")
            }
        )
E       TypeError: Can't instantiate abstract class TestPerformanceAgent with abstract method _process_message_impl

tests/test_performance.py:67: TypeError
_________ ERROR at setup of TestPerformance.test_concurrent_operations _________

self = <tests.test_performance.TestPerformance object at 0x1121b4b90>

    @pytest_asyncio.fixture
    async def setup_performance_test(self):
        """Set up test environment for performance testing."""
        knowledge_graph = Graph()
>       agent = TestPerformanceAgent(
            "test_performance_agent",
            capabilities={
                Capability(CapabilityType.TASK_EXECUTION, "1.0"),
                Capability(CapabilityType.KNOWLEDGE_GRAPH_QUERY, "1.0"),
                Capability(CapabilityType.KNOWLEDGE_GRAPH_UPDATE, "1.0")
            }
        )
E       TypeError: Can't instantiate abstract class TestPerformanceAgent with abstract method _process_message_impl

tests/test_performance.py:67: TypeError
____________ ERROR at setup of TestPerformance.test_resource_usage _____________

self = <tests.test_performance.TestPerformance object at 0x1121b5550>

    @pytest_asyncio.fixture
    async def setup_performance_test(self):
        """Set up test environment for performance testing."""
        knowledge_graph = Graph()
>       agent = TestPerformanceAgent(
            "test_performance_agent",
            capabilities={
                Capability(CapabilityType.TASK_EXECUTION, "1.0"),
                Capability(CapabilityType.KNOWLEDGE_GRAPH_QUERY, "1.0"),
                Capability(CapabilityType.KNOWLEDGE_GRAPH_UPDATE, "1.0")
            }
        )
E       TypeError: Can't instantiate abstract class TestPerformanceAgent with abstract method _process_message_impl

tests/test_performance.py:67: TypeError
_________ ERROR at setup of TestPerformance.test_recovery_performance __________

self = <tests.test_performance.TestPerformance object at 0x1121b57d0>

    @pytest_asyncio.fixture
    async def setup_performance_test(self):
        """Set up test environment for performance testing."""
        knowledge_graph = Graph()
>       agent = TestPerformanceAgent(
            "test_performance_agent",
            capabilities={
                Capability(CapabilityType.TASK_EXECUTION, "1.0"),
                Capability(CapabilityType.KNOWLEDGE_GRAPH_QUERY, "1.0"),
                Capability(CapabilityType.KNOWLEDGE_GRAPH_UPDATE, "1.0")
            }
        )
E       TypeError: Can't instantiate abstract class TestPerformanceAgent with abstract method _process_message_impl

tests/test_performance.py:67: TypeError
____________________ ERROR at setup of test_security_levels ____________________

    @pytest_asyncio.fixture
    async def setup_security_test():
        """Set up test environment for security testing."""
        registry = AgentRegistry()
        knowledge_graph = Graph()
        factory = AgentFactory(registry, knowledge_graph)
    
        # Register test agent template
        await factory.register_agent_template(
            "security_test",
            TestSecurityAgent,
>           {CapabilityType.SECURITY_CHECK}
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        )

tests/test_security_audit.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <enum 'CapabilityType'>, name = 'SECURITY_CHECK'

    def __getattr__(cls, name):
        """
        Return the enum member matching `name`
    
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        if _is_dunder(name):
            raise AttributeError(name)
        try:
            return cls._member_map_[name]
        except KeyError:
>           raise AttributeError(name) from None
E           AttributeError: SECURITY_CHECK

/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/enum.py:784: AttributeError
_____________________ ERROR at setup of test_audit_logging _____________________

    @pytest_asyncio.fixture
    async def setup_security_test():
        """Set up test environment for security testing."""
        registry = AgentRegistry()
        knowledge_graph = Graph()
        factory = AgentFactory(registry, knowledge_graph)
    
        # Register test agent template
        await factory.register_agent_template(
            "security_test",
            TestSecurityAgent,
>           {CapabilityType.SECURITY_CHECK}
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        )

tests/test_security_audit.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <enum 'CapabilityType'>, name = 'SECURITY_CHECK'

    def __getattr__(cls, name):
        """
        Return the enum member matching `name`
    
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        if _is_dunder(name):
            raise AttributeError(name)
        try:
            return cls._member_map_[name]
        except KeyError:
>           raise AttributeError(name) from None
E           AttributeError: SECURITY_CHECK

/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/enum.py:784: AttributeError
___________________ ERROR at setup of test_security_metrics ____________________

    @pytest_asyncio.fixture
    async def setup_security_test():
        """Set up test environment for security testing."""
        registry = AgentRegistry()
        knowledge_graph = Graph()
        factory = AgentFactory(registry, knowledge_graph)
    
        # Register test agent template
        await factory.register_agent_template(
            "security_test",
            TestSecurityAgent,
>           {CapabilityType.SECURITY_CHECK}
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        )

tests/test_security_audit.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <enum 'CapabilityType'>, name = 'SECURITY_CHECK'

    def __getattr__(cls, name):
        """
        Return the enum member matching `name`
    
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        if _is_dunder(name):
            raise AttributeError(name)
        try:
            return cls._member_map_[name]
        except KeyError:
>           raise AttributeError(name) from None
E           AttributeError: SECURITY_CHECK

/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/enum.py:784: AttributeError
__________________ ERROR at setup of test_agent_registration ___________________

registry = <agents.core.agent_registry.AgentRegistry object at 0x142d83610>

    @pytest_asyncio.fixture
    async def setup_agents(registry):
        """Set up test agents with their capabilities."""
        agents = {
            "research": ResearchTestAgent(),
>           "data_processor": DataProcessorTestAgent(),
                              ^^^^^^^^^^^^^^^^^^^^^^^^
            "sensor": SensorTestAgent()
        }
E       TypeError: DataProcessorTestAgent.__init__() missing 1 required positional argument: 'agent_id'

tests/test_workflow_manager.py:42: TypeError
__________________ ERROR at setup of test_workflow_execution ___________________
file /Users/nicholasbaro/Python/semant/tests/test_workflow_manager.py, line 148
  @pytest.mark.asyncio
  async def test_workflow_execution(workflow_manager, test_agents):
      # Create and register workflow
      workflow = Workflow(
          workflow_id="exec_workflow",
          name="Execution Workflow",
          description="Workflow for execution testing",
          required_capabilities={
              Capability(CapabilityType.TASK_EXECUTION, "1.0"),
              Capability(CapabilityType.MONITORING, "1.0")
          }
      )
      await workflow_manager.register_workflow(workflow)

      # Register agents
      await workflow_manager.register_agent(test_agents["worker"])
      await workflow_manager.register_agent(test_agents["monitor"])

      # Execute workflow
      execution = await workflow_manager.execute_workflow("exec_workflow")
      assert execution is not None
      assert execution.workflow_id == "exec_workflow"
      assert execution.status == "running"

      # Verify agent assignments
      assignments = await workflow_manager.get_workflow_assignments("exec_workflow")
      assert len(assignments) == 2
      assert any(a.agent_id == "worker_1" for a in assignments)
      assert any(a.agent_id == "monitor_1" for a in assignments)
E       fixture 'test_agents' not found
>       available fixtures: _class_event_loop, _function_event_loop, _module_event_loop, _package_event_loop, _session_event_loop, agent_factory, agent_registry, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, class_mocker, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, knowledge_graph, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, registry, session_mocker, setup_agents, test_agent, test_capabilities, test_config, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, workflow_manager
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/nicholasbaro/Python/semant/tests/test_workflow_manager.py:148
_________________ ERROR at setup of test_workflow_supervision __________________
file /Users/nicholasbaro/Python/semant/tests/test_workflow_manager.py, line 178
  @pytest.mark.asyncio
  async def test_workflow_supervision(workflow_manager, test_agents):
      # Create and register workflow
      workflow = Workflow(
          workflow_id="supervised_workflow",
          name="Supervised Workflow",
          description="Workflow with supervision",
          required_capabilities={
              Capability(CapabilityType.SUPERVISION, "1.0"),
              Capability(CapabilityType.TASK_EXECUTION, "1.0")
          }
      )
      await workflow_manager.register_workflow(workflow)

      # Register agents
      await workflow_manager.register_agent(test_agents["supervisor"])
      await workflow_manager.register_agent(test_agents["worker"])

      # Execute workflow
      execution = await workflow_manager.execute_workflow("supervised_workflow")
      assert execution is not None
      assert execution.workflow_id == "supervised_workflow"

      # Verify supervisor assignment
      assignments = await workflow_manager.get_workflow_assignments("supervised_workflow")
      assert len(assignments) == 2
      supervisor = next(a for a in assignments if a.agent_id == "supervisor_1")
      assert supervisor is not None
      capabilities = await supervisor.get_capabilities()
      assert any(c.type == CapabilityType.SUPERVISION for c in capabilities)
E       fixture 'test_agents' not found
>       available fixtures: _class_event_loop, _function_event_loop, _module_event_loop, _package_event_loop, _session_event_loop, agent_factory, agent_registry, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, class_mocker, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, knowledge_graph, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, registry, session_mocker, setup_agents, test_agent, test_capabilities, test_config, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, workflow_manager
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/nicholasbaro/Python/semant/tests/test_workflow_manager.py:178
______________ ERROR at setup of test_anomaly_detection_workflow _______________

registry = <agents.core.agent_registry.AgentRegistry object at 0x142c89150>

    @pytest_asyncio.fixture
    async def setup_agents(registry):
        """Set up test agents with their capabilities."""
        agents = {
            "research": ResearchTestAgent(),
>           "data_processor": DataProcessorTestAgent(),
                              ^^^^^^^^^^^^^^^^^^^^^^^^
            "sensor": SensorTestAgent()
        }
E       TypeError: DataProcessorTestAgent.__init__() missing 1 required positional argument: 'agent_id'

tests/test_workflow_manager.py:42: TypeError
_____________ ERROR at setup of test_workflow_dependency_execution _____________

registry = <agents.core.agent_registry.AgentRegistry object at 0x142da6690>

    @pytest_asyncio.fixture
    async def setup_agents(registry):
        """Set up test agents with their capabilities."""
        agents = {
            "research": ResearchTestAgent(),
>           "data_processor": DataProcessorTestAgent(),
                              ^^^^^^^^^^^^^^^^^^^^^^^^
            "sensor": SensorTestAgent()
        }
E       TypeError: DataProcessorTestAgent.__init__() missing 1 required positional argument: 'agent_id'

tests/test_workflow_manager.py:42: TypeError
_______________ ERROR at setup of test_workflow_timeout_handling _______________

registry = <agents.core.agent_registry.AgentRegistry object at 0x144222010>

    @pytest_asyncio.fixture
    async def setup_agents(registry):
        """Set up test agents with their capabilities."""
        agents = {
            "research": ResearchTestAgent(),
>           "data_processor": DataProcessorTestAgent(),
                              ^^^^^^^^^^^^^^^^^^^^^^^^
            "sensor": SensorTestAgent()
        }
E       TypeError: DataProcessorTestAgent.__init__() missing 1 required positional argument: 'agent_id'

tests/test_workflow_manager.py:42: TypeError
________________ ERROR at setup of test_workflow_error_recovery ________________

registry = <agents.core.agent_registry.AgentRegistry object at 0x142d5fa50>

    @pytest_asyncio.fixture
    async def setup_agents(registry):
        """Set up test agents with their capabilities."""
        agents = {
            "research": ResearchTestAgent(),
>           "data_processor": DataProcessorTestAgent(),
                              ^^^^^^^^^^^^^^^^^^^^^^^^
            "sensor": SensorTestAgent()
        }
E       TypeError: DataProcessorTestAgent.__init__() missing 1 required positional argument: 'agent_id'

tests/test_workflow_manager.py:42: TypeError
_________________ ERROR at setup of test_judge_evaluates_email _________________

    @pytest_asyncio.fixture
    async def setup_agents():
        kg = KnowledgeGraphManager()
        email_agent = VertexEmailAgent()
>       judge = JudgeAgent(kg=kg)
                ^^^^^^^^^^^^^^^^^
E       TypeError: JudgeAgent.__init__() got an unexpected keyword argument 'kg'

tests/unit/test_judge_agent.py:14: TypeError
=================================== FAILURES ===================================
_____________________________ test_register_agent ______________________________

integrator = <agents.core.agent_integrator.AgentIntegrator object at 0x12657bc10>
mock_agent = <tests.utils.test_agents.MockAgent object at 0x1266b7190>

    @pytest.mark.asyncio
    async def test_register_agent(integrator, mock_agent):
        """Test registering an agent."""
        await integrator.register_agent(mock_agent)
        assert mock_agent.agent_id in integrator.agents
        assert mock_agent.knowledge_graph is not None
>       capabilities = await mock_agent.capabilities
                             ^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'MockAgent' object has no attribute 'capabilities'

tests/test_agent_integrator.py:37: AttributeError
---------------------------- Captured stderr setup -----------------------------
2025-06-09 21:22:18.967 | DEBUG    | kg.models.graph_manager:initialize:239 - Knowledge graph initialized
2025-06-09 21:22:18.970 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:18.970 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent scientificswarmagent_165855d2 with capabilities: set()
2025-06-09 21:22:18.970 | INFO     | scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:18.970 | INFO     | scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:18.970 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for scientificswarmagent_165855d2
2025-06-09 21:22:18.972 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/remote_kg_agent.py: expected an indented block after function definition on line 80 (remote_kg_agent.py, line 82)
2025-06-09 21:22:18.974 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_integrator.py: attempted relative import with no known parent package
2025-06-09 21:22:18.975 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/multi_agent.py: MultiAgent.__init__() missing 2 required positional arguments: 'capabilities' and 'sub_agents'
2025-06-09 21:22:18.975 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/feature_z_agent.py: expected an indented block after function definition on line 50 (feature_z_agent.py, line 52)
2025-06-09 21:22:18.979 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:18.979 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.MESSAGE_PROCESSING@1.0
2025-06-09 21:22:18.979 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent sensoragent_b79f969e with capabilities: {Capability(type=message_processing, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:18.979 | INFO     | sensor_agent:initialize:20 - Sensor Agent initialized
2025-06-09 21:22:18.979 | INFO     | sensor_agent:initialize:20 - Sensor Agent initialized
2025-06-09 21:22:18.979 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for sensoragent_b79f969e
2025-06-09 21:22:18.979 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:18.979 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.KNOWLEDGE_GRAPH_UPDATE@1.0
2025-06-09 21:22:18.979 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.KNOWLEDGE_GRAPH_QUERY@1.0
2025-06-09 21:22:18.979 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_REVIEW@1.0
2025-06-09 21:22:18.979 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent agenticpromptagent_f3129d6e with capabilities: {Capability(type=knowledge_graph_update, version=1.0, parameters={}, metadata={}), Capability(type=knowledge_graph_query, version=1.0, parameters={}, metadata={}), Capability(type=code_review, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:18.979 | INFO     | agentic_prompt_agent:initialize:49 - Agentic Prompt Agent initialized
2025-06-09 21:22:18.979 | INFO     | agentic_prompt_agent:initialize:49 - Agentic Prompt Agent initialized
2025-06-09 21:22:18.979 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for agenticpromptagent_f3129d6e
2025-06-09 21:22:18.980 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/ttl_validation_agent.py: expected an indented block after function definition on line 40 (ttl_validation_agent.py, line 42)
2025-06-09 21:22:18.980 | INFO     | research_agent:initialize:25 - Research Agent initialized
2025-06-09 21:22:18.980 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/research_agent.py: Agent not initialized. Call initialize() first.
2025-06-09 21:22:18.981 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_monitor.py: attempted relative import with no known parent package
2025-06-09 21:22:18.981 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/supervisor_agent.py: SupervisorAgent.__init__() missing 2 required positional arguments: 'registry' and 'knowledge_graph'
2025-06-09 21:22:18.983 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:18.983 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.MESSAGE_PROCESSING@1.0
2025-06-09 21:22:18.983 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent dataprocessoragent_918679d7 with capabilities: {Capability(type=message_processing, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:18.983 | INFO     | data_processor_agent:initialize:20 - Data Processor Agent initialized
2025-06-09 21:22:18.983 | INFO     | data_processor_agent:initialize:20 - Data Processor Agent initialized
2025-06-09 21:22:18.983 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for dataprocessoragent_918679d7
2025-06-09 21:22:19.602 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../diary/example.py: No module named 'diary_agent'
2025-06-09 21:22:19.603 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.603 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.MESSAGE_PROCESSING@1.0
2025-06-09 21:22:19.604 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.DECISION_MAKING@1.0
2025-06-09 21:22:19.604 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent judgeagent_9fd8f7ee with capabilities: {Capability(type=message_processing, version=1.0, parameters={}, metadata={}), Capability(type=decision_making, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.604 | INFO     | judge_agent:initialize:39 - Judge Agent initialized
2025-06-09 21:22:19.604 | INFO     | judge_agent:initialize:39 - Judge Agent initialized
2025-06-09 21:22:19.604 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for judgeagent_9fd8f7ee
2025-06-09 21:22:19.604 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.604 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.DIARY_MANAGEMENT@1.0
2025-06-09 21:22:19.604 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.MESSAGE_PROCESSING@1.0
2025-06-09 21:22:19.604 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent diaryagent_9d0f49e2 with capabilities: {Capability(type=diary_management, version=1.0, parameters={}, metadata={}), Capability(type=message_processing, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.604 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for diaryagent_9d0f49e2
2025-06-09 21:22:19.605 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.605 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.PATTERN_ANALYSIS@1.0
2025-06-09 21:22:19.605 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.STATIC_ANALYSIS@1.0
2025-06-09 21:22:19.605 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_SMELL_DETECTION@1.0
2025-06-09 21:22:19.605 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_QUALITY@1.0
2025-06-09 21:22:19.605 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_REVIEW@1.0
2025-06-09 21:22:19.605 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent codereviewagent_0e9ea65d with capabilities: {Capability(type=static_analysis, version=1.0, parameters={}, metadata={}), Capability(type=pattern_analysis, version=1.0, parameters={}, metadata={}), Capability(type=code_smell_detection, version=1.0, parameters={}, metadata={}), Capability(type=code_quality, version=1.0, parameters={}, metadata={}), Capability(type=code_review, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.605 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.605 | INFO     | agents.domain.code_review_agent:initialize:48 - Code Review Agent initialized
2025-06-09 21:22:19.605 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.605 | INFO     | agents.domain.code_review_agent:initialize:48 - Code Review Agent initialized
2025-06-09 21:22:19.605 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for codereviewagent_0e9ea65d
2025-06-09 21:22:19.605 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.605 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent scientificswarmagent_8b47d2b2 with capabilities: set()
2025-06-09 21:22:19.605 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.605 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.605 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for scientificswarmagent_8b47d2b2
2025-06-09 21:22:19.605 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/test_swarm_coordinator.py: TEST_ANALYSIS
2025-06-09 21:22:19.605 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.605 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent corporateknowledgeagent_6b810afb with capabilities: set()
2025-06-09 21:22:19.605 | INFO     | corporate_knowledge_agent:initialize:34 - Corporate Knowledge Agent initialized successfully
2025-06-09 21:22:19.605 | INFO     | corporate_knowledge_agent:initialize:34 - Corporate Knowledge Agent initialized successfully
2025-06-09 21:22:19.605 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for corporateknowledgeagent_6b810afb
2025-06-09 21:22:19.606 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.606 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent vertexemailagent_004232a7 with capabilities: set()
2025-06-09 21:22:19.606 | INFO     | vertex_email_agent:initialize:19 - Vertex Email Agent initialized (simulation)
2025-06-09 21:22:19.606 | INFO     | vertex_email_agent:initialize:19 - Vertex Email Agent initialized (simulation)
2025-06-09 21:22:19.606 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for vertexemailagent_004232a7
2025-06-09 21:22:19.606 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.606 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.PATTERN_ANALYSIS@1.0
2025-06-09 21:22:19.606 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.STATIC_ANALYSIS@1.0
2025-06-09 21:22:19.606 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_SMELL_DETECTION@1.0
2025-06-09 21:22:19.606 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_QUALITY@1.0
2025-06-09 21:22:19.606 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_REVIEW@1.0
2025-06-09 21:22:19.606 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent codereviewagent_28d248e5 with capabilities: {Capability(type=static_analysis, version=1.0, parameters={}, metadata={}), Capability(type=pattern_analysis, version=1.0, parameters={}, metadata={}), Capability(type=code_smell_detection, version=1.0, parameters={}, metadata={}), Capability(type=code_quality, version=1.0, parameters={}, metadata={}), Capability(type=code_review, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.606 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.606 | INFO     | code_review_agent:initialize:48 - Code Review Agent initialized
2025-06-09 21:22:19.606 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.606 | INFO     | code_review_agent:initialize:48 - Code Review Agent initialized
2025-06-09 21:22:19.606 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for codereviewagent_28d248e5
2025-06-09 21:22:19.606 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.606 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent scientificswarmagent_03de0a35 with capabilities: set()
2025-06-09 21:22:19.606 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.606 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.606 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for scientificswarmagent_03de0a35
2025-06-09 21:22:19.606 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/simple_agents.py: Agent not initialized. Call initialize() first.
2025-06-09 21:22:19.607 | DEBUG    | agents.core.agent_registry:initialize:401 - AgentRegistry initialized
2025-06-09 21:22:19.607 | INFO     | agents.core.agent_integrator:initialize:20 - Agent registry initialized successfully
2025-06-09 21:22:19.607 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.607 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.DATA_PROCESSING@1.0
2025-06-09 21:22:19.607 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent test_agent with capabilities: {Capability(type=data_processing, version=1.0, parameters={}, metadata={})}
----------------------------- Captured stderr call -----------------------------
2025-06-09 21:22:19.607 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for test_agent
2025-06-09 21:22:19.607 | INFO     | agents.core.agent_integrator:register_agent:51 - Registered agent: test_agent
--------------------------- Captured stderr teardown ---------------------------
2025-06-09 21:22:19.690 | INFO     | agents.core.agent_registry:cleanup:109 - Starting WorkflowNotifier cleanup
2025-06-09 21:22:19.690 | INFO     | agents.core.agent_registry:_process_notifications:77 - Notification processor cancelled
2025-06-09 21:22:19.690 | INFO     | agents.core.agent_registry:cleanup:125 - WorkflowNotifier cleanup completed
2025-06-09 21:22:19.690 | INFO     | agents.core.agent_registry:cleanup:417 - AgentRegistry cleaned up
2025-06-09 21:22:19.690 | INFO     | agents.core.agent_registry:cleanup:109 - Starting WorkflowNotifier cleanup
2025-06-09 21:22:19.690 | INFO     | agents.core.agent_registry:cleanup:125 - WorkflowNotifier cleanup completed
2025-06-09 21:22:19.690 | INFO     | agents.core.agent_registry:cleanup:417 - AgentRegistry cleaned up
2025-06-09 21:22:19.690 | INFO     | agents.core.agent_registry:shutdown:783 - AgentRegistry shut down
______________________________ test_route_message ______________________________

integrator = <agents.core.agent_integrator.AgentIntegrator object at 0x1265b7d50>
mock_agent = <tests.utils.test_agents.MockAgent object at 0x13236bd50>

    @pytest.mark.asyncio
    async def test_route_message(integrator, mock_agent):
        """Test routing a message to an agent."""
        # Initialize agent first
        await mock_agent.initialize()
    
        # Register agent with explicit capabilities
        await integrator.register_agent(mock_agent)
    
        # Verify capabilities are registered
>       capabilities = await mock_agent.capabilities
                             ^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'MockAgent' object has no attribute 'capabilities'

tests/test_agent_integrator.py:54: AttributeError
---------------------------- Captured stderr setup -----------------------------
2025-06-09 21:22:19.691 | DEBUG    | kg.models.graph_manager:initialize:239 - Knowledge graph initialized
2025-06-09 21:22:19.692 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.692 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent scientificswarmagent_ffa4c503 with capabilities: set()
2025-06-09 21:22:19.692 | INFO     | scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.692 | INFO     | scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.692 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for scientificswarmagent_ffa4c503
2025-06-09 21:22:19.694 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/remote_kg_agent.py: expected an indented block after function definition on line 80 (remote_kg_agent.py, line 82)
2025-06-09 21:22:19.695 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_integrator.py: attempted relative import with no known parent package
2025-06-09 21:22:19.695 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/multi_agent.py: MultiAgent.__init__() missing 2 required positional arguments: 'capabilities' and 'sub_agents'
2025-06-09 21:22:19.696 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/feature_z_agent.py: expected an indented block after function definition on line 50 (feature_z_agent.py, line 52)
2025-06-09 21:22:19.699 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.699 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.MESSAGE_PROCESSING@1.0
2025-06-09 21:22:19.699 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent sensoragent_089c77ad with capabilities: {Capability(type=message_processing, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.699 | INFO     | sensor_agent:initialize:20 - Sensor Agent initialized
2025-06-09 21:22:19.699 | INFO     | sensor_agent:initialize:20 - Sensor Agent initialized
2025-06-09 21:22:19.699 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for sensoragent_089c77ad
2025-06-09 21:22:19.699 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.699 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.KNOWLEDGE_GRAPH_UPDATE@1.0
2025-06-09 21:22:19.699 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.KNOWLEDGE_GRAPH_QUERY@1.0
2025-06-09 21:22:19.699 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_REVIEW@1.0
2025-06-09 21:22:19.699 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent agenticpromptagent_5b3d3e1a with capabilities: {Capability(type=knowledge_graph_update, version=1.0, parameters={}, metadata={}), Capability(type=knowledge_graph_query, version=1.0, parameters={}, metadata={}), Capability(type=code_review, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.699 | INFO     | agentic_prompt_agent:initialize:49 - Agentic Prompt Agent initialized
2025-06-09 21:22:19.699 | INFO     | agentic_prompt_agent:initialize:49 - Agentic Prompt Agent initialized
2025-06-09 21:22:19.699 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for agenticpromptagent_5b3d3e1a
2025-06-09 21:22:19.699 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/ttl_validation_agent.py: expected an indented block after function definition on line 40 (ttl_validation_agent.py, line 42)
2025-06-09 21:22:19.700 | INFO     | research_agent:initialize:25 - Research Agent initialized
2025-06-09 21:22:19.700 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/research_agent.py: Agent not initialized. Call initialize() first.
2025-06-09 21:22:19.700 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_monitor.py: attempted relative import with no known parent package
2025-06-09 21:22:19.700 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/supervisor_agent.py: SupervisorAgent.__init__() missing 2 required positional arguments: 'registry' and 'knowledge_graph'
2025-06-09 21:22:19.702 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.702 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.MESSAGE_PROCESSING@1.0
2025-06-09 21:22:19.702 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent dataprocessoragent_b05ba373 with capabilities: {Capability(type=message_processing, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.702 | INFO     | data_processor_agent:initialize:20 - Data Processor Agent initialized
2025-06-09 21:22:19.702 | INFO     | data_processor_agent:initialize:20 - Data Processor Agent initialized
2025-06-09 21:22:19.702 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for dataprocessoragent_b05ba373
2025-06-09 21:22:19.719 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../diary/example.py: No module named 'diary_agent'
2025-06-09 21:22:19.720 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.720 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.MESSAGE_PROCESSING@1.0
2025-06-09 21:22:19.720 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.DECISION_MAKING@1.0
2025-06-09 21:22:19.720 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent judgeagent_a842d166 with capabilities: {Capability(type=message_processing, version=1.0, parameters={}, metadata={}), Capability(type=decision_making, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.720 | INFO     | judge_agent:initialize:39 - Judge Agent initialized
2025-06-09 21:22:19.720 | INFO     | judge_agent:initialize:39 - Judge Agent initialized
2025-06-09 21:22:19.720 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for judgeagent_a842d166
2025-06-09 21:22:19.720 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.720 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.DIARY_MANAGEMENT@1.0
2025-06-09 21:22:19.720 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.MESSAGE_PROCESSING@1.0
2025-06-09 21:22:19.720 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent diaryagent_7873e591 with capabilities: {Capability(type=diary_management, version=1.0, parameters={}, metadata={}), Capability(type=message_processing, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.720 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for diaryagent_7873e591
2025-06-09 21:22:19.720 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.720 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.PATTERN_ANALYSIS@1.0
2025-06-09 21:22:19.720 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.STATIC_ANALYSIS@1.0
2025-06-09 21:22:19.720 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_SMELL_DETECTION@1.0
2025-06-09 21:22:19.720 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_QUALITY@1.0
2025-06-09 21:22:19.720 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_REVIEW@1.0
2025-06-09 21:22:19.720 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent codereviewagent_fb90f22d with capabilities: {Capability(type=static_analysis, version=1.0, parameters={}, metadata={}), Capability(type=pattern_analysis, version=1.0, parameters={}, metadata={}), Capability(type=code_smell_detection, version=1.0, parameters={}, metadata={}), Capability(type=code_quality, version=1.0, parameters={}, metadata={}), Capability(type=code_review, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.720 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.720 | INFO     | agents.domain.code_review_agent:initialize:48 - Code Review Agent initialized
2025-06-09 21:22:19.720 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.720 | INFO     | agents.domain.code_review_agent:initialize:48 - Code Review Agent initialized
2025-06-09 21:22:19.720 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for codereviewagent_fb90f22d
2025-06-09 21:22:19.721 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.721 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent scientificswarmagent_e92294ef with capabilities: set()
2025-06-09 21:22:19.721 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.721 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.721 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for scientificswarmagent_e92294ef
2025-06-09 21:22:19.721 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/test_swarm_coordinator.py: TEST_ANALYSIS
2025-06-09 21:22:19.721 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.721 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent corporateknowledgeagent_975de68d with capabilities: set()
2025-06-09 21:22:19.721 | INFO     | corporate_knowledge_agent:initialize:34 - Corporate Knowledge Agent initialized successfully
2025-06-09 21:22:19.721 | INFO     | corporate_knowledge_agent:initialize:34 - Corporate Knowledge Agent initialized successfully
2025-06-09 21:22:19.721 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for corporateknowledgeagent_975de68d
2025-06-09 21:22:19.721 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.721 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent vertexemailagent_62b7179f with capabilities: set()
2025-06-09 21:22:19.721 | INFO     | vertex_email_agent:initialize:19 - Vertex Email Agent initialized (simulation)
2025-06-09 21:22:19.721 | INFO     | vertex_email_agent:initialize:19 - Vertex Email Agent initialized (simulation)
2025-06-09 21:22:19.721 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for vertexemailagent_62b7179f
2025-06-09 21:22:19.721 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.721 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.PATTERN_ANALYSIS@1.0
2025-06-09 21:22:19.721 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.STATIC_ANALYSIS@1.0
2025-06-09 21:22:19.721 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_SMELL_DETECTION@1.0
2025-06-09 21:22:19.721 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_QUALITY@1.0
2025-06-09 21:22:19.721 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_REVIEW@1.0
2025-06-09 21:22:19.721 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent codereviewagent_b326f279 with capabilities: {Capability(type=static_analysis, version=1.0, parameters={}, metadata={}), Capability(type=pattern_analysis, version=1.0, parameters={}, metadata={}), Capability(type=code_smell_detection, version=1.0, parameters={}, metadata={}), Capability(type=code_quality, version=1.0, parameters={}, metadata={}), Capability(type=code_review, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.721 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.721 | INFO     | code_review_agent:initialize:48 - Code Review Agent initialized
2025-06-09 21:22:19.721 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.721 | INFO     | code_review_agent:initialize:48 - Code Review Agent initialized
2025-06-09 21:22:19.721 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for codereviewagent_b326f279
2025-06-09 21:22:19.721 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.721 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent scientificswarmagent_a323e8e1 with capabilities: set()
2025-06-09 21:22:19.721 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.721 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.721 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for scientificswarmagent_a323e8e1
2025-06-09 21:22:19.721 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/simple_agents.py: Agent not initialized. Call initialize() first.
2025-06-09 21:22:19.722 | DEBUG    | agents.core.agent_registry:initialize:401 - AgentRegistry initialized
2025-06-09 21:22:19.722 | INFO     | agents.core.agent_integrator:initialize:20 - Agent registry initialized successfully
2025-06-09 21:22:19.722 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.722 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.DATA_PROCESSING@1.0
2025-06-09 21:22:19.722 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent test_agent with capabilities: {Capability(type=data_processing, version=1.0, parameters={}, metadata={})}
----------------------------- Captured stderr call -----------------------------
2025-06-09 21:22:19.722 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for test_agent
2025-06-09 21:22:19.722 | INFO     | agents.core.agent_integrator:register_agent:51 - Registered agent: test_agent
--------------------------- Captured stderr teardown ---------------------------
2025-06-09 21:22:19.724 | INFO     | agents.core.agent_registry:cleanup:109 - Starting WorkflowNotifier cleanup
2025-06-09 21:22:19.724 | INFO     | agents.core.agent_registry:_process_notifications:77 - Notification processor cancelled
2025-06-09 21:22:19.724 | INFO     | agents.core.agent_registry:cleanup:125 - WorkflowNotifier cleanup completed
2025-06-09 21:22:19.724 | INFO     | agents.core.agent_registry:cleanup:417 - AgentRegistry cleaned up
2025-06-09 21:22:19.724 | INFO     | agents.core.agent_registry:cleanup:109 - Starting WorkflowNotifier cleanup
2025-06-09 21:22:19.724 | INFO     | agents.core.agent_registry:cleanup:125 - WorkflowNotifier cleanup completed
2025-06-09 21:22:19.724 | INFO     | agents.core.agent_registry:cleanup:417 - AgentRegistry cleaned up
2025-06-09 21:22:19.724 | INFO     | agents.core.agent_registry:shutdown:783 - AgentRegistry shut down
____________________________ test_broadcast_message ____________________________

integrator = <agents.core.agent_integrator.AgentIntegrator object at 0x132402450>
mock_agent = <tests.utils.test_agents.MockAgent object at 0x126589cd0>

    @pytest.mark.asyncio
    async def test_broadcast_message(integrator, mock_agent):
        """Test broadcasting a message to all agents."""
        await integrator.register_agent(mock_agent)
        message = AgentMessage(
            sender_id="sender",
            recipient_id="all",
            content={"test": "data"},
            timestamp=time.time(),
            message_type="test"
        )
        responses = await integrator.broadcast_message(message)
>       assert len(responses) == 1
E       assert 13 == 1
E        +  where 13 = len([AgentMessage(message_id='49fb237d-8ea0-455c-887c-3dbe206ef6d7', sender_id='scientificswarmagent_8dbc3434', recipient_id='sender', content="Agent scientificswarmagent_8dbc3434 processed: {'test': 'data'}", message_type='test', timestamp=datetime.datetime(2025, 6, 9, 21, 22, 19, 755476), metadata=None), AgentMessage(message_id='1f9afebb-a952-4c76-ab35-a83949fa2337', sender_id='sensoragent_a8a9565b', recipient_id='sender', content={'error': 'Missing sensor_id or reading.'}, message_type='sensor_response', timestamp=datetime.datetime(2025, 6, 9, 21, 22, 19, 755456), metadata=None), AgentMessage(message_id='7cc848bb-341c-47f6-b17e-1cc743fa2639', sender_id='agenticpromptagent_f4a704a5', recipient_id='sender', content={'status': 'unknown_message_type', 'original_type': 'test'}, message_type='error_response', timestamp=datetime.datetime(2025, 6, 9, 21, 22, 19, 755456), metadata=None), AgentMessage(message_id='a0f8a76d-8727-4d5f-8769-9eaa8160b180', sender_id='dataprocessoragent_8eb29a71', recipient_id='sender', content={'error': 'No data provided.'}, message_type='data_processor_response', timestamp=datetime.datetime(2025, 6, 9, 21, 22, 19, 755456), metadata=None), <agents.core.base_agent.AgentMessage object at 0x12667ecd0>, <agents.core.base_agent.AgentMessage object at 0x13244c490>, AgentMessage(message_id='38bfc433-b54a-4a50-aa7b-7dc532f84229', sender_id='codereviewagent_74524312', recipient_id='sender', content="Code Review Agent codereviewagent_74524312 processed: {'test': 'data'}", message_type='test', timestamp=datetime.datetime(2025, 6, 9, 21, 22, 19, 755540), metadata=None), AgentMessage(message_id='86c3e23a-d973-4e7a-a03e-08d185cce42c', sender_id='scientificswarmagent_014075fd', recipient_id='sender', content="Agent scientificswarmagent_014075fd processed: {'test': 'data'}", message_type='test', timestamp=datetime.datetime(2025, 6, 9, 21, 22, 19, 755551), metadata=None), AgentMessage(message_id='0f5ba4aa-d5a6-44b5-9e7d-64b797480a6e', sender_id='corporateknowledgeagent_eab68eb5', recipient_id='sender', content={'status': 'error', 'message': 'Unknown message type'}, message_type='error_response', timestamp=datetime.datetime(2025, 6, 9, 21, 22, 19, 755456), metadata=None), AgentMessage(message_id='c2b8fb1b-5dcc-4226-b9f2-0b323388c964', sender_id='vertexemailagent_93a45d95', recipient_id='sender', content={'message': "Agent vertexemailagent_93a45d95 processed: {'test': 'data'}"}, message_type='test', timestamp=datetime.datetime(2025, 6, 9, 21, 22, 19, 755569), metadata=None), AgentMessage(message_id='66020689-f83f-4b4f-b818-9f2e0169c0d3', sender_id='codereviewagent_6b2f2212', recipient_id='sender', content="Code Review Agent codereviewagent_6b2f2212 processed: {'test': 'data'}", message_type='test', timestamp=datetime.datetime(2025, 6, 9, 21, 22, 19, 755577), metadata=None), AgentMessage(message_id='d71e5bcf-3e90-44ab-a86d-7ae785faddd3', sender_id='scientificswarmagent_b19020c7', recipient_id='sender', content="Agent scientificswarmagent_b19020c7 processed: {'test': 'data'}", message_type='test', timestamp=datetime.datetime(2025, 6, 9, 21, 22, 19, 755585), metadata=None), <agents.core.base_agent.AgentMessage object at 0x13244f850>])

tests/test_agent_integrator.py:97: AssertionError
---------------------------- Captured stderr setup -----------------------------
2025-06-09 21:22:19.725 | DEBUG    | kg.models.graph_manager:initialize:239 - Knowledge graph initialized
2025-06-09 21:22:19.726 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.726 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent scientificswarmagent_8dbc3434 with capabilities: set()
2025-06-09 21:22:19.726 | INFO     | scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.726 | INFO     | scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.726 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for scientificswarmagent_8dbc3434
2025-06-09 21:22:19.728 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/remote_kg_agent.py: expected an indented block after function definition on line 80 (remote_kg_agent.py, line 82)
2025-06-09 21:22:19.728 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_integrator.py: attempted relative import with no known parent package
2025-06-09 21:22:19.729 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/multi_agent.py: MultiAgent.__init__() missing 2 required positional arguments: 'capabilities' and 'sub_agents'
2025-06-09 21:22:19.729 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/feature_z_agent.py: expected an indented block after function definition on line 50 (feature_z_agent.py, line 52)
2025-06-09 21:22:19.732 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.732 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.MESSAGE_PROCESSING@1.0
2025-06-09 21:22:19.732 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent sensoragent_a8a9565b with capabilities: {Capability(type=message_processing, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.732 | INFO     | sensor_agent:initialize:20 - Sensor Agent initialized
2025-06-09 21:22:19.732 | INFO     | sensor_agent:initialize:20 - Sensor Agent initialized
2025-06-09 21:22:19.732 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for sensoragent_a8a9565b
2025-06-09 21:22:19.732 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.732 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.KNOWLEDGE_GRAPH_UPDATE@1.0
2025-06-09 21:22:19.732 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.KNOWLEDGE_GRAPH_QUERY@1.0
2025-06-09 21:22:19.732 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_REVIEW@1.0
2025-06-09 21:22:19.732 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent agenticpromptagent_f4a704a5 with capabilities: {Capability(type=knowledge_graph_update, version=1.0, parameters={}, metadata={}), Capability(type=knowledge_graph_query, version=1.0, parameters={}, metadata={}), Capability(type=code_review, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.732 | INFO     | agentic_prompt_agent:initialize:49 - Agentic Prompt Agent initialized
2025-06-09 21:22:19.732 | INFO     | agentic_prompt_agent:initialize:49 - Agentic Prompt Agent initialized
2025-06-09 21:22:19.732 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for agenticpromptagent_f4a704a5
2025-06-09 21:22:19.733 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/ttl_validation_agent.py: expected an indented block after function definition on line 40 (ttl_validation_agent.py, line 42)
2025-06-09 21:22:19.733 | INFO     | research_agent:initialize:25 - Research Agent initialized
2025-06-09 21:22:19.733 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/research_agent.py: Agent not initialized. Call initialize() first.
2025-06-09 21:22:19.733 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_monitor.py: attempted relative import with no known parent package
2025-06-09 21:22:19.733 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/supervisor_agent.py: SupervisorAgent.__init__() missing 2 required positional arguments: 'registry' and 'knowledge_graph'
2025-06-09 21:22:19.734 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.734 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.MESSAGE_PROCESSING@1.0
2025-06-09 21:22:19.734 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent dataprocessoragent_8eb29a71 with capabilities: {Capability(type=message_processing, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.734 | INFO     | data_processor_agent:initialize:20 - Data Processor Agent initialized
2025-06-09 21:22:19.734 | INFO     | data_processor_agent:initialize:20 - Data Processor Agent initialized
2025-06-09 21:22:19.734 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for dataprocessoragent_8eb29a71
2025-06-09 21:22:19.751 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../diary/example.py: No module named 'diary_agent'
2025-06-09 21:22:19.752 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.752 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.MESSAGE_PROCESSING@1.0
2025-06-09 21:22:19.752 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.DECISION_MAKING@1.0
2025-06-09 21:22:19.752 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent judgeagent_326033c4 with capabilities: {Capability(type=message_processing, version=1.0, parameters={}, metadata={}), Capability(type=decision_making, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.752 | INFO     | judge_agent:initialize:39 - Judge Agent initialized
2025-06-09 21:22:19.752 | INFO     | judge_agent:initialize:39 - Judge Agent initialized
2025-06-09 21:22:19.752 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for judgeagent_326033c4
2025-06-09 21:22:19.752 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.752 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.DIARY_MANAGEMENT@1.0
2025-06-09 21:22:19.752 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.MESSAGE_PROCESSING@1.0
2025-06-09 21:22:19.752 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent diaryagent_fb856b05 with capabilities: {Capability(type=diary_management, version=1.0, parameters={}, metadata={}), Capability(type=message_processing, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.752 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for diaryagent_fb856b05
2025-06-09 21:22:19.752 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.752 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.PATTERN_ANALYSIS@1.0
2025-06-09 21:22:19.752 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.STATIC_ANALYSIS@1.0
2025-06-09 21:22:19.752 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_SMELL_DETECTION@1.0
2025-06-09 21:22:19.752 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_QUALITY@1.0
2025-06-09 21:22:19.752 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_REVIEW@1.0
2025-06-09 21:22:19.752 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent codereviewagent_74524312 with capabilities: {Capability(type=static_analysis, version=1.0, parameters={}, metadata={}), Capability(type=pattern_analysis, version=1.0, parameters={}, metadata={}), Capability(type=code_smell_detection, version=1.0, parameters={}, metadata={}), Capability(type=code_quality, version=1.0, parameters={}, metadata={}), Capability(type=code_review, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.752 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.752 | INFO     | agents.domain.code_review_agent:initialize:48 - Code Review Agent initialized
2025-06-09 21:22:19.752 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.752 | INFO     | agents.domain.code_review_agent:initialize:48 - Code Review Agent initialized
2025-06-09 21:22:19.752 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for codereviewagent_74524312
2025-06-09 21:22:19.752 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.753 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent scientificswarmagent_014075fd with capabilities: set()
2025-06-09 21:22:19.753 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.753 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.753 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for scientificswarmagent_014075fd
2025-06-09 21:22:19.753 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/test_swarm_coordinator.py: TEST_ANALYSIS
2025-06-09 21:22:19.753 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.753 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent corporateknowledgeagent_eab68eb5 with capabilities: set()
2025-06-09 21:22:19.753 | INFO     | corporate_knowledge_agent:initialize:34 - Corporate Knowledge Agent initialized successfully
2025-06-09 21:22:19.753 | INFO     | corporate_knowledge_agent:initialize:34 - Corporate Knowledge Agent initialized successfully
2025-06-09 21:22:19.753 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for corporateknowledgeagent_eab68eb5
2025-06-09 21:22:19.754 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.754 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent vertexemailagent_93a45d95 with capabilities: set()
2025-06-09 21:22:19.754 | INFO     | vertex_email_agent:initialize:19 - Vertex Email Agent initialized (simulation)
2025-06-09 21:22:19.754 | INFO     | vertex_email_agent:initialize:19 - Vertex Email Agent initialized (simulation)
2025-06-09 21:22:19.754 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for vertexemailagent_93a45d95
2025-06-09 21:22:19.754 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.754 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.PATTERN_ANALYSIS@1.0
2025-06-09 21:22:19.754 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.STATIC_ANALYSIS@1.0
2025-06-09 21:22:19.754 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_SMELL_DETECTION@1.0
2025-06-09 21:22:19.754 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_QUALITY@1.0
2025-06-09 21:22:19.754 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_REVIEW@1.0
2025-06-09 21:22:19.754 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent codereviewagent_6b2f2212 with capabilities: {Capability(type=static_analysis, version=1.0, parameters={}, metadata={}), Capability(type=pattern_analysis, version=1.0, parameters={}, metadata={}), Capability(type=code_smell_detection, version=1.0, parameters={}, metadata={}), Capability(type=code_quality, version=1.0, parameters={}, metadata={}), Capability(type=code_review, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.754 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.754 | INFO     | code_review_agent:initialize:48 - Code Review Agent initialized
2025-06-09 21:22:19.754 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.754 | INFO     | code_review_agent:initialize:48 - Code Review Agent initialized
2025-06-09 21:22:19.754 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for codereviewagent_6b2f2212
2025-06-09 21:22:19.754 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.754 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent scientificswarmagent_b19020c7 with capabilities: set()
2025-06-09 21:22:19.754 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.754 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.754 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for scientificswarmagent_b19020c7
2025-06-09 21:22:19.754 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/simple_agents.py: Agent not initialized. Call initialize() first.
2025-06-09 21:22:19.754 | DEBUG    | agents.core.agent_registry:initialize:401 - AgentRegistry initialized
2025-06-09 21:22:19.754 | INFO     | agents.core.agent_integrator:initialize:20 - Agent registry initialized successfully
2025-06-09 21:22:19.754 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.754 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.DATA_PROCESSING@1.0
2025-06-09 21:22:19.755 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent test_agent with capabilities: {Capability(type=data_processing, version=1.0, parameters={}, metadata={})}
----------------------------- Captured stderr call -----------------------------
2025-06-09 21:22:19.755 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for test_agent
2025-06-09 21:22:19.755 | INFO     | agents.core.agent_integrator:register_agent:51 - Registered agent: test_agent
--------------------------- Captured stderr teardown ---------------------------
2025-06-09 21:22:19.757 | INFO     | agents.core.agent_registry:cleanup:109 - Starting WorkflowNotifier cleanup
2025-06-09 21:22:19.757 | INFO     | agents.core.agent_registry:_process_notifications:77 - Notification processor cancelled
2025-06-09 21:22:19.757 | INFO     | agents.core.agent_registry:cleanup:125 - WorkflowNotifier cleanup completed
2025-06-09 21:22:19.758 | INFO     | agents.core.agent_registry:cleanup:417 - AgentRegistry cleaned up
2025-06-09 21:22:19.758 | INFO     | agents.core.agent_registry:cleanup:109 - Starting WorkflowNotifier cleanup
2025-06-09 21:22:19.758 | INFO     | agents.core.agent_registry:cleanup:125 - WorkflowNotifier cleanup completed
2025-06-09 21:22:19.758 | INFO     | agents.core.agent_registry:cleanup:417 - AgentRegistry cleaned up
2025-06-09 21:22:19.758 | INFO     | agents.core.agent_registry:shutdown:783 - AgentRegistry shut down
____________________________ test_get_agent_status _____________________________

integrator = <agents.core.agent_integrator.AgentIntegrator object at 0x12658a610>
mock_agent = <tests.utils.test_agents.MockAgent object at 0x13244eb50>

    @pytest.mark.asyncio
    async def test_get_agent_status(integrator, mock_agent):
        """Test getting agent status."""
        await integrator.register_agent(mock_agent)
        status = await integrator.get_agent_status("test_agent")
>       assert status["agent_id"] == "test_agent"
               ^^^^^^^^^^^^^^^^^^
E       KeyError: 'agent_id'

tests/test_agent_integrator.py:108: KeyError
---------------------------- Captured stderr setup -----------------------------
2025-06-09 21:22:19.758 | DEBUG    | kg.models.graph_manager:initialize:239 - Knowledge graph initialized
2025-06-09 21:22:19.759 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.759 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent scientificswarmagent_315d3571 with capabilities: set()
2025-06-09 21:22:19.759 | INFO     | scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.759 | INFO     | scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.759 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for scientificswarmagent_315d3571
2025-06-09 21:22:19.761 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/remote_kg_agent.py: expected an indented block after function definition on line 80 (remote_kg_agent.py, line 82)
2025-06-09 21:22:19.761 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_integrator.py: attempted relative import with no known parent package
2025-06-09 21:22:19.762 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/multi_agent.py: MultiAgent.__init__() missing 2 required positional arguments: 'capabilities' and 'sub_agents'
2025-06-09 21:22:19.762 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/feature_z_agent.py: expected an indented block after function definition on line 50 (feature_z_agent.py, line 52)
2025-06-09 21:22:19.765 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.765 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.MESSAGE_PROCESSING@1.0
2025-06-09 21:22:19.765 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent sensoragent_f21cae2f with capabilities: {Capability(type=message_processing, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.765 | INFO     | sensor_agent:initialize:20 - Sensor Agent initialized
2025-06-09 21:22:19.765 | INFO     | sensor_agent:initialize:20 - Sensor Agent initialized
2025-06-09 21:22:19.765 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for sensoragent_f21cae2f
2025-06-09 21:22:19.765 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.765 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.KNOWLEDGE_GRAPH_UPDATE@1.0
2025-06-09 21:22:19.765 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.KNOWLEDGE_GRAPH_QUERY@1.0
2025-06-09 21:22:19.765 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_REVIEW@1.0
2025-06-09 21:22:19.765 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent agenticpromptagent_cd67a178 with capabilities: {Capability(type=knowledge_graph_update, version=1.0, parameters={}, metadata={}), Capability(type=knowledge_graph_query, version=1.0, parameters={}, metadata={}), Capability(type=code_review, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.765 | INFO     | agentic_prompt_agent:initialize:49 - Agentic Prompt Agent initialized
2025-06-09 21:22:19.766 | INFO     | agentic_prompt_agent:initialize:49 - Agentic Prompt Agent initialized
2025-06-09 21:22:19.766 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for agenticpromptagent_cd67a178
2025-06-09 21:22:19.766 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/ttl_validation_agent.py: expected an indented block after function definition on line 40 (ttl_validation_agent.py, line 42)
2025-06-09 21:22:19.766 | INFO     | research_agent:initialize:25 - Research Agent initialized
2025-06-09 21:22:19.766 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/research_agent.py: Agent not initialized. Call initialize() first.
2025-06-09 21:22:19.766 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_monitor.py: attempted relative import with no known parent package
2025-06-09 21:22:19.766 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/supervisor_agent.py: SupervisorAgent.__init__() missing 2 required positional arguments: 'registry' and 'knowledge_graph'
2025-06-09 21:22:19.768 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.768 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.MESSAGE_PROCESSING@1.0
2025-06-09 21:22:19.768 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent dataprocessoragent_2438d5e3 with capabilities: {Capability(type=message_processing, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.768 | INFO     | data_processor_agent:initialize:20 - Data Processor Agent initialized
2025-06-09 21:22:19.768 | INFO     | data_processor_agent:initialize:20 - Data Processor Agent initialized
2025-06-09 21:22:19.768 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for dataprocessoragent_2438d5e3
2025-06-09 21:22:19.785 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../diary/example.py: No module named 'diary_agent'
2025-06-09 21:22:19.785 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.786 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.MESSAGE_PROCESSING@1.0
2025-06-09 21:22:19.786 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.DECISION_MAKING@1.0
2025-06-09 21:22:19.786 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent judgeagent_8904a8e9 with capabilities: {Capability(type=message_processing, version=1.0, parameters={}, metadata={}), Capability(type=decision_making, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.786 | INFO     | judge_agent:initialize:39 - Judge Agent initialized
2025-06-09 21:22:19.786 | INFO     | judge_agent:initialize:39 - Judge Agent initialized
2025-06-09 21:22:19.786 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for judgeagent_8904a8e9
2025-06-09 21:22:19.786 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.786 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.DIARY_MANAGEMENT@1.0
2025-06-09 21:22:19.786 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.MESSAGE_PROCESSING@1.0
2025-06-09 21:22:19.786 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent diaryagent_d3b72f23 with capabilities: {Capability(type=diary_management, version=1.0, parameters={}, metadata={}), Capability(type=message_processing, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.786 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for diaryagent_d3b72f23
2025-06-09 21:22:19.786 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.786 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.PATTERN_ANALYSIS@1.0
2025-06-09 21:22:19.786 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.STATIC_ANALYSIS@1.0
2025-06-09 21:22:19.786 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_SMELL_DETECTION@1.0
2025-06-09 21:22:19.786 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_QUALITY@1.0
2025-06-09 21:22:19.786 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_REVIEW@1.0
2025-06-09 21:22:19.786 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent codereviewagent_5b151ca8 with capabilities: {Capability(type=static_analysis, version=1.0, parameters={}, metadata={}), Capability(type=pattern_analysis, version=1.0, parameters={}, metadata={}), Capability(type=code_smell_detection, version=1.0, parameters={}, metadata={}), Capability(type=code_quality, version=1.0, parameters={}, metadata={}), Capability(type=code_review, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.786 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.786 | INFO     | agents.domain.code_review_agent:initialize:48 - Code Review Agent initialized
2025-06-09 21:22:19.786 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.786 | INFO     | agents.domain.code_review_agent:initialize:48 - Code Review Agent initialized
2025-06-09 21:22:19.786 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for codereviewagent_5b151ca8
2025-06-09 21:22:19.786 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.786 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent scientificswarmagent_52e85724 with capabilities: set()
2025-06-09 21:22:19.786 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.786 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.786 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for scientificswarmagent_52e85724
2025-06-09 21:22:19.786 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/test_swarm_coordinator.py: TEST_ANALYSIS
2025-06-09 21:22:19.787 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.787 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent corporateknowledgeagent_245bdcb1 with capabilities: set()
2025-06-09 21:22:19.787 | INFO     | corporate_knowledge_agent:initialize:34 - Corporate Knowledge Agent initialized successfully
2025-06-09 21:22:19.787 | INFO     | corporate_knowledge_agent:initialize:34 - Corporate Knowledge Agent initialized successfully
2025-06-09 21:22:19.787 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for corporateknowledgeagent_245bdcb1
2025-06-09 21:22:19.787 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.787 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent vertexemailagent_29443a25 with capabilities: set()
2025-06-09 21:22:19.787 | INFO     | vertex_email_agent:initialize:19 - Vertex Email Agent initialized (simulation)
2025-06-09 21:22:19.787 | INFO     | vertex_email_agent:initialize:19 - Vertex Email Agent initialized (simulation)
2025-06-09 21:22:19.787 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for vertexemailagent_29443a25
2025-06-09 21:22:19.787 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.787 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.PATTERN_ANALYSIS@1.0
2025-06-09 21:22:19.787 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.STATIC_ANALYSIS@1.0
2025-06-09 21:22:19.787 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_SMELL_DETECTION@1.0
2025-06-09 21:22:19.787 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_QUALITY@1.0
2025-06-09 21:22:19.787 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_REVIEW@1.0
2025-06-09 21:22:19.787 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent codereviewagent_9e90ac75 with capabilities: {Capability(type=static_analysis, version=1.0, parameters={}, metadata={}), Capability(type=pattern_analysis, version=1.0, parameters={}, metadata={}), Capability(type=code_smell_detection, version=1.0, parameters={}, metadata={}), Capability(type=code_quality, version=1.0, parameters={}, metadata={}), Capability(type=code_review, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.787 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.787 | INFO     | code_review_agent:initialize:48 - Code Review Agent initialized
2025-06-09 21:22:19.787 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.787 | INFO     | code_review_agent:initialize:48 - Code Review Agent initialized
2025-06-09 21:22:19.787 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for codereviewagent_9e90ac75
2025-06-09 21:22:19.787 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.787 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent scientificswarmagent_bfea5e14 with capabilities: set()
2025-06-09 21:22:19.787 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.787 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.787 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for scientificswarmagent_bfea5e14
2025-06-09 21:22:19.787 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/simple_agents.py: Agent not initialized. Call initialize() first.
2025-06-09 21:22:19.787 | DEBUG    | agents.core.agent_registry:initialize:401 - AgentRegistry initialized
2025-06-09 21:22:19.787 | INFO     | agents.core.agent_integrator:initialize:20 - Agent registry initialized successfully
2025-06-09 21:22:19.788 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.788 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.DATA_PROCESSING@1.0
2025-06-09 21:22:19.788 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent test_agent with capabilities: {Capability(type=data_processing, version=1.0, parameters={}, metadata={})}
----------------------------- Captured stderr call -----------------------------
2025-06-09 21:22:19.788 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for test_agent
2025-06-09 21:22:19.788 | INFO     | agents.core.agent_integrator:register_agent:51 - Registered agent: test_agent
--------------------------- Captured stderr teardown ---------------------------
2025-06-09 21:22:19.790 | INFO     | agents.core.agent_registry:cleanup:109 - Starting WorkflowNotifier cleanup
2025-06-09 21:22:19.790 | INFO     | agents.core.agent_registry:_process_notifications:77 - Notification processor cancelled
2025-06-09 21:22:19.790 | INFO     | agents.core.agent_registry:cleanup:125 - WorkflowNotifier cleanup completed
2025-06-09 21:22:19.790 | INFO     | agents.core.agent_registry:cleanup:417 - AgentRegistry cleaned up
2025-06-09 21:22:19.790 | INFO     | agents.core.agent_registry:cleanup:109 - Starting WorkflowNotifier cleanup
2025-06-09 21:22:19.790 | INFO     | agents.core.agent_registry:cleanup:125 - WorkflowNotifier cleanup completed
2025-06-09 21:22:19.790 | INFO     | agents.core.agent_registry:cleanup:417 - AgentRegistry cleaned up
2025-06-09 21:22:19.790 | INFO     | agents.core.agent_registry:shutdown:783 - AgentRegistry shut down
_________________________ test_get_all_agent_statuses __________________________

integrator = <agents.core.agent_integrator.AgentIntegrator object at 0x1324d7950>
mock_agent = <tests.utils.test_agents.MockAgent object at 0x1327b5510>

    @pytest.mark.asyncio
    async def test_get_all_agent_statuses(integrator, mock_agent):
        """Test getting status of all agents."""
        await integrator.register_agent(mock_agent)
        statuses = await integrator.get_all_agent_statuses()
        assert "test_agent" in statuses
>       assert statuses["test_agent"]["agent_type"] == "mock"
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       KeyError: 'agent_type'

tests/test_agent_integrator.py:120: KeyError
---------------------------- Captured stderr setup -----------------------------
2025-06-09 21:22:19.791 | DEBUG    | kg.models.graph_manager:initialize:239 - Knowledge graph initialized
2025-06-09 21:22:19.792 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.792 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent scientificswarmagent_51c07d78 with capabilities: set()
2025-06-09 21:22:19.792 | INFO     | scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.792 | INFO     | scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.792 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for scientificswarmagent_51c07d78
2025-06-09 21:22:19.794 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/remote_kg_agent.py: expected an indented block after function definition on line 80 (remote_kg_agent.py, line 82)
2025-06-09 21:22:19.795 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_integrator.py: attempted relative import with no known parent package
2025-06-09 21:22:19.796 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/multi_agent.py: MultiAgent.__init__() missing 2 required positional arguments: 'capabilities' and 'sub_agents'
2025-06-09 21:22:19.796 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/feature_z_agent.py: expected an indented block after function definition on line 50 (feature_z_agent.py, line 52)
2025-06-09 21:22:19.800 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.801 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.MESSAGE_PROCESSING@1.0
2025-06-09 21:22:19.801 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent sensoragent_0f4a309d with capabilities: {Capability(type=message_processing, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.801 | INFO     | sensor_agent:initialize:20 - Sensor Agent initialized
2025-06-09 21:22:19.801 | INFO     | sensor_agent:initialize:20 - Sensor Agent initialized
2025-06-09 21:22:19.801 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for sensoragent_0f4a309d
2025-06-09 21:22:19.801 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.801 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.KNOWLEDGE_GRAPH_UPDATE@1.0
2025-06-09 21:22:19.801 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.KNOWLEDGE_GRAPH_QUERY@1.0
2025-06-09 21:22:19.801 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_REVIEW@1.0
2025-06-09 21:22:19.801 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent agenticpromptagent_75623a7a with capabilities: {Capability(type=knowledge_graph_update, version=1.0, parameters={}, metadata={}), Capability(type=knowledge_graph_query, version=1.0, parameters={}, metadata={}), Capability(type=code_review, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.801 | INFO     | agentic_prompt_agent:initialize:49 - Agentic Prompt Agent initialized
2025-06-09 21:22:19.801 | INFO     | agentic_prompt_agent:initialize:49 - Agentic Prompt Agent initialized
2025-06-09 21:22:19.801 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for agenticpromptagent_75623a7a
2025-06-09 21:22:19.801 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/ttl_validation_agent.py: expected an indented block after function definition on line 40 (ttl_validation_agent.py, line 42)
2025-06-09 21:22:19.801 | INFO     | research_agent:initialize:25 - Research Agent initialized
2025-06-09 21:22:19.801 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/research_agent.py: Agent not initialized. Call initialize() first.
2025-06-09 21:22:19.802 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_monitor.py: attempted relative import with no known parent package
2025-06-09 21:22:19.802 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/supervisor_agent.py: SupervisorAgent.__init__() missing 2 required positional arguments: 'registry' and 'knowledge_graph'
2025-06-09 21:22:19.803 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.803 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.MESSAGE_PROCESSING@1.0
2025-06-09 21:22:19.803 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent dataprocessoragent_8c02e1e8 with capabilities: {Capability(type=message_processing, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.803 | INFO     | data_processor_agent:initialize:20 - Data Processor Agent initialized
2025-06-09 21:22:19.803 | INFO     | data_processor_agent:initialize:20 - Data Processor Agent initialized
2025-06-09 21:22:19.803 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for dataprocessoragent_8c02e1e8
2025-06-09 21:22:19.829 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../diary/example.py: No module named 'diary_agent'
2025-06-09 21:22:19.830 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.830 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.MESSAGE_PROCESSING@1.0
2025-06-09 21:22:19.830 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.DECISION_MAKING@1.0
2025-06-09 21:22:19.830 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent judgeagent_8c459476 with capabilities: {Capability(type=message_processing, version=1.0, parameters={}, metadata={}), Capability(type=decision_making, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.830 | INFO     | judge_agent:initialize:39 - Judge Agent initialized
2025-06-09 21:22:19.830 | INFO     | judge_agent:initialize:39 - Judge Agent initialized
2025-06-09 21:22:19.830 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for judgeagent_8c459476
2025-06-09 21:22:19.831 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.831 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.DIARY_MANAGEMENT@1.0
2025-06-09 21:22:19.831 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.MESSAGE_PROCESSING@1.0
2025-06-09 21:22:19.831 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent diaryagent_77b716a9 with capabilities: {Capability(type=diary_management, version=1.0, parameters={}, metadata={}), Capability(type=message_processing, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.831 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for diaryagent_77b716a9
2025-06-09 21:22:19.831 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.831 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.PATTERN_ANALYSIS@1.0
2025-06-09 21:22:19.831 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.STATIC_ANALYSIS@1.0
2025-06-09 21:22:19.831 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_SMELL_DETECTION@1.0
2025-06-09 21:22:19.831 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_QUALITY@1.0
2025-06-09 21:22:19.831 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_REVIEW@1.0
2025-06-09 21:22:19.831 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent codereviewagent_058e5554 with capabilities: {Capability(type=static_analysis, version=1.0, parameters={}, metadata={}), Capability(type=pattern_analysis, version=1.0, parameters={}, metadata={}), Capability(type=code_smell_detection, version=1.0, parameters={}, metadata={}), Capability(type=code_quality, version=1.0, parameters={}, metadata={}), Capability(type=code_review, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.831 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.831 | INFO     | agents.domain.code_review_agent:initialize:48 - Code Review Agent initialized
2025-06-09 21:22:19.831 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.831 | INFO     | agents.domain.code_review_agent:initialize:48 - Code Review Agent initialized
2025-06-09 21:22:19.831 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for codereviewagent_058e5554
2025-06-09 21:22:19.831 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.831 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent scientificswarmagent_221fcf7e with capabilities: set()
2025-06-09 21:22:19.831 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.831 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.831 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for scientificswarmagent_221fcf7e
2025-06-09 21:22:19.831 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/test_swarm_coordinator.py: TEST_ANALYSIS
2025-06-09 21:22:19.832 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.832 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent corporateknowledgeagent_fbb1d4fe with capabilities: set()
2025-06-09 21:22:19.832 | INFO     | corporate_knowledge_agent:initialize:34 - Corporate Knowledge Agent initialized successfully
2025-06-09 21:22:19.832 | INFO     | corporate_knowledge_agent:initialize:34 - Corporate Knowledge Agent initialized successfully
2025-06-09 21:22:19.832 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for corporateknowledgeagent_fbb1d4fe
2025-06-09 21:22:19.832 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.832 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent vertexemailagent_20eb402c with capabilities: set()
2025-06-09 21:22:19.832 | INFO     | vertex_email_agent:initialize:19 - Vertex Email Agent initialized (simulation)
2025-06-09 21:22:19.832 | INFO     | vertex_email_agent:initialize:19 - Vertex Email Agent initialized (simulation)
2025-06-09 21:22:19.832 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for vertexemailagent_20eb402c
2025-06-09 21:22:19.832 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.832 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.PATTERN_ANALYSIS@1.0
2025-06-09 21:22:19.832 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.STATIC_ANALYSIS@1.0
2025-06-09 21:22:19.832 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_SMELL_DETECTION@1.0
2025-06-09 21:22:19.832 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_QUALITY@1.0
2025-06-09 21:22:19.832 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_REVIEW@1.0
2025-06-09 21:22:19.832 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent codereviewagent_e8762d5c with capabilities: {Capability(type=static_analysis, version=1.0, parameters={}, metadata={}), Capability(type=pattern_analysis, version=1.0, parameters={}, metadata={}), Capability(type=code_smell_detection, version=1.0, parameters={}, metadata={}), Capability(type=code_quality, version=1.0, parameters={}, metadata={}), Capability(type=code_review, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.832 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.832 | INFO     | code_review_agent:initialize:48 - Code Review Agent initialized
2025-06-09 21:22:19.832 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.832 | INFO     | code_review_agent:initialize:48 - Code Review Agent initialized
2025-06-09 21:22:19.832 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for codereviewagent_e8762d5c
2025-06-09 21:22:19.832 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.832 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent scientificswarmagent_cf7e63f2 with capabilities: set()
2025-06-09 21:22:19.832 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.832 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.832 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for scientificswarmagent_cf7e63f2
2025-06-09 21:22:19.832 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/simple_agents.py: Agent not initialized. Call initialize() first.
2025-06-09 21:22:19.832 | DEBUG    | agents.core.agent_registry:initialize:401 - AgentRegistry initialized
2025-06-09 21:22:19.832 | INFO     | agents.core.agent_integrator:initialize:20 - Agent registry initialized successfully
2025-06-09 21:22:19.832 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.833 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.DATA_PROCESSING@1.0
2025-06-09 21:22:19.833 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent test_agent with capabilities: {Capability(type=data_processing, version=1.0, parameters={}, metadata={})}
----------------------------- Captured stderr call -----------------------------
2025-06-09 21:22:19.833 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for test_agent
2025-06-09 21:22:19.833 | INFO     | agents.core.agent_integrator:register_agent:51 - Registered agent: test_agent
--------------------------- Captured stderr teardown ---------------------------
2025-06-09 21:22:19.835 | INFO     | agents.core.agent_registry:cleanup:109 - Starting WorkflowNotifier cleanup
2025-06-09 21:22:19.835 | INFO     | agents.core.agent_registry:_process_notifications:77 - Notification processor cancelled
2025-06-09 21:22:19.835 | INFO     | agents.core.agent_registry:cleanup:125 - WorkflowNotifier cleanup completed
2025-06-09 21:22:19.835 | INFO     | agents.core.agent_registry:cleanup:417 - AgentRegistry cleaned up
2025-06-09 21:22:19.836 | INFO     | agents.core.agent_registry:cleanup:109 - Starting WorkflowNotifier cleanup
2025-06-09 21:22:19.836 | INFO     | agents.core.agent_registry:cleanup:125 - WorkflowNotifier cleanup completed
2025-06-09 21:22:19.836 | INFO     | agents.core.agent_registry:cleanup:417 - AgentRegistry cleaned up
2025-06-09 21:22:19.836 | INFO     | agents.core.agent_registry:shutdown:783 - AgentRegistry shut down
_________________________ test_knowledge_graph_updates _________________________

integrator = <agents.core.agent_integrator.AgentIntegrator object at 0x1327b7b10>
mock_agent = <tests.utils.test_agents.MockAgent object at 0x13234af50>

    @pytest.mark.asyncio
    async def test_knowledge_graph_updates(integrator, mock_agent):
        """Test knowledge graph updates through agent."""
        await integrator.register_agent(mock_agent)
        update_data = {
            "subject": "test_subject",
            "predicate": "test_predicate",
            "object": "test_object"
        }
        await mock_agent.update_knowledge_graph(update_data)
        updates = mock_agent.get_knowledge_graph_updates()
        assert len(updates) == 1
        assert updates[0]["data"] == update_data
        assert "timestamp" in updates[0]
    
        # Verify the update was applied to the shared knowledge graph
        query = {"sparql": "SELECT ?s ?p ?o WHERE { ?s ?p ?o }"}
        results = await integrator.knowledge_graph.query_graph(query["sparql"])
>       assert len(results) > 0
E       assert 0 > 0
E        +  where 0 = len([])

tests/test_agent_integrator.py:142: AssertionError
---------------------------- Captured stderr setup -----------------------------
2025-06-09 21:22:19.837 | DEBUG    | kg.models.graph_manager:initialize:239 - Knowledge graph initialized
2025-06-09 21:22:19.838 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.838 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent scientificswarmagent_55ddeda6 with capabilities: set()
2025-06-09 21:22:19.838 | INFO     | scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.838 | INFO     | scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.838 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for scientificswarmagent_55ddeda6
2025-06-09 21:22:19.840 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/remote_kg_agent.py: expected an indented block after function definition on line 80 (remote_kg_agent.py, line 82)
2025-06-09 21:22:19.840 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_integrator.py: attempted relative import with no known parent package
2025-06-09 21:22:19.841 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/multi_agent.py: MultiAgent.__init__() missing 2 required positional arguments: 'capabilities' and 'sub_agents'
2025-06-09 21:22:19.841 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/feature_z_agent.py: expected an indented block after function definition on line 50 (feature_z_agent.py, line 52)
2025-06-09 21:22:19.844 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.844 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.MESSAGE_PROCESSING@1.0
2025-06-09 21:22:19.844 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent sensoragent_bb3a3090 with capabilities: {Capability(type=message_processing, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.844 | INFO     | sensor_agent:initialize:20 - Sensor Agent initialized
2025-06-09 21:22:19.844 | INFO     | sensor_agent:initialize:20 - Sensor Agent initialized
2025-06-09 21:22:19.844 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for sensoragent_bb3a3090
2025-06-09 21:22:19.844 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.844 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.KNOWLEDGE_GRAPH_UPDATE@1.0
2025-06-09 21:22:19.844 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.KNOWLEDGE_GRAPH_QUERY@1.0
2025-06-09 21:22:19.844 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_REVIEW@1.0
2025-06-09 21:22:19.844 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent agenticpromptagent_daa4c6eb with capabilities: {Capability(type=knowledge_graph_update, version=1.0, parameters={}, metadata={}), Capability(type=knowledge_graph_query, version=1.0, parameters={}, metadata={}), Capability(type=code_review, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.844 | INFO     | agentic_prompt_agent:initialize:49 - Agentic Prompt Agent initialized
2025-06-09 21:22:19.844 | INFO     | agentic_prompt_agent:initialize:49 - Agentic Prompt Agent initialized
2025-06-09 21:22:19.844 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for agenticpromptagent_daa4c6eb
2025-06-09 21:22:19.845 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/ttl_validation_agent.py: expected an indented block after function definition on line 40 (ttl_validation_agent.py, line 42)
2025-06-09 21:22:19.845 | INFO     | research_agent:initialize:25 - Research Agent initialized
2025-06-09 21:22:19.845 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/research_agent.py: Agent not initialized. Call initialize() first.
2025-06-09 21:22:19.845 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_monitor.py: attempted relative import with no known parent package
2025-06-09 21:22:19.845 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/supervisor_agent.py: SupervisorAgent.__init__() missing 2 required positional arguments: 'registry' and 'knowledge_graph'
2025-06-09 21:22:19.847 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.847 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.MESSAGE_PROCESSING@1.0
2025-06-09 21:22:19.847 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent dataprocessoragent_cbc46dff with capabilities: {Capability(type=message_processing, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.847 | INFO     | data_processor_agent:initialize:20 - Data Processor Agent initialized
2025-06-09 21:22:19.847 | INFO     | data_processor_agent:initialize:20 - Data Processor Agent initialized
2025-06-09 21:22:19.847 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for dataprocessoragent_cbc46dff
2025-06-09 21:22:19.864 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../diary/example.py: No module named 'diary_agent'
2025-06-09 21:22:19.864 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.865 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.MESSAGE_PROCESSING@1.0
2025-06-09 21:22:19.865 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.DECISION_MAKING@1.0
2025-06-09 21:22:19.865 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent judgeagent_d65eb95e with capabilities: {Capability(type=message_processing, version=1.0, parameters={}, metadata={}), Capability(type=decision_making, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.865 | INFO     | judge_agent:initialize:39 - Judge Agent initialized
2025-06-09 21:22:19.865 | INFO     | judge_agent:initialize:39 - Judge Agent initialized
2025-06-09 21:22:19.865 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for judgeagent_d65eb95e
2025-06-09 21:22:19.865 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.865 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.DIARY_MANAGEMENT@1.0
2025-06-09 21:22:19.865 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.MESSAGE_PROCESSING@1.0
2025-06-09 21:22:19.865 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent diaryagent_310a7ea1 with capabilities: {Capability(type=diary_management, version=1.0, parameters={}, metadata={}), Capability(type=message_processing, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.865 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for diaryagent_310a7ea1
2025-06-09 21:22:19.865 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.865 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.PATTERN_ANALYSIS@1.0
2025-06-09 21:22:19.865 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.STATIC_ANALYSIS@1.0
2025-06-09 21:22:19.865 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_SMELL_DETECTION@1.0
2025-06-09 21:22:19.865 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_QUALITY@1.0
2025-06-09 21:22:19.865 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_REVIEW@1.0
2025-06-09 21:22:19.865 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent codereviewagent_f4b3361c with capabilities: {Capability(type=static_analysis, version=1.0, parameters={}, metadata={}), Capability(type=pattern_analysis, version=1.0, parameters={}, metadata={}), Capability(type=code_smell_detection, version=1.0, parameters={}, metadata={}), Capability(type=code_quality, version=1.0, parameters={}, metadata={}), Capability(type=code_review, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.865 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.865 | INFO     | agents.domain.code_review_agent:initialize:48 - Code Review Agent initialized
2025-06-09 21:22:19.865 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.865 | INFO     | agents.domain.code_review_agent:initialize:48 - Code Review Agent initialized
2025-06-09 21:22:19.865 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for codereviewagent_f4b3361c
2025-06-09 21:22:19.865 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.865 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent scientificswarmagent_c4b40242 with capabilities: set()
2025-06-09 21:22:19.865 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.865 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.865 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for scientificswarmagent_c4b40242
2025-06-09 21:22:19.865 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/test_swarm_coordinator.py: TEST_ANALYSIS
2025-06-09 21:22:19.866 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.866 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent corporateknowledgeagent_4458485d with capabilities: set()
2025-06-09 21:22:19.866 | INFO     | corporate_knowledge_agent:initialize:34 - Corporate Knowledge Agent initialized successfully
2025-06-09 21:22:19.866 | INFO     | corporate_knowledge_agent:initialize:34 - Corporate Knowledge Agent initialized successfully
2025-06-09 21:22:19.866 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for corporateknowledgeagent_4458485d
2025-06-09 21:22:19.866 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.866 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent vertexemailagent_be07d870 with capabilities: set()
2025-06-09 21:22:19.866 | INFO     | vertex_email_agent:initialize:19 - Vertex Email Agent initialized (simulation)
2025-06-09 21:22:19.866 | INFO     | vertex_email_agent:initialize:19 - Vertex Email Agent initialized (simulation)
2025-06-09 21:22:19.866 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for vertexemailagent_be07d870
2025-06-09 21:22:19.866 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.866 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.PATTERN_ANALYSIS@1.0
2025-06-09 21:22:19.866 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.STATIC_ANALYSIS@1.0
2025-06-09 21:22:19.866 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_SMELL_DETECTION@1.0
2025-06-09 21:22:19.866 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_QUALITY@1.0
2025-06-09 21:22:19.866 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_REVIEW@1.0
2025-06-09 21:22:19.866 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent codereviewagent_34af86d3 with capabilities: {Capability(type=static_analysis, version=1.0, parameters={}, metadata={}), Capability(type=pattern_analysis, version=1.0, parameters={}, metadata={}), Capability(type=code_smell_detection, version=1.0, parameters={}, metadata={}), Capability(type=code_quality, version=1.0, parameters={}, metadata={}), Capability(type=code_review, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:19.866 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.866 | INFO     | code_review_agent:initialize:48 - Code Review Agent initialized
2025-06-09 21:22:19.866 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.866 | INFO     | code_review_agent:initialize:48 - Code Review Agent initialized
2025-06-09 21:22:19.866 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for codereviewagent_34af86d3
2025-06-09 21:22:19.866 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.866 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent scientificswarmagent_2db90884 with capabilities: set()
2025-06-09 21:22:19.866 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.866 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.866 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for scientificswarmagent_2db90884
2025-06-09 21:22:19.866 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/simple_agents.py: Agent not initialized. Call initialize() first.
2025-06-09 21:22:19.866 | DEBUG    | agents.core.agent_registry:initialize:401 - AgentRegistry initialized
2025-06-09 21:22:19.866 | INFO     | agents.core.agent_integrator:initialize:20 - Agent registry initialized successfully
2025-06-09 21:22:19.867 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.867 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.DATA_PROCESSING@1.0
2025-06-09 21:22:19.867 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent test_agent with capabilities: {Capability(type=data_processing, version=1.0, parameters={}, metadata={})}
----------------------------- Captured stderr call -----------------------------
2025-06-09 21:22:19.867 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for test_agent
2025-06-09 21:22:19.867 | INFO     | agents.core.agent_integrator:register_agent:51 - Registered agent: test_agent
2025-06-09 21:22:19.867 | DEBUG    | kg.models.graph_manager:query_graph:402 - Cache MISS for key: query:SELECT ?s ?p ?o WHERE { ?s ?p ?o }
2025-06-09 21:22:19.921 | DEBUG    | kg.models.graph_manager:query_graph:444 - Cache SET for key: query:SELECT ?s ?p ?o WHERE { ?s ?p ?o }
--------------------------- Captured stderr teardown ---------------------------
2025-06-09 21:22:19.924 | INFO     | agents.core.agent_registry:cleanup:109 - Starting WorkflowNotifier cleanup
2025-06-09 21:22:19.924 | INFO     | agents.core.agent_registry:_process_notifications:77 - Notification processor cancelled
2025-06-09 21:22:19.924 | INFO     | agents.core.agent_registry:cleanup:125 - WorkflowNotifier cleanup completed
2025-06-09 21:22:19.924 | INFO     | agents.core.agent_registry:cleanup:417 - AgentRegistry cleaned up
2025-06-09 21:22:19.924 | INFO     | agents.core.agent_registry:cleanup:109 - Starting WorkflowNotifier cleanup
2025-06-09 21:22:19.924 | INFO     | agents.core.agent_registry:cleanup:125 - WorkflowNotifier cleanup completed
2025-06-09 21:22:19.924 | INFO     | agents.core.agent_registry:cleanup:417 - AgentRegistry cleaned up
2025-06-09 21:22:19.924 | INFO     | agents.core.agent_registry:shutdown:783 - AgentRegistry shut down
_________________________ test_knowledge_graph_queries _________________________

integrator = <agents.core.agent_integrator.AgentIntegrator object at 0x13272b1d0>
mock_agent = <tests.utils.test_agents.MockAgent object at 0x132347090>

    @pytest.mark.asyncio
    async def test_knowledge_graph_queries(integrator, mock_agent):
        """Test knowledge graph queries through agent."""
        await integrator.register_agent(mock_agent)
        query = {"sparql": "SELECT ?s ?p ?o WHERE { ?s ?p ?o }"}
        result = await mock_agent.query_knowledge_graph(query)
>       queries = mock_agent.get_knowledge_graph_queries()
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'MockAgent' object has no attribute 'get_knowledge_graph_queries'

tests/test_agent_integrator.py:156: AttributeError
---------------------------- Captured stderr setup -----------------------------
2025-06-09 21:22:19.925 | DEBUG    | kg.models.graph_manager:initialize:239 - Knowledge graph initialized
2025-06-09 21:22:19.927 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:19.927 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent scientificswarmagent_9d803899 with capabilities: set()
2025-06-09 21:22:19.927 | INFO     | scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.927 | INFO     | scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:19.927 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for scientificswarmagent_9d803899
2025-06-09 21:22:19.929 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/remote_kg_agent.py: expected an indented block after function definition on line 80 (remote_kg_agent.py, line 82)
2025-06-09 21:22:20.021 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_integrator.py: attempted relative import with no known parent package
2025-06-09 21:22:20.023 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/multi_agent.py: MultiAgent.__init__() missing 2 required positional arguments: 'capabilities' and 'sub_agents'
2025-06-09 21:22:20.023 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/feature_z_agent.py: expected an indented block after function definition on line 50 (feature_z_agent.py, line 52)
2025-06-09 21:22:20.027 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:20.027 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.MESSAGE_PROCESSING@1.0
2025-06-09 21:22:20.027 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent sensoragent_cf106edb with capabilities: {Capability(type=message_processing, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:20.027 | INFO     | sensor_agent:initialize:20 - Sensor Agent initialized
2025-06-09 21:22:20.027 | INFO     | sensor_agent:initialize:20 - Sensor Agent initialized
2025-06-09 21:22:20.027 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for sensoragent_cf106edb
2025-06-09 21:22:20.027 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:20.027 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.KNOWLEDGE_GRAPH_UPDATE@1.0
2025-06-09 21:22:20.027 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.KNOWLEDGE_GRAPH_QUERY@1.0
2025-06-09 21:22:20.027 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_REVIEW@1.0
2025-06-09 21:22:20.027 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent agenticpromptagent_f9941741 with capabilities: {Capability(type=knowledge_graph_update, version=1.0, parameters={}, metadata={}), Capability(type=knowledge_graph_query, version=1.0, parameters={}, metadata={}), Capability(type=code_review, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:20.027 | INFO     | agentic_prompt_agent:initialize:49 - Agentic Prompt Agent initialized
2025-06-09 21:22:20.027 | INFO     | agentic_prompt_agent:initialize:49 - Agentic Prompt Agent initialized
2025-06-09 21:22:20.027 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for agenticpromptagent_f9941741
2025-06-09 21:22:20.028 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/ttl_validation_agent.py: expected an indented block after function definition on line 40 (ttl_validation_agent.py, line 42)
2025-06-09 21:22:20.028 | INFO     | research_agent:initialize:25 - Research Agent initialized
2025-06-09 21:22:20.028 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/research_agent.py: Agent not initialized. Call initialize() first.
2025-06-09 21:22:20.028 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_monitor.py: attempted relative import with no known parent package
2025-06-09 21:22:20.028 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/supervisor_agent.py: SupervisorAgent.__init__() missing 2 required positional arguments: 'registry' and 'knowledge_graph'
2025-06-09 21:22:20.029 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:20.029 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.MESSAGE_PROCESSING@1.0
2025-06-09 21:22:20.029 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent dataprocessoragent_f8c3d44a with capabilities: {Capability(type=message_processing, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:20.029 | INFO     | data_processor_agent:initialize:20 - Data Processor Agent initialized
2025-06-09 21:22:20.029 | INFO     | data_processor_agent:initialize:20 - Data Processor Agent initialized
2025-06-09 21:22:20.029 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for dataprocessoragent_f8c3d44a
2025-06-09 21:22:20.048 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../diary/example.py: No module named 'diary_agent'
2025-06-09 21:22:20.048 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:20.048 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.MESSAGE_PROCESSING@1.0
2025-06-09 21:22:20.048 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.DECISION_MAKING@1.0
2025-06-09 21:22:20.048 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent judgeagent_455f5507 with capabilities: {Capability(type=message_processing, version=1.0, parameters={}, metadata={}), Capability(type=decision_making, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:20.048 | INFO     | judge_agent:initialize:39 - Judge Agent initialized
2025-06-09 21:22:20.048 | INFO     | judge_agent:initialize:39 - Judge Agent initialized
2025-06-09 21:22:20.048 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for judgeagent_455f5507
2025-06-09 21:22:20.048 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:20.048 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.DIARY_MANAGEMENT@1.0
2025-06-09 21:22:20.048 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.MESSAGE_PROCESSING@1.0
2025-06-09 21:22:20.048 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent diaryagent_43b565a9 with capabilities: {Capability(type=diary_management, version=1.0, parameters={}, metadata={}), Capability(type=message_processing, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:20.048 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for diaryagent_43b565a9
2025-06-09 21:22:20.049 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:20.049 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.PATTERN_ANALYSIS@1.0
2025-06-09 21:22:20.049 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.STATIC_ANALYSIS@1.0
2025-06-09 21:22:20.049 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_SMELL_DETECTION@1.0
2025-06-09 21:22:20.049 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_QUALITY@1.0
2025-06-09 21:22:20.049 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_REVIEW@1.0
2025-06-09 21:22:20.049 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent codereviewagent_3870f2e4 with capabilities: {Capability(type=static_analysis, version=1.0, parameters={}, metadata={}), Capability(type=pattern_analysis, version=1.0, parameters={}, metadata={}), Capability(type=code_smell_detection, version=1.0, parameters={}, metadata={}), Capability(type=code_quality, version=1.0, parameters={}, metadata={}), Capability(type=code_review, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:20.049 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:20.049 | INFO     | agents.domain.code_review_agent:initialize:48 - Code Review Agent initialized
2025-06-09 21:22:20.049 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:20.049 | INFO     | agents.domain.code_review_agent:initialize:48 - Code Review Agent initialized
2025-06-09 21:22:20.049 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for codereviewagent_3870f2e4
2025-06-09 21:22:20.049 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:20.049 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent scientificswarmagent_96d6bbcd with capabilities: set()
2025-06-09 21:22:20.049 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:20.049 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:20.049 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for scientificswarmagent_96d6bbcd
2025-06-09 21:22:20.049 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/test_swarm_coordinator.py: TEST_ANALYSIS
2025-06-09 21:22:20.049 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:20.049 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent corporateknowledgeagent_043ec1c3 with capabilities: set()
2025-06-09 21:22:20.049 | INFO     | corporate_knowledge_agent:initialize:34 - Corporate Knowledge Agent initialized successfully
2025-06-09 21:22:20.049 | INFO     | corporate_knowledge_agent:initialize:34 - Corporate Knowledge Agent initialized successfully
2025-06-09 21:22:20.049 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for corporateknowledgeagent_043ec1c3
2025-06-09 21:22:20.049 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:20.049 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent vertexemailagent_6afa8542 with capabilities: set()
2025-06-09 21:22:20.049 | INFO     | vertex_email_agent:initialize:19 - Vertex Email Agent initialized (simulation)
2025-06-09 21:22:20.049 | INFO     | vertex_email_agent:initialize:19 - Vertex Email Agent initialized (simulation)
2025-06-09 21:22:20.049 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for vertexemailagent_6afa8542
2025-06-09 21:22:20.049 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:20.049 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.PATTERN_ANALYSIS@1.0
2025-06-09 21:22:20.049 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.STATIC_ANALYSIS@1.0
2025-06-09 21:22:20.049 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_SMELL_DETECTION@1.0
2025-06-09 21:22:20.049 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_QUALITY@1.0
2025-06-09 21:22:20.049 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_REVIEW@1.0
2025-06-09 21:22:20.050 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent codereviewagent_f13ed331 with capabilities: {Capability(type=static_analysis, version=1.0, parameters={}, metadata={}), Capability(type=pattern_analysis, version=1.0, parameters={}, metadata={}), Capability(type=code_smell_detection, version=1.0, parameters={}, metadata={}), Capability(type=code_quality, version=1.0, parameters={}, metadata={}), Capability(type=code_review, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:20.050 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:20.050 | INFO     | code_review_agent:initialize:48 - Code Review Agent initialized
2025-06-09 21:22:20.050 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:20.050 | INFO     | code_review_agent:initialize:48 - Code Review Agent initialized
2025-06-09 21:22:20.050 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for codereviewagent_f13ed331
2025-06-09 21:22:20.050 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:20.050 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent scientificswarmagent_6da8563d with capabilities: set()
2025-06-09 21:22:20.050 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:20.050 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:20.050 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for scientificswarmagent_6da8563d
2025-06-09 21:22:20.050 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/simple_agents.py: Agent not initialized. Call initialize() first.
2025-06-09 21:22:20.050 | DEBUG    | agents.core.agent_registry:initialize:401 - AgentRegistry initialized
2025-06-09 21:22:20.050 | INFO     | agents.core.agent_integrator:initialize:20 - Agent registry initialized successfully
2025-06-09 21:22:20.050 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:20.050 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.DATA_PROCESSING@1.0
2025-06-09 21:22:20.050 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent test_agent with capabilities: {Capability(type=data_processing, version=1.0, parameters={}, metadata={})}
----------------------------- Captured stderr call -----------------------------
2025-06-09 21:22:20.050 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for test_agent
2025-06-09 21:22:20.050 | INFO     | agents.core.agent_integrator:register_agent:51 - Registered agent: test_agent
--------------------------- Captured stderr teardown ---------------------------
2025-06-09 21:22:20.052 | INFO     | agents.core.agent_registry:cleanup:109 - Starting WorkflowNotifier cleanup
2025-06-09 21:22:20.053 | INFO     | agents.core.agent_registry:_process_notifications:77 - Notification processor cancelled
2025-06-09 21:22:20.053 | INFO     | agents.core.agent_registry:cleanup:125 - WorkflowNotifier cleanup completed
2025-06-09 21:22:20.053 | INFO     | agents.core.agent_registry:cleanup:417 - AgentRegistry cleaned up
2025-06-09 21:22:20.053 | INFO     | agents.core.agent_registry:cleanup:109 - Starting WorkflowNotifier cleanup
2025-06-09 21:22:20.053 | INFO     | agents.core.agent_registry:cleanup:125 - WorkflowNotifier cleanup completed
2025-06-09 21:22:20.053 | INFO     | agents.core.agent_registry:cleanup:417 - AgentRegistry cleaned up
2025-06-09 21:22:20.053 | INFO     | agents.core.agent_registry:shutdown:783 - AgentRegistry shut down
__________________ test_process_message_called_during_routing __________________

integrator = <agents.core.agent_integrator.AgentIntegrator object at 0x13236a390>
mock_agent = <tests.utils.test_agents.MockAgent object at 0x1266a37d0>

    @pytest.mark.asyncio
    async def test_process_message_called_during_routing(integrator, mock_agent):
        """Test that process_message is called when routing messages."""
        await integrator.register_agent(mock_agent)
    
        # Clear any existing message history
        mock_agent._message_history.clear()
    
        # Create and send a test message
        message = AgentMessage(
            sender_id="sender",
            recipient_id="test_agent",
            content={"test": "data"},
            timestamp=time.time(),
            message_type="test"
        )
    
        # Route the message
        response = await integrator.route_message(message)
    
        # Verify process_message was called
        message_history = mock_agent.get_message_history()
        assert len(message_history) == 1
        assert message_history[0] == message
    
        # Verify response
        assert response.sender == "test_agent"
        assert response.recipient == "sender"
>       assert response.content == {"status": "processed"}
E       AssertionError: assert {'status': 'success'} == {'status': 'processed'}
E         
E         Differing items:
E         {'status': 'success'} != {'status': 'processed'}
E         
E         Full diff:
E           {
E         -     'status': 'processed',
E         ?                ^^^    --
E         +     'status': 'success',
E         ?                ^^^
E           }

tests/test_agent_integrator.py:189: AssertionError
---------------------------- Captured stderr setup -----------------------------
2025-06-09 21:22:20.054 | DEBUG    | kg.models.graph_manager:initialize:239 - Knowledge graph initialized
2025-06-09 21:22:20.056 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:20.056 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent scientificswarmagent_3d0afc74 with capabilities: set()
2025-06-09 21:22:20.056 | INFO     | scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:20.056 | INFO     | scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:20.056 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for scientificswarmagent_3d0afc74
2025-06-09 21:22:20.058 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/remote_kg_agent.py: expected an indented block after function definition on line 80 (remote_kg_agent.py, line 82)
2025-06-09 21:22:20.059 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_integrator.py: attempted relative import with no known parent package
2025-06-09 21:22:20.060 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/multi_agent.py: MultiAgent.__init__() missing 2 required positional arguments: 'capabilities' and 'sub_agents'
2025-06-09 21:22:20.060 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/feature_z_agent.py: expected an indented block after function definition on line 50 (feature_z_agent.py, line 52)
2025-06-09 21:22:20.064 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:20.064 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.MESSAGE_PROCESSING@1.0
2025-06-09 21:22:20.064 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent sensoragent_6fcfa1bd with capabilities: {Capability(type=message_processing, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:20.064 | INFO     | sensor_agent:initialize:20 - Sensor Agent initialized
2025-06-09 21:22:20.064 | INFO     | sensor_agent:initialize:20 - Sensor Agent initialized
2025-06-09 21:22:20.064 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for sensoragent_6fcfa1bd
2025-06-09 21:22:20.065 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:20.065 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.KNOWLEDGE_GRAPH_UPDATE@1.0
2025-06-09 21:22:20.065 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.KNOWLEDGE_GRAPH_QUERY@1.0
2025-06-09 21:22:20.065 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_REVIEW@1.0
2025-06-09 21:22:20.065 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent agenticpromptagent_aa04a5e8 with capabilities: {Capability(type=knowledge_graph_update, version=1.0, parameters={}, metadata={}), Capability(type=knowledge_graph_query, version=1.0, parameters={}, metadata={}), Capability(type=code_review, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:20.065 | INFO     | agentic_prompt_agent:initialize:49 - Agentic Prompt Agent initialized
2025-06-09 21:22:20.065 | INFO     | agentic_prompt_agent:initialize:49 - Agentic Prompt Agent initialized
2025-06-09 21:22:20.065 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for agenticpromptagent_aa04a5e8
2025-06-09 21:22:20.065 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/ttl_validation_agent.py: expected an indented block after function definition on line 40 (ttl_validation_agent.py, line 42)
2025-06-09 21:22:20.065 | INFO     | research_agent:initialize:25 - Research Agent initialized
2025-06-09 21:22:20.065 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/research_agent.py: Agent not initialized. Call initialize() first.
2025-06-09 21:22:20.065 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_monitor.py: attempted relative import with no known parent package
2025-06-09 21:22:20.065 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/supervisor_agent.py: SupervisorAgent.__init__() missing 2 required positional arguments: 'registry' and 'knowledge_graph'
2025-06-09 21:22:20.067 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:20.067 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.MESSAGE_PROCESSING@1.0
2025-06-09 21:22:20.067 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent dataprocessoragent_f7af3797 with capabilities: {Capability(type=message_processing, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:20.067 | INFO     | data_processor_agent:initialize:20 - Data Processor Agent initialized
2025-06-09 21:22:20.067 | INFO     | data_processor_agent:initialize:20 - Data Processor Agent initialized
2025-06-09 21:22:20.067 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for dataprocessoragent_f7af3797
2025-06-09 21:22:20.086 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../diary/example.py: No module named 'diary_agent'
2025-06-09 21:22:20.086 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:20.086 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.MESSAGE_PROCESSING@1.0
2025-06-09 21:22:20.086 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.DECISION_MAKING@1.0
2025-06-09 21:22:20.086 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent judgeagent_d1ec5a44 with capabilities: {Capability(type=message_processing, version=1.0, parameters={}, metadata={}), Capability(type=decision_making, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:20.086 | INFO     | judge_agent:initialize:39 - Judge Agent initialized
2025-06-09 21:22:20.086 | INFO     | judge_agent:initialize:39 - Judge Agent initialized
2025-06-09 21:22:20.086 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for judgeagent_d1ec5a44
2025-06-09 21:22:20.086 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:20.086 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.DIARY_MANAGEMENT@1.0
2025-06-09 21:22:20.086 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.MESSAGE_PROCESSING@1.0
2025-06-09 21:22:20.086 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent diaryagent_b988de2d with capabilities: {Capability(type=diary_management, version=1.0, parameters={}, metadata={}), Capability(type=message_processing, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:20.086 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for diaryagent_b988de2d
2025-06-09 21:22:20.087 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:20.087 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.PATTERN_ANALYSIS@1.0
2025-06-09 21:22:20.087 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.STATIC_ANALYSIS@1.0
2025-06-09 21:22:20.087 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_SMELL_DETECTION@1.0
2025-06-09 21:22:20.087 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_QUALITY@1.0
2025-06-09 21:22:20.087 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_REVIEW@1.0
2025-06-09 21:22:20.087 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent codereviewagent_519192d6 with capabilities: {Capability(type=static_analysis, version=1.0, parameters={}, metadata={}), Capability(type=pattern_analysis, version=1.0, parameters={}, metadata={}), Capability(type=code_smell_detection, version=1.0, parameters={}, metadata={}), Capability(type=code_quality, version=1.0, parameters={}, metadata={}), Capability(type=code_review, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:20.087 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:20.087 | INFO     | agents.domain.code_review_agent:initialize:48 - Code Review Agent initialized
2025-06-09 21:22:20.087 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:20.087 | INFO     | agents.domain.code_review_agent:initialize:48 - Code Review Agent initialized
2025-06-09 21:22:20.087 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for codereviewagent_519192d6
2025-06-09 21:22:20.087 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:20.087 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent scientificswarmagent_c7083c01 with capabilities: set()
2025-06-09 21:22:20.087 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:20.087 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:20.087 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for scientificswarmagent_c7083c01
2025-06-09 21:22:20.087 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/test_swarm_coordinator.py: TEST_ANALYSIS
2025-06-09 21:22:20.087 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:20.087 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent corporateknowledgeagent_4a0e11ec with capabilities: set()
2025-06-09 21:22:20.087 | INFO     | corporate_knowledge_agent:initialize:34 - Corporate Knowledge Agent initialized successfully
2025-06-09 21:22:20.087 | INFO     | corporate_knowledge_agent:initialize:34 - Corporate Knowledge Agent initialized successfully
2025-06-09 21:22:20.087 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for corporateknowledgeagent_4a0e11ec
2025-06-09 21:22:20.087 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:20.087 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent vertexemailagent_6dbba794 with capabilities: set()
2025-06-09 21:22:20.087 | INFO     | vertex_email_agent:initialize:19 - Vertex Email Agent initialized (simulation)
2025-06-09 21:22:20.087 | INFO     | vertex_email_agent:initialize:19 - Vertex Email Agent initialized (simulation)
2025-06-09 21:22:20.087 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for vertexemailagent_6dbba794
2025-06-09 21:22:20.088 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:20.088 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.PATTERN_ANALYSIS@1.0
2025-06-09 21:22:20.088 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.STATIC_ANALYSIS@1.0
2025-06-09 21:22:20.088 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_SMELL_DETECTION@1.0
2025-06-09 21:22:20.088 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_QUALITY@1.0
2025-06-09 21:22:20.088 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.CODE_REVIEW@1.0
2025-06-09 21:22:20.088 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent codereviewagent_3a35cd82 with capabilities: {Capability(type=static_analysis, version=1.0, parameters={}, metadata={}), Capability(type=pattern_analysis, version=1.0, parameters={}, metadata={}), Capability(type=code_smell_detection, version=1.0, parameters={}, metadata={}), Capability(type=code_quality, version=1.0, parameters={}, metadata={}), Capability(type=code_review, version=1.0, parameters={}, metadata={})}
2025-06-09 21:22:20.088 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:20.088 | INFO     | code_review_agent:initialize:48 - Code Review Agent initialized
2025-06-09 21:22:20.088 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:20.088 | INFO     | code_review_agent:initialize:48 - Code Review Agent initialized
2025-06-09 21:22:20.088 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for codereviewagent_3a35cd82
2025-06-09 21:22:20.088 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:20.088 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent scientificswarmagent_b1f83323 with capabilities: set()
2025-06-09 21:22:20.088 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:20.088 | INFO     | agents.core.scientific_swarm_agent:initialize:35 - Scientific Swarm Agent initialized
2025-06-09 21:22:20.088 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for scientificswarmagent_b1f83323
2025-06-09 21:22:20.088 | ERROR    | agents.core.agent_registry:_auto_discover_agents:372 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/simple_agents.py: Agent not initialized. Call initialize() first.
2025-06-09 21:22:20.088 | DEBUG    | agents.core.agent_registry:initialize:401 - AgentRegistry initialized
2025-06-09 21:22:20.088 | INFO     | agents.core.agent_integrator:initialize:20 - Agent registry initialized successfully
2025-06-09 21:22:20.088 | DEBUG    | agents.core.capability_types:initialize:133 - CapabilitySet initialized
2025-06-09 21:22:20.088 | DEBUG    | agents.core.capability_types:add:162 - Added capability: CapabilityType.DATA_PROCESSING@1.0
2025-06-09 21:22:20.088 | DEBUG    | agents.core.base_agent:initialize:104 - Initialized agent test_agent with capabilities: {Capability(type=data_processing, version=1.0, parameters={}, metadata={})}
----------------------------- Captured stderr call -----------------------------
2025-06-09 21:22:20.089 | DEBUG    | agents.core.agent_registry:notify_agent_registered:183 - Notified agent registration for test_agent
2025-06-09 21:22:20.089 | INFO     | agents.core.agent_integrator:register_agent:51 - Registered agent: test_agent
--------------------------- Captured stderr teardown ---------------------------
2025-06-09 21:22:20.093 | INFO     | agents.core.agent_registry:cleanup:109 - Starting WorkflowNotifier cleanup
2025-06-09 21:22:20.093 | INFO     | agents.core.agent_registry:_process_notifications:77 - Notification processor cancelled
2025-06-09 21:22:20.093 | INFO     | agents.core.agent_registry:cleanup:125 - WorkflowNotifier cleanup completed
2025-06-09 21:22:20.093 | INFO     | agents.core.agent_registry:cleanup:417 - AgentRegistry cleaned up
2025-06-09 21:22:20.093 | INFO     | agents.core.agent_registry:cleanup:109 - Starting WorkflowNotifier cleanup
2025-06-09 21:22:20.093 | INFO     | agents.core.agent_registry:cleanup:125 - WorkflowNotifier cleanup completed
2025-06-09 21:22:20.093 | INFO     | agents.core.agent_registry:cleanup:417 - AgentRegistry cleaned up
2025-06-09 21:22:20.093 | INFO     | agents.core.agent_registry:shutdown:783 - AgentRegistry shut down
_______________________ test_capability_type_conversion ________________________

    @pytest.mark.asyncio
    async def test_capability_type_conversion():
        """Test that capabilities are properly handled."""
        # Test with multiple capabilities
        capabilities = {
            Capability(CapabilityType.CODE_REVIEW, "1.0"),
            Capability(CapabilityType.DATA_PROCESSING, "1.0"),
            Capability(CapabilityType.SENSOR_READING, "1.0")
        }
        agent1 = BaseTestAgent(
            agent_id="agent1",
            capabilities=capabilities
        )
        await agent1.initialize()
        agent_capabilities = await agent1.get_capabilities()
>       assert isinstance(agent_capabilities, set)
E       assert False
E        +  where False = isinstance(CapabilitySet(capabilities={Capability(type=data_processing, version=1.0, parameters={}, metadata={}), Capability(type=sensor_reading, version=1.0, parameters={}, metadata={}), Capability(type=code_review, version=1.0, parameters={}, metadata={})}), set)

tests/test_capability_handling.py:46: AssertionError
______________________ test_registry_capability_handling _______________________

registry = <agents.core.agent_registry.AgentRegistry object at 0x1408c4050>
test_agent = <tests.utils.test_agents.BaseTestAgent object at 0x1324e2c10>

    @pytest.mark.asyncio
    async def test_registry_capability_handling(registry, test_agent):
        """Test capability handling in the registry."""
        # Register agent
        await registry.register_agent(test_agent, await test_agent.get_capabilities())
    
        # Test get_agent_capabilities
        capabilities = await registry.get_agent_capabilities(test_agent.agent_id)
>       assert isinstance(capabilities, set)
E       assert False
E        +  where False = isinstance(CapabilitySet(capabilities={Capability(type=data_processing, version=1.0, parameters={}, metadata={}), Capability(type=sensor_reading, version=1.0, parameters={}, metadata={}), Capability(type=code_review, version=1.0, parameters={}, metadata={})}), set)

tests/test_capability_handling.py:100: AssertionError
_________________________ test_capability_consistency __________________________

registry = <agents.core.agent_registry.AgentRegistry object at 0x140977b10>

    @pytest.mark.asyncio
    async def test_capability_consistency(registry):
        """Test that capabilities remain consistent across operations."""
        # Create agents with overlapping capabilities
        agent1 = BaseTestAgent(
            agent_id="agent1",
            capabilities={
                Capability(CapabilityType.CODE_REVIEW, "1.0"),
                Capability(CapabilityType.DATA_PROCESSING, "1.0")
            }
        )
        await agent1.initialize()
    
        agent2 = BaseTestAgent(
            agent_id="agent2",
            capabilities={
                Capability(CapabilityType.DATA_PROCESSING, "1.0"),
                Capability(CapabilityType.SENSOR_READING, "1.0")
            }
        )
        await agent2.initialize()
    
        # Register agents
        await registry.register_agent(agent1, await agent1.get_capabilities())
        await registry.register_agent(agent2, await agent2.get_capabilities())
    
        # Test capability-based lookup
>       review_agents = await registry.get_agents_by_capability(CapabilityType.CODE_REVIEW)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_capability_handling.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <agents.core.agent_registry.AgentRegistry object at 0x140977b10>
capability_type = <CapabilityType.CODE_REVIEW: 'code_review'>

    async def get_agents_by_capability(self, capability_type: CapabilityType) -> List[BaseAgent]:
        """Get all agents with a specific capability.
    
        Args:
            capability_type: The type of capability to search for.
    
        Returns:
            List[BaseAgent]: List of agents with the specified capability.
        """
>       async with self._capability_locks[capability_type]:
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       KeyError: <CapabilityType.CODE_REVIEW: 'code_review'>

agents/core/agent_registry.py:524: KeyError
__________________________ test_capability_edge_cases __________________________

registry = <agents.core.agent_registry.AgentRegistry object at 0x132491ad0>

    @pytest.mark.asyncio
    async def test_capability_edge_cases(registry):
        """Test edge cases in capability handling."""
        agent = BaseTestAgent(
            agent_id="test_agent",
            capabilities={
                Capability(CapabilityType.CODE_REVIEW, "1.0"),
                Capability(CapabilityType.CODE_REVIEW, "1.0"),  # Duplicate capability
                Capability(CapabilityType.CODE_REVIEW, "1.0")   # Duplicate capability
            }
        )
        await agent.initialize()
    
        # Register agent
        await registry.register_agent(agent, await agent.get_capabilities())
    
        # Verify duplicates are removed
        capabilities = await registry.get_agent_capabilities(agent.agent_id)
        assert len(capabilities) == 1
        assert all(isinstance(cap, Capability) for cap in capabilities)
    
        # Test empty capability updates
>       await registry.update_agent_capabilities(agent.agent_id, set())

tests/test_capability_handling.py:183: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <agents.core.agent_registry.AgentRegistry object at 0x132491ad0>
agent_id = 'test_agent', new_capabilities = set()

    async def update_agent_capabilities(
        self,
        agent_id: str,
        new_capabilities: Set[Capability]
    ) -> None:
        """Update agent capabilities with proper synchronization.
    
        Args:
            agent_id: The ID of the agent to update.
            new_capabilities: The new set of capabilities.
    
        Raises:
            ValueError: If the agent is not registered.
        """
        if agent_id not in self._agents:
            raise ValueError(f"Agent {agent_id} not registered")
    
        try:
            async with self._agent_locks[agent_id]:
                agent = self._agents[agent_id]
                old_capabilities = await agent.get_capabilities()
    
                # Remove old capabilities
                for capability in old_capabilities:
>                   async with self._capability_locks[capability.type]:
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E                   KeyError: <CapabilityType.CODE_REVIEW: 'code_review'>

agents/core/agent_registry.py:570: KeyError
________________________ test_engagement_initialization ________________________

setup_agents = {'engagement_manager': <demo_agents.EngagementManagerAgent object at 0x13244ef10>, 'implementation_lead': <demo_agents...dAgent object at 0x132378850>, 'value_realization_lead': <demo_agents.ValueRealizationLeadAgent object at 0x1379067d0>}

    @pytest.mark.asyncio
    async def test_engagement_initialization(setup_agents):
        """Test engagement initialization and knowledge graph updates."""
>       agents = await setup_agents
                 ^^^^^^^^^^^^^^^^^^
E       TypeError: object dict can't be used in 'await' expression

tests/test_consulting_agents.py:39: TypeError
__________________________ test_strategy_development ___________________________

setup_agents = {'engagement_manager': <demo_agents.EngagementManagerAgent object at 0x1324927d0>, 'implementation_lead': <demo_agents...dAgent object at 0x132491490>, 'value_realization_lead': <demo_agents.ValueRealizationLeadAgent object at 0x13245bd10>}

    @pytest.mark.asyncio
    async def test_strategy_development(setup_agents):
        """Test strategy development and knowledge capture."""
>       agents = await setup_agents
                 ^^^^^^^^^^^^^^^^^^
E       TypeError: object dict can't be used in 'await' expression

tests/test_consulting_agents.py:74: TypeError
_________________________ test_implementation_planning _________________________

setup_agents = {'engagement_manager': <demo_agents.EngagementManagerAgent object at 0x140cadb50>, 'implementation_lead': <demo_agents...dAgent object at 0x140cae190>, 'value_realization_lead': <demo_agents.ValueRealizationLeadAgent object at 0x1323ba5d0>}

    @pytest.mark.asyncio
    async def test_implementation_planning(setup_agents):
        """Test implementation planning and knowledge capture."""
>       agents = await setup_agents
                 ^^^^^^^^^^^^^^^^^^
E       TypeError: object dict can't be used in 'await' expression

tests/test_consulting_agents.py:110: TypeError
_______________________ test_value_framework_development _______________________

setup_agents = {'engagement_manager': <demo_agents.EngagementManagerAgent object at 0x140cba7d0>, 'implementation_lead': <demo_agents...dAgent object at 0x132345850>, 'value_realization_lead': <demo_agents.ValueRealizationLeadAgent object at 0x131efda90>}

    @pytest.mark.asyncio
    async def test_value_framework_development(setup_agents):
        """Test value framework development and knowledge capture."""
>       agents = await setup_agents
                 ^^^^^^^^^^^^^^^^^^
E       TypeError: object dict can't be used in 'await' expression

tests/test_consulting_agents.py:148: TypeError
__________________________ test_end_to_end_engagement __________________________

setup_agents = {'engagement_manager': <demo_agents.EngagementManagerAgent object at 0x140e4a290>, 'implementation_lead': <demo_agents...dAgent object at 0x140bb0f90>, 'value_realization_lead': <demo_agents.ValueRealizationLeadAgent object at 0x1324d6750>}

    @pytest.mark.asyncio
    async def test_end_to_end_engagement(setup_agents):
        """Test complete engagement flow from initialization to value framework."""
>       agents = await setup_agents
                 ^^^^^^^^^^^^^^^^^^
E       TypeError: object dict can't be used in 'await' expression

tests/test_consulting_agents.py:188: TypeError
_______________________ test_knowledge_graph_consistency _______________________

setup_agents = {'engagement_manager': <demo_agents.EngagementManagerAgent object at 0x137906790>, 'implementation_lead': <demo_agents...dAgent object at 0x140ce3a10>, 'value_realization_lead': <demo_agents.ValueRealizationLeadAgent object at 0x140874fd0>}

    @pytest.mark.asyncio
    async def test_knowledge_graph_consistency(setup_agents):
        """Test knowledge graph consistency across agents."""
>       agents = await setup_agents
                 ^^^^^^^^^^^^^^^^^^
E       TypeError: object dict can't be used in 'await' expression

tests/test_consulting_agents.py:274: TypeError
________________________ test_agent_diary_functionality ________________________

setup_agents = {'engagement_manager': <demo_agents.EngagementManagerAgent object at 0x132393a50>, 'implementation_lead': <demo_agents...dAgent object at 0x132391190>, 'value_realization_lead': <demo_agents.ValueRealizationLeadAgent object at 0x140e9b810>}

    @pytest.mark.asyncio
    async def test_agent_diary_functionality(setup_agents):
        """Test that each consulting agent can write to and read from their diary after a move event."""
>       agents = await setup_agents
                 ^^^^^^^^^^^^^^^^^^
E       TypeError: object dict can't be used in 'await' expression

tests/test_consulting_agents.py:323: TypeError
_____________________ test_agent_diary_in_knowledge_graph ______________________

setup_agents = {'engagement_manager': <demo_agents.EngagementManagerAgent object at 0x13277ca50>, 'implementation_lead': <demo_agents...dAgent object at 0x13277d1d0>, 'value_realization_lead': <demo_agents.ValueRealizationLeadAgent object at 0x13245a910>}

    @pytest.mark.asyncio
    async def test_agent_diary_in_knowledge_graph(setup_agents):
        """Test that each consulting agent's diary entries are present in the knowledge graph after writing."""
>       agents = await setup_agents
                 ^^^^^^^^^^^^^^^^^^
E       TypeError: object dict can't be used in 'await' expression

tests/test_consulting_agents.py:341: TypeError
_____________________________ test_agent_creation ______________________________

factory = <agents.core.agent_factory.AgentFactory object at 0x140cad650>

    @pytest.mark.asyncio
    async def test_agent_creation(factory):
        """Test agent creation with different capability types."""
        # Create agent with single capability
>       agent1 = await factory.create_agent("agent1", "test", {CapabilityType.KNOWLEDGE_GRAPH})
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_dynamic_agents.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <agents.core.agent_factory.AgentFactory object at 0x140cad650>
agent_type = 'agent1', agent_id = 'test'
capabilities = {<CapabilityType.KNOWLEDGE_GRAPH: 'knowledge_graph'>}
kwargs = {}

    async def create_agent(
        self,
        agent_type: str,
        agent_id: Optional[str] = None,
        capabilities: Optional[Set[Capability]] = None,
        **kwargs
    ) -> BaseAgent:
        """Create a new agent instance.
    
        Args:
            agent_type: The type of agent to create.
            agent_id: Optional ID for the agent. If not provided, one will be generated.
            capabilities: Optional initial capabilities. If not provided, will use defaults.
            **kwargs: Additional arguments to pass to the agent constructor.
    
        Returns:
            BaseAgent: The created agent instance.
    
        Raises:
            ValueError: If the agent type is not registered.
            RuntimeError: If agent creation fails.
        """
        if agent_type not in self._agent_classes:
>           raise ValueError(f"Unknown agent type: {agent_type}")
E           ValueError: Unknown agent type: agent1

agents/core/agent_factory.py:112: ValueError
------------------------------ Captured log setup ------------------------------
ERROR    asyncio:base_events.py:1785 Task was destroyed but it is pending!
task: <Task pending name='Task-310' coro=<WorkflowNotifier._process_notifications() running at /Users/nicholasbaro/Python/semant/agents/core/agent_registry.py:64> wait_for=<Future pending cb=[Task.task_wakeup()]> cb=[set.discard()]>
ERROR    asyncio:base_events.py:1785 Task was destroyed but it is pending!
task: <Task pending name='Task-316' coro=<WorkflowNotifier._process_notifications() running at /Users/nicholasbaro/Python/semant/agents/core/agent_registry.py:64> wait_for=<Future pending cb=[Task.task_wakeup()]> cb=[set.discard()]>
ERROR    asyncio:base_events.py:1785 Task exception was never retrieved
future: <Task finished name='Task-329' coro=<AgentRegistry.cleanup() done, defined at /Users/nicholasbaro/Python/semant/agents/core/agent_registry.py:407> exception=RuntimeError('Event loop is closed')>
Traceback (most recent call last):
  File "/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py", line 410, in cleanup
    await self._workflow_notifier.cleanup()
  File "/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py", line 111, in cleanup
    self._processor_task.cancel()
  File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 762, in call_soon
    self._check_closed()
  File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 520, in _check_closed
    raise RuntimeError('Event loop is closed')
RuntimeError: Event loop is closed
ERROR    asyncio:base_events.py:1785 Task exception was never retrieved
future: <Task finished name='Task-330' coro=<AgentRegistry.cleanup() done, defined at /Users/nicholasbaro/Python/semant/agents/core/agent_registry.py:407> exception=RuntimeError("Task <Task pending name='Task-330' coro=<AgentRegistry.cleanup() running at /Users/nicholasbaro/Python/semant/agents/core/agent_registry.py:410>> got Future <Task cancelling name='Task-310' coro=<WorkflowNotifier._process_notifications() done, defined at /Users/nicholasbaro/Python/semant/agents/core/agent_registry.py:60> wait_for=<Future cancelled> cb=[set.discard()]> attached to a different loop")>
Traceback (most recent call last):
  File "/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py", line 410, in cleanup
    await self._workflow_notifier.cleanup()
  File "/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py", line 113, in cleanup
    await self._processor_task
RuntimeError: Task <Task pending name='Task-330' coro=<AgentRegistry.cleanup() running at /Users/nicholasbaro/Python/semant/agents/core/agent_registry.py:410>> got Future <Task cancelling name='Task-310' coro=<WorkflowNotifier._process_notifications() done, defined at /Users/nicholasbaro/Python/semant/agents/core/agent_registry.py:60> wait_for=<Future cancelled> cb=[set.discard()]> attached to a different loop
ERROR    asyncio:base_events.py:1785 Task exception was never retrieved
future: <Task finished name='Task-331' coro=<AgentRegistry.cleanup() done, defined at /Users/nicholasbaro/Python/semant/agents/core/agent_registry.py:407> exception=RuntimeError("Task <Task pending name='Task-331' coro=<AgentRegistry.cleanup() running at /Users/nicholasbaro/Python/semant/agents/core/agent_registry.py:410>> got Future <Task cancelling name='Task-316' coro=<WorkflowNotifier._process_notifications() done, defined at /Users/nicholasbaro/Python/semant/agents/core/agent_registry.py:60> wait_for=<Future cancelled> cb=[set.discard()]> attached to a different loop")>
Traceback (most recent call last):
  File "/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py", line 410, in cleanup
    await self._workflow_notifier.cleanup()
  File "/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py", line 113, in cleanup
    await self._processor_task
RuntimeError: Task <Task pending name='Task-331' coro=<AgentRegistry.cleanup() running at /Users/nicholasbaro/Python/semant/agents/core/agent_registry.py:410>> got Future <Task cancelling name='Task-316' coro=<WorkflowNotifier._process_notifications() done, defined at /Users/nicholasbaro/Python/semant/agents/core/agent_registry.py:60> wait_for=<Future cancelled> cb=[set.discard()]> attached to a different loop
_____________________________ test_role_delegation _____________________________

factory = <agents.core.agent_factory.AgentFactory object at 0x131efdc10>

    @pytest.mark.asyncio
    async def test_role_delegation(factory):
        """Test role delegation between agents."""
        # Create supervisor agent
>       supervisor = await factory.create_agent(
            "supervisor",
            "supervisor",
            {CapabilityType.MESSAGE_PROCESSING}
        )

tests/test_dynamic_agents.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <agents.core.agent_factory.AgentFactory object at 0x131efdc10>
agent_type = 'supervisor', agent_id = 'supervisor'
capabilities = {<CapabilityType.MESSAGE_PROCESSING: 'message_processing'>}
kwargs = {}

    async def create_agent(
        self,
        agent_type: str,
        agent_id: Optional[str] = None,
        capabilities: Optional[Set[Capability]] = None,
        **kwargs
    ) -> BaseAgent:
        """Create a new agent instance.
    
        Args:
            agent_type: The type of agent to create.
            agent_id: Optional ID for the agent. If not provided, one will be generated.
            capabilities: Optional initial capabilities. If not provided, will use defaults.
            **kwargs: Additional arguments to pass to the agent constructor.
    
        Returns:
            BaseAgent: The created agent instance.
    
        Raises:
            ValueError: If the agent type is not registered.
            RuntimeError: If agent creation fails.
        """
        if agent_type not in self._agent_classes:
>           raise ValueError(f"Unknown agent type: {agent_type}")
E           ValueError: Unknown agent type: supervisor

agents/core/agent_factory.py:112: ValueError
______________________________ test_agent_scaling ______________________________

factory = <agents.core.agent_factory.AgentFactory object at 0x13244f250>

    @pytest.mark.asyncio
    async def test_agent_scaling(factory):
        """Test agent scaling and workload distribution."""
        # Create multiple worker agents
        workers = []
        for i in range(3):
>           worker = await factory.create_agent(
                f"worker_{i}",
                "worker",
                {CapabilityType.KNOWLEDGE_GRAPH}
            )

tests/test_dynamic_agents.py:181: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <agents.core.agent_factory.AgentFactory object at 0x13244f250>
agent_type = 'worker_0', agent_id = 'worker'
capabilities = {<CapabilityType.KNOWLEDGE_GRAPH: 'knowledge_graph'>}
kwargs = {}

    async def create_agent(
        self,
        agent_type: str,
        agent_id: Optional[str] = None,
        capabilities: Optional[Set[Capability]] = None,
        **kwargs
    ) -> BaseAgent:
        """Create a new agent instance.
    
        Args:
            agent_type: The type of agent to create.
            agent_id: Optional ID for the agent. If not provided, one will be generated.
            capabilities: Optional initial capabilities. If not provided, will use defaults.
            **kwargs: Additional arguments to pass to the agent constructor.
    
        Returns:
            BaseAgent: The created agent instance.
    
        Raises:
            ValueError: If the agent type is not registered.
            RuntimeError: If agent creation fails.
        """
        if agent_type not in self._agent_classes:
>           raise ValueError(f"Unknown agent type: {agent_type}")
E           ValueError: Unknown agent type: worker_0

agents/core/agent_factory.py:112: ValueError
____________________________ test_supervisor_agent _____________________________

factory = <agents.core.agent_factory.AgentFactory object at 0x141c6b610>

    @pytest.mark.asyncio
    async def test_supervisor_agent(factory):
        """Test supervisor agent functionality."""
>       supervisor = await factory.create_agent(
            "supervisor",
            "supervisor",
            {CapabilityType.MESSAGE_PROCESSING}
        )

tests/test_dynamic_agents.py:213: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <agents.core.agent_factory.AgentFactory object at 0x141c6b610>
agent_type = 'supervisor', agent_id = 'supervisor'
capabilities = {<CapabilityType.MESSAGE_PROCESSING: 'message_processing'>}
kwargs = {}

    async def create_agent(
        self,
        agent_type: str,
        agent_id: Optional[str] = None,
        capabilities: Optional[Set[Capability]] = None,
        **kwargs
    ) -> BaseAgent:
        """Create a new agent instance.
    
        Args:
            agent_type: The type of agent to create.
            agent_id: Optional ID for the agent. If not provided, one will be generated.
            capabilities: Optional initial capabilities. If not provided, will use defaults.
            **kwargs: Additional arguments to pass to the agent constructor.
    
        Returns:
            BaseAgent: The created agent instance.
    
        Raises:
            ValueError: If the agent type is not registered.
            RuntimeError: If agent creation fails.
        """
        if agent_type not in self._agent_classes:
>           raise ValueError(f"Unknown agent type: {agent_type}")
E           ValueError: Unknown agent type: supervisor

agents/core/agent_factory.py:112: ValueError
___________________________ test_workload_monitoring ___________________________

factory = <agents.core.agent_factory.AgentFactory object at 0x137e027d0>

    @pytest.mark.asyncio
    async def test_workload_monitoring(factory):
        """Test workload monitoring and balancing."""
        # Create monitoring agent
>       monitor = await factory.create_agent(
            "monitor",
            "monitor",
            {CapabilityType.MESSAGE_PROCESSING}
        )

tests/test_dynamic_agents.py:236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <agents.core.agent_factory.AgentFactory object at 0x137e027d0>
agent_type = 'monitor', agent_id = 'monitor'
capabilities = {<CapabilityType.MESSAGE_PROCESSING: 'message_processing'>}
kwargs = {}

    async def create_agent(
        self,
        agent_type: str,
        agent_id: Optional[str] = None,
        capabilities: Optional[Set[Capability]] = None,
        **kwargs
    ) -> BaseAgent:
        """Create a new agent instance.
    
        Args:
            agent_type: The type of agent to create.
            agent_id: Optional ID for the agent. If not provided, one will be generated.
            capabilities: Optional initial capabilities. If not provided, will use defaults.
            **kwargs: Additional arguments to pass to the agent constructor.
    
        Returns:
            BaseAgent: The created agent instance.
    
        Raises:
            ValueError: If the agent type is not registered.
            RuntimeError: If agent creation fails.
        """
        if agent_type not in self._agent_classes:
>           raise ValueError(f"Unknown agent type: {agent_type}")
E           ValueError: Unknown agent type: monitor

agents/core/agent_factory.py:112: ValueError
__________________________________ test_email __________________________________
Expected None, but test returned False. Did you mean to use `assert` instead of `return`?
----------------------------- Captured stdout call -----------------------------
📧 **TESTING EMAIL SEND FUNCTIONALITY**
🎯 Target: nicholas.k.baro@gmail.com

🧪 **TEST 1: Valid Email**
📧 **SMTP EMAIL SETUP REQUIRED**
To send real emails, please provide credentials:
📧 Enter your Gmail address: ❌ Failed to send real email: pytest: reading from stdin while output is captured!  Consider using `-s`.
📧 [SIMULATED] Email sent to nicholas.k.baro@gmail.com: ✅ Test Email from Semant - Email Send Test
⚠️  Valid email test: Simulated only

🧪 **TEST 2: Invalid Recipient**
📧 **SMTP EMAIL SETUP REQUIRED**
To send real emails, please provide credentials:
📧 Enter your Gmail address: ❌ Failed to send real email: pytest: reading from stdin while output is captured!  Consider using `-s`.
📧 [SIMULATED] Email sent to not-an-email: Test Invalid Email
✅ Invalid recipient test: Handled gracefully

🧪 **TEST 3: Missing Subject**
📧 **SMTP EMAIL SETUP REQUIRED**
To send real emails, please provide credentials:
📧 Enter your Gmail address: ❌ Failed to send real email: pytest: reading from stdin while output is captured!  Consider using `-s`.
📧 [SIMULATED] Email sent to nicholas.k.baro@gmail.com: 
⚠️  Missing subject test: Simulated only

🧪 **TEST 4: Missing Body**
📧 **SMTP EMAIL SETUP REQUIRED**
To send real emails, please provide credentials:
📧 Enter your Gmail address: ❌ Failed to send real email: pytest: reading from stdin while output is captured!  Consider using `-s`.
📧 [SIMULATED] Email sent to nicholas.k.baro@gmail.com: 📧 Test Email - No Body Content
⚠️  Missing body test: Simulated only

📊 **EMAIL SEND TEST RESULTS**
   ⚠️ Valid email: ⚠️  Simulated only
   ✅ Invalid recipient: ✅ Handled gracefully
   ⚠️ Missing subject: ⚠️  Simulated only
   ⚠️ Missing body: ⚠️  Simulated only

⚠️  **NO REAL EMAILS SENT**
💡 Tests completed but emails were simulated
🔧 Check email credentials for real sending
____________________________ test_stats_collection _____________________________

graph_manager = <kg.models.graph_manager.KnowledgeGraphManager object at 0x1266b4a90>

    @pytest.mark.asyncio
    async def test_stats_collection(graph_manager):
        """Test collection of graph statistics."""
        # Add test data
        for i in range(100):
            subject = f"http://example.org/core#Agent{i}"
            predicate = "http://example.org/core#hasStatus"
            object = "idle"
            await graph_manager.add_triple(subject, predicate, object)
    
        # Get stats
        stats = graph_manager.get_stats()
    
        # Verify stats
>       assert stats['triple_count'] == 100
               ^^^^^^^^^^^^^^^^^^^^^
E       TypeError: 'coroutine' object is not subscriptable

tests/test_graph_monitoring.py:31: TypeError
____________________________ test_cache_monitoring _____________________________

graph_manager = <kg.models.graph_manager.KnowledgeGraphManager object at 0x142845990>

    @pytest.mark.asyncio
    async def test_cache_monitoring(graph_manager):
        """Test cache monitoring and statistics."""
        # Run some queries to populate cache
        for i in range(10):
            query = f"""
            SELECT ?agent WHERE {{
                ?agent <http://example.org/core#hasStatus> "{i}" .
            }}
            """
            await graph_manager.query_graph(query)
    
        # Get cache stats
        stats = graph_manager.cache.get_stats()
    
        # Verify cache stats
>       assert stats['size'] > 0
E       assert 0 > 0

tests/test_graph_monitoring.py:89: AssertionError
_________________________ test_performance_monitoring __________________________

graph_manager = <kg.models.graph_manager.KnowledgeGraphManager object at 0x141912990>

    @pytest.mark.asyncio
    async def test_performance_monitoring(graph_manager):
        """Test performance monitoring capabilities."""
        # Add test data
        for i in range(100):
            subject = f"http://example.org/core#Agent{i}"
            predicate = "http://example.org/core#hasStatus"
            object = "idle"
            await graph_manager.add_triple(subject, predicate, object)
    
        # Test query performance
        start_time = time.time()
        results = await graph_manager.query_graph("""
            SELECT ?agent ?status WHERE {
                ?agent <http://example.org/core#hasStatus> ?status .
            }
        """)
        query_time = time.time() - start_time
    
        # Verify performance
        assert len(results) == 100
        assert query_time < 1.0  # Should complete within 1 second
    
        # Get stats after query
        stats = graph_manager.get_stats()
>       cache_stats = stats['cache_stats']
                      ^^^^^^^^^^^^^^^^^^^^
E       TypeError: 'coroutine' object is not subscriptable

tests/test_graph_monitoring.py:145: TypeError
____________________ TestPromptAgent.test_prompt_generation ____________________

self = <tests.test_prompt_agent.TestPromptAgent object at 0x1121b7d10>
setup_prompt_agent = (<agents.core.agentic_prompt_agent.AgenticPromptAgent object at 0x1441df1d0>, <Graph identifier=Nc12718b812104373b18dca7b44d56800 (<class 'rdflib.graph.Graph'>)>)

    async def test_prompt_generation(self, setup_prompt_agent):
        """Test prompt generation with different templates."""
        agent, knowledge_graph = setup_prompt_agent
    
        # Test code review prompt
        message = AgentMessage(
            sender_id="test_agent",
            recipient_id="test_prompt_agent",
            content={
                "prompt_type": "code_review",
                "context": {
                    "role": "senior backend engineer",
                    "specialization": "Python and SPARQL",
                    "approach": "Follow best practices",
                    "documentation": "Document all changes"
                },
                "objective": "Debug and enhance the KnowledgeGraphManager module"
            },
            message_type="prompt_request"
        )
    
        response = await agent.process_message(message)
        assert response.message_type == "prompt_response"
        assert "prompt" in response.content
    
        prompt = response.content["prompt"]
        assert "role" in prompt
        assert "context" in prompt
        assert "objective" in prompt
        assert "approach" in prompt
        assert "documentation" in prompt
    
        # Test task execution prompt
        message = AgentMessage(
            sender_id="test_agent",
            recipient_id="test_prompt_agent",
            content={
                "prompt_type": "task_execution",
                "context": {
                    "role": "data engineer",
                    "task": "Process sensor data",
                    "constraints": "Must handle missing values",
                    "expected_output": "Cleaned dataset"
                }
            },
            message_type="prompt_request"
        )
    
        response = await agent.process_message(message)
>       assert response.message_type == "prompt_response"
E       AssertionError: assert 'error' == 'prompt_response'
E         
E         - prompt_response
E         + error

tests/test_prompt_agent.py:95: AssertionError
_______________ TestPromptAgent.test_knowledge_graph_integration _______________

self = <tests.test_prompt_agent.TestPromptAgent object at 0x1117f39d0>
setup_prompt_agent = (<agents.core.agentic_prompt_agent.AgenticPromptAgent object at 0x13793f690>, <Graph identifier=N870a2042a8c847c1af86fe7563fdcc43 (<class 'rdflib.graph.Graph'>)>)

    async def test_knowledge_graph_integration(self, setup_prompt_agent):
        """Test knowledge graph integration for prompts."""
        agent, knowledge_graph = setup_prompt_agent
    
        # Generate a prompt
        message = AgentMessage(
            sender_id="test_agent",
            recipient_id="test_prompt_agent",
            content={
                "prompt_type": "code_review",
                "context": {
                    "role": "senior backend engineer",
                    "specialization": "Python and SPARQL",
                    "approach": "Follow best practices",
                    "documentation": "Document all changes"
                },
                "objective": "Debug and enhance the KnowledgeGraphManager module"
            },
            message_type="prompt_request"
        )
    
        response = await agent.process_message(message)
    
        # Verify knowledge graph updates
        prompt_uri = URIRef("prompt:code_review")
        assert (prompt_uri, RDF.type, URIRef("prompt:Prompt")) in knowledge_graph
>       assert (prompt_uri, RDFS.label, Literal("Code Review Prompt")) in knowledge_graph
E       AssertionError: assert (rdflib.term.URIRef('prompt:code_review'), rdflib.term.URIRef('http://www.w3.org/2000/01/rdf-schema#label'), rdflib.term.Literal('Code Review Prompt')) in <Graph identifier=N870a2042a8c847c1af86fe7563fdcc43 (<class 'rdflib.graph.Graph'>)>

tests/test_prompt_agent.py:130: AssertionError
____________________ TestPromptAgent.test_prompt_validation ____________________

self = <tests.test_prompt_agent.TestPromptAgent object at 0x1120d1f90>
setup_prompt_agent = (<agents.core.agentic_prompt_agent.AgenticPromptAgent object at 0x140bb1f10>, <Graph identifier=Nbaf28dc0c2264799bdc8899f7e76d172 (<class 'rdflib.graph.Graph'>)>)

    async def test_prompt_validation(self, setup_prompt_agent):
        """Test prompt validation and error handling."""
        agent, knowledge_graph = setup_prompt_agent
    
        # Test missing required fields
        message = AgentMessage(
            sender_id="test_agent",
            recipient_id="test_prompt_agent",
            content={
                "prompt_type": "code_review",
                "context": {
                    "role": "senior backend engineer"
                    # Missing specialization, approach, documentation
                }
            },
            message_type="prompt_request"
        )
    
        response = await agent.process_message(message)
        assert response.message_type == "error"
>       assert "missing required fields" in response.content["error"].lower()
E       AssertionError: assert 'missing required fields' in 'missing required prompt parameters'
E        +  where 'missing required prompt parameters' = <built-in method lower of str object at 0x110ff4750>()
E        +    where <built-in method lower of str object at 0x110ff4750> = 'Missing required prompt parameters'.lower

tests/test_prompt_agent.py:163: AssertionError
_____________________ TestPromptAgent.test_prompt_metrics ______________________

self = <tests.test_prompt_agent.TestPromptAgent object at 0x1120d2c50>
setup_prompt_agent = (<agents.core.agentic_prompt_agent.AgenticPromptAgent object at 0x1441c86d0>, <Graph identifier=N6ae1e5bc489945a09aeb69eaa4284533 (<class 'rdflib.graph.Graph'>)>)

    async def test_prompt_metrics(self, setup_prompt_agent):
        """Test prompt metrics collection and reporting."""
        agent, knowledge_graph = setup_prompt_agent
    
        # Generate multiple prompts
        for i in range(3):
            message = AgentMessage(
                sender_id="test_agent",
                recipient_id="test_prompt_agent",
                content={
                    "prompt_type": "code_review",
                    "context": {
                        "role": "senior backend engineer",
                        "specialization": "Python and SPARQL",
                        "approach": "Follow best practices",
                        "documentation": "Document all changes"
                    },
                    "objective": f"Debug and enhance module {i}"
                },
                message_type="prompt_request"
            )
            await agent.process_message(message)
    
        # Query metrics
        message = AgentMessage(
            sender_id="test_agent",
            recipient_id="test_prompt_agent",
            content={
                "metric_type": "prompt_usage"
            },
            message_type="metrics_request"
        )
    
        response = await agent.process_message(message)
>       assert response.message_type == "metrics_response"
E       AssertionError: assert 'error_response' == 'metrics_response'
E         
E         - metrics_response
E         + error_response

tests/test_prompt_agent.py:219: AssertionError
_______________________ test_investigate_research_topic ________________________

reasoner = <agents.core.reasoner.KnowledgeGraphReasoner object at 0x1441bea50>

    @pytest.mark.asyncio
    async def test_investigate_research_topic(reasoner):
        """Test investigating a research topic."""
>       findings = await reasoner.investigate_research_topic("AI healthcare")
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_reasoner.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
agents/core/reasoner.py:52: in investigate_research_topic
    topic_entries = await self._find_topic_entries(topic_lc)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
agents/core/reasoner.py:83: in _find_topic_entries
    for row in self._query(query):
               ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <agents.core.reasoner.KnowledgeGraphReasoner object at 0x1441bea50>
sparql_query = '\n            PREFIX dm: <http://example.org/dMaster/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPR...mestamp ?timestamp .\n                FILTER(CONTAINS(LCASE(STR(?message)), "ai healthcare"))\n            }\n        '

    def _query(self, sparql_query: str) -> List[Dict[str, str]]:
        """Execute a SPARQL query and return results."""
        if self.graphdb:
            return self.graphdb.query(sparql_query)
        else:
            # For rdflib, convert ResultRow to dict with string keys and values
            results = []
            qres = self.graph.query(sparql_query)
            for row in qres:
                # row.labels gives the variable names
                result = {}
                for var in row.labels:
                    # Convert variable name to string
                    key = str(var)
                    # Convert value to string, handling None and URIRef/Literal objects
                    value = row[var]
                    if value is None:
                        result[key] = ""
>                   elif isinstance(value, (URIRef, Literal)):
                                            ^^^^^^
E                   NameError: name 'URIRef' is not defined

agents/core/reasoner.py:245: NameError
---------------------------- Captured stdout setup -----------------------------
DEBUG: Triples in sample_graph:
  http://example.org/dMaster/entry1 http://example.org/dMaster/message ai healthcare research
  http://example.org/dMaster/entry1 http://example.org/dMaster/timestamp 2024-05-30
  http://example.org/dMaster/paper1 http://example.org/dMaster/author dr. smith
  http://example.org/dMaster/paper1 http://example.org/dMaster/title ai in healthcare: a review
  http://example.org/dMaster/paper1 http://example.org/dMaster/year 2024
  http://example.org/dMaster/paper1 http://example.org/dMaster/hasInsight ai can improve diagnosis accuracy
  http://example.org/dMaster/agent1 http://example.org/dMaster/hasDiaryEntry http://example.org/dMaster/entry1
  http://example.org/dMaster/paper1 http://example.org/dMaster/hasTopic ai healthcare
----------------------------- Captured stdout call -----------------------------
Debug - Topic entries query:

            PREFIX dm: <http://example.org/dMaster/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX dc: <http://purl.org/dc/elements/1.1/>
PREFIX dct: <http://purl.org/dc/terms/>
            SELECT ?agent ?entry ?message ?timestamp
            WHERE {
                ?agent dm:hasDiaryEntry ?entry .
                ?entry dm:message ?message ;
                       dm:timestamp ?timestamp .
                FILTER(CONTAINS(LCASE(STR(?message)), "ai healthcare"))
            }
        
___________________________ test_find_topic_entries ____________________________

reasoner = <agents.core.reasoner.KnowledgeGraphReasoner object at 0x14413c310>

    @pytest.mark.asyncio
    async def test_find_topic_entries(reasoner):
        """Test finding diary entries related to a topic."""
>       entries = await reasoner._find_topic_entries("ai healthcare")
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_reasoner.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
agents/core/reasoner.py:83: in _find_topic_entries
    for row in self._query(query):
               ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <agents.core.reasoner.KnowledgeGraphReasoner object at 0x14413c310>
sparql_query = '\n            PREFIX dm: <http://example.org/dMaster/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPR...mestamp ?timestamp .\n                FILTER(CONTAINS(LCASE(STR(?message)), "ai healthcare"))\n            }\n        '

    def _query(self, sparql_query: str) -> List[Dict[str, str]]:
        """Execute a SPARQL query and return results."""
        if self.graphdb:
            return self.graphdb.query(sparql_query)
        else:
            # For rdflib, convert ResultRow to dict with string keys and values
            results = []
            qres = self.graph.query(sparql_query)
            for row in qres:
                # row.labels gives the variable names
                result = {}
                for var in row.labels:
                    # Convert variable name to string
                    key = str(var)
                    # Convert value to string, handling None and URIRef/Literal objects
                    value = row[var]
                    if value is None:
                        result[key] = ""
>                   elif isinstance(value, (URIRef, Literal)):
                                            ^^^^^^
E                   NameError: name 'URIRef' is not defined

agents/core/reasoner.py:245: NameError
---------------------------- Captured stdout setup -----------------------------
DEBUG: Triples in sample_graph:
  http://example.org/dMaster/entry1 http://example.org/dMaster/message ai healthcare research
  http://example.org/dMaster/entry1 http://example.org/dMaster/timestamp 2024-05-30
  http://example.org/dMaster/paper1 http://example.org/dMaster/author dr. smith
  http://example.org/dMaster/paper1 http://example.org/dMaster/title ai in healthcare: a review
  http://example.org/dMaster/paper1 http://example.org/dMaster/year 2024
  http://example.org/dMaster/paper1 http://example.org/dMaster/hasInsight ai can improve diagnosis accuracy
  http://example.org/dMaster/agent1 http://example.org/dMaster/hasDiaryEntry http://example.org/dMaster/entry1
  http://example.org/dMaster/paper1 http://example.org/dMaster/hasTopic ai healthcare
----------------------------- Captured stdout call -----------------------------
Debug - Topic entries query:

            PREFIX dm: <http://example.org/dMaster/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX dc: <http://purl.org/dc/elements/1.1/>
PREFIX dct: <http://purl.org/dc/terms/>
            SELECT ?agent ?entry ?message ?timestamp
            WHERE {
                ?agent dm:hasDiaryEntry ?entry .
                ?entry dm:message ?message ;
                       dm:timestamp ?timestamp .
                FILTER(CONTAINS(LCASE(STR(?message)), "ai healthcare"))
            }
        
___________________________ test_find_related_papers ___________________________

reasoner = <agents.core.reasoner.KnowledgeGraphReasoner object at 0x1441c8650>

    @pytest.mark.asyncio
    async def test_find_related_papers(reasoner):
        """Test finding research papers related to a topic."""
>       papers = await reasoner._find_related_papers("ai healthcare")
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_reasoner.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
agents/core/reasoner.py:105: in _find_related_papers
    for row in self._query(query):
               ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <agents.core.reasoner.KnowledgeGraphReasoner object at 0x1441c8650>
sparql_query = '\n            PREFIX dm: <http://example.org/dMaster/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPR...:hasInsight ?insight .\n                FILTER(CONTAINS(LCASE(STR(?topic)), "ai healthcare"))\n            }\n        '

    def _query(self, sparql_query: str) -> List[Dict[str, str]]:
        """Execute a SPARQL query and return results."""
        if self.graphdb:
            return self.graphdb.query(sparql_query)
        else:
            # For rdflib, convert ResultRow to dict with string keys and values
            results = []
            qres = self.graph.query(sparql_query)
            for row in qres:
                # row.labels gives the variable names
                result = {}
                for var in row.labels:
                    # Convert variable name to string
                    key = str(var)
                    # Convert value to string, handling None and URIRef/Literal objects
                    value = row[var]
                    if value is None:
                        result[key] = ""
>                   elif isinstance(value, (URIRef, Literal)):
                                            ^^^^^^
E                   NameError: name 'URIRef' is not defined

agents/core/reasoner.py:245: NameError
---------------------------- Captured stdout setup -----------------------------
DEBUG: Triples in sample_graph:
  http://example.org/dMaster/entry1 http://example.org/dMaster/message ai healthcare research
  http://example.org/dMaster/entry1 http://example.org/dMaster/timestamp 2024-05-30
  http://example.org/dMaster/paper1 http://example.org/dMaster/author dr. smith
  http://example.org/dMaster/paper1 http://example.org/dMaster/title ai in healthcare: a review
  http://example.org/dMaster/paper1 http://example.org/dMaster/year 2024
  http://example.org/dMaster/paper1 http://example.org/dMaster/hasInsight ai can improve diagnosis accuracy
  http://example.org/dMaster/agent1 http://example.org/dMaster/hasDiaryEntry http://example.org/dMaster/entry1
  http://example.org/dMaster/paper1 http://example.org/dMaster/hasTopic ai healthcare
----------------------------- Captured stdout call -----------------------------
Debug - Related papers query:

            PREFIX dm: <http://example.org/dMaster/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX dc: <http://purl.org/dc/elements/1.1/>
PREFIX dct: <http://purl.org/dc/terms/>
            SELECT ?paper ?topic ?insight
            WHERE {
                ?paper dm:hasTopic ?topic ;
                       dm:hasInsight ?insight .
                FILTER(CONTAINS(LCASE(STR(?topic)), "ai healthcare"))
            }
        
__________________________ test_extract_key_insights ___________________________

reasoner = <agents.core.reasoner.KnowledgeGraphReasoner object at 0x144153250>

    @pytest.mark.asyncio
    async def test_extract_key_insights(reasoner):
        """Test extracting key insights from research."""
>       insights = await reasoner._extract_key_insights("ai healthcare")
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_reasoner.py:75: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
agents/core/reasoner.py:132: in _extract_key_insights
    for row in self._query(query):
               ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <agents.core.reasoner.KnowledgeGraphReasoner object at 0x144153250>
sparql_query = '\n            PREFIX dm: <http://example.org/dMaster/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPR...                   FILTER(CONTAINS(LCASE(STR(?message)), "ai healthcare"))\n                }\n            }\n        '

    def _query(self, sparql_query: str) -> List[Dict[str, str]]:
        """Execute a SPARQL query and return results."""
        if self.graphdb:
            return self.graphdb.query(sparql_query)
        else:
            # For rdflib, convert ResultRow to dict with string keys and values
            results = []
            qres = self.graph.query(sparql_query)
            for row in qres:
                # row.labels gives the variable names
                result = {}
                for var in row.labels:
                    # Convert variable name to string
                    key = str(var)
                    # Convert value to string, handling None and URIRef/Literal objects
                    value = row[var]
                    if value is None:
                        result[key] = ""
>                   elif isinstance(value, (URIRef, Literal)):
                                            ^^^^^^
E                   NameError: name 'URIRef' is not defined

agents/core/reasoner.py:245: NameError
---------------------------- Captured stdout setup -----------------------------
DEBUG: Triples in sample_graph:
  http://example.org/dMaster/entry1 http://example.org/dMaster/message ai healthcare research
  http://example.org/dMaster/entry1 http://example.org/dMaster/timestamp 2024-05-30
  http://example.org/dMaster/paper1 http://example.org/dMaster/author dr. smith
  http://example.org/dMaster/paper1 http://example.org/dMaster/title ai in healthcare: a review
  http://example.org/dMaster/paper1 http://example.org/dMaster/year 2024
  http://example.org/dMaster/paper1 http://example.org/dMaster/hasInsight ai can improve diagnosis accuracy
  http://example.org/dMaster/agent1 http://example.org/dMaster/hasDiaryEntry http://example.org/dMaster/entry1
  http://example.org/dMaster/paper1 http://example.org/dMaster/hasTopic ai healthcare
________________________ test_traverse_knowledge_graph _________________________

reasoner = <agents.core.reasoner.KnowledgeGraphReasoner object at 0x1441ab990>

    @pytest.mark.asyncio
    async def test_traverse_knowledge_graph(reasoner):
        """Test traversing the knowledge graph."""
>       traversal = await reasoner.traverse_knowledge_graph(
            "http://example.org/dMaster/agent1",
            max_depth=2
        )

tests/test_reasoner.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
agents/core/reasoner.py:190: in traverse_knowledge_graph
    for row in self._query(query):
               ^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <agents.core.reasoner.KnowledgeGraphReasoner object at 0x1441ab990>
sparql_query = '\n            PREFIX dm: <http://example.org/dMaster/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPR...WHERE {\n                <http://example.org/dMaster/agent1> ?rel ?target .\n                \n            }\n        '

    def _query(self, sparql_query: str) -> List[Dict[str, str]]:
        """Execute a SPARQL query and return results."""
        if self.graphdb:
            return self.graphdb.query(sparql_query)
        else:
            # For rdflib, convert ResultRow to dict with string keys and values
            results = []
            qres = self.graph.query(sparql_query)
            for row in qres:
                # row.labels gives the variable names
                result = {}
                for var in row.labels:
                    # Convert variable name to string
                    key = str(var)
                    # Convert value to string, handling None and URIRef/Literal objects
                    value = row[var]
                    if value is None:
                        result[key] = ""
>                   elif isinstance(value, (URIRef, Literal)):
                                            ^^^^^^
E                   NameError: name 'URIRef' is not defined

agents/core/reasoner.py:245: NameError
---------------------------- Captured stdout setup -----------------------------
DEBUG: Triples in sample_graph:
  http://example.org/dMaster/entry1 http://example.org/dMaster/message ai healthcare research
  http://example.org/dMaster/entry1 http://example.org/dMaster/timestamp 2024-05-30
  http://example.org/dMaster/paper1 http://example.org/dMaster/author dr. smith
  http://example.org/dMaster/paper1 http://example.org/dMaster/title ai in healthcare: a review
  http://example.org/dMaster/paper1 http://example.org/dMaster/year 2024
  http://example.org/dMaster/paper1 http://example.org/dMaster/hasInsight ai can improve diagnosis accuracy
  http://example.org/dMaster/agent1 http://example.org/dMaster/hasDiaryEntry http://example.org/dMaster/entry1
  http://example.org/dMaster/paper1 http://example.org/dMaster/hasTopic ai healthcare
----------------------------- Captured stdout call -----------------------------
Debug - Traversal query:

            PREFIX dm: <http://example.org/dMaster/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX dc: <http://purl.org/dc/elements/1.1/>
PREFIX dct: <http://purl.org/dc/terms/>
            SELECT ?rel ?target
            WHERE {
                <http://example.org/dMaster/agent1> ?rel ?target .
                
            }
        
_____________________________ test_process_message _____________________________

research_agent = <agents.core.research_agent.ResearchAgent object at 0x1441defd0>

    @pytest.mark.asyncio
    async def test_process_message(research_agent):
        """Test processing a research message."""
        message = AgentMessage(
            sender_id="test_sender",
            recipient_id="test_research_agent",
            content={"topic": "Test research query"},
            timestamp=time.time(),
            message_type="research_request"
        )
>       response = await research_agent.process_message(message)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_research_agent.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <agents.core.research_agent.ResearchAgent object at 0x1441defd0>
message = <agents.core.base_agent.AgentMessage object at 0x1440cff50>

    async def process_message(self, message: AgentMessage) -> AgentMessage:
        """Process an incoming message and return a response.
    
        Args:
            message: The message to process.
    
        Returns:
            AgentMessage: The response message.
    
        Raises:
            RuntimeError: If the agent is not initialized.
        """
        if not self._is_initialized:
>           raise RuntimeError("Agent not initialized. Call initialize() first.")
E           RuntimeError: Agent not initialized. Call initialize() first.

agents/core/base_agent.py:257: RuntimeError
________________________ test_test_agent_initialization ________________________

test_research_agent = <tests.utils.test_agents.ResearchTestAgent object at 0x1440b2850>

    @pytest.mark.asyncio
    async def test_test_agent_initialization(test_research_agent):
        """Test test agent initialization."""
>       assert test_research_agent.agent_id == "test_research_agent"
E       AssertionError: assert 'research_test_agent' == 'test_research_agent'
E         
E         - test_research_agent
E         + research_test_agent

tests/test_research_agent.py:51: AssertionError
_______________________ test_test_agent_message_history ________________________

test_research_agent = <tests.utils.test_agents.ResearchTestAgent object at 0x14408f0d0>

    @pytest.mark.asyncio
    async def test_test_agent_message_history(test_research_agent):
        """Test test agent message history tracking."""
        message = AgentMessage(
            sender_id="test_sender",
            recipient_id="test_research_agent",
            content={"query": "Test research query"},
            timestamp=time.time(),
            message_type="research_request"
        )
        response = await test_research_agent.process_message(message)
        assert len(test_research_agent.get_message_history()) == 1
        assert test_research_agent.get_message_history()[0] == message
>       assert response.content["status"] == "research_completed"
E       AssertionError: assert 'success' == 'research_completed'
E         
E         - research_completed
E         + success

tests/test_research_agent.py:69: AssertionError
_______________________ test_test_agent_knowledge_graph ________________________

test_research_agent = <tests.utils.test_agents.ResearchTestAgent object at 0x144067210>

    @pytest.mark.asyncio
    async def test_test_agent_knowledge_graph(test_research_agent):
        """Test test agent knowledge graph operations."""
        # Test update
        update_data = {
            "subject": "test_subject",
            "predicate": "test_predicate",
            "object": "test_object"
        }
        await test_research_agent.update_knowledge_graph(update_data)
        assert len(test_research_agent.get_knowledge_graph_updates()) == 1
>       assert test_research_agent.get_knowledge_graph_updates()[0] == update_data
E       AssertionError: assert {'data': {'subject': 'test_subject', 'predicate': 'test_predicate', 'object': 'test_object'}, 'timestamp': 1749518620.174051} == {'subject': 'test_subject', 'predicate': 'test_predicate', 'object': 'test_object'}
E         
E         Left contains 2 more items:
E         {'data': {'object': 'test_object',
E                   'predicate': 'test_predicate',
E                   'subject': 'test_subject'},
E          'timestamp': 1749518620.174051}
E         Right contains 3 more items:
E         {'object': 'test_object',
E          'predicate': 'test_predicate',
E          'subject': 'test_subject'}
E         
E         Full diff:
E           {
E         +     'data': {
E         -     'object': 'test_object',
E         +         'object': 'test_object',
E         ? ++++
E         -     'predicate': 'test_predicate',
E         +         'predicate': 'test_predicate',
E         ? ++++
E         -     'subject': 'test_subject',
E         +         'subject': 'test_subject',
E         ? ++++
E         +     },
E         +     'timestamp': 1749518620.174051,
E           }

tests/test_research_agent.py:83: AssertionError
______________________ test_process_message_without_topic ______________________

research_agent = <agents.core.research_agent.ResearchAgent object at 0x1440a3390>

    @pytest.mark.asyncio
    async def test_process_message_without_topic(research_agent):
        """Test processing a message without a topic."""
        message = AgentMessage(
            sender_id="test_sender",
            recipient_id="test_research_agent",
            content={},
            timestamp=time.time(),
            message_type="research_request"
        )
>       response = await research_agent.process_message(message)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_research_agent.py:101: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <agents.core.research_agent.ResearchAgent object at 0x1440a3390>
message = <agents.core.base_agent.AgentMessage object at 0x1440a3750>

    async def process_message(self, message: AgentMessage) -> AgentMessage:
        """Process an incoming message and return a response.
    
        Args:
            message: The message to process.
    
        Returns:
            AgentMessage: The response message.
    
        Raises:
            RuntimeError: If the agent is not initialized.
        """
        if not self._is_initialized:
>           raise RuntimeError("Agent not initialized. Call initialize() first.")
E           RuntimeError: Agent not initialized. Call initialize() first.

agents/core/base_agent.py:257: RuntimeError
_______________________ test_process_message_with_topic ________________________

research_agent = <agents.core.research_agent.ResearchAgent object at 0x1441802d0>

    @pytest.mark.asyncio
    async def test_process_message_with_topic(research_agent):
        """Test processing a message with a valid topic."""
        message = AgentMessage(
            sender_id="test_sender",
            recipient_id="test_research_agent",
            content={"topic": "test_topic", "depth": 2},
            timestamp=time.time(),
            message_type="research_request"
        )
>       response = await research_agent.process_message(message)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_research_agent.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <agents.core.research_agent.ResearchAgent object at 0x1441802d0>
message = <agents.core.base_agent.AgentMessage object at 0x144183650>

    async def process_message(self, message: AgentMessage) -> AgentMessage:
        """Process an incoming message and return a response.
    
        Args:
            message: The message to process.
    
        Returns:
            AgentMessage: The response message.
    
        Raises:
            RuntimeError: If the agent is not initialized.
        """
        if not self._is_initialized:
>           raise RuntimeError("Agent not initialized. Call initialize() first.")
E           RuntimeError: Agent not initialized. Call initialize() first.

agents/core/base_agent.py:257: RuntimeError
___________________________ test_confidence_scoring ____________________________

research_agent = <agents.core.research_agent.ResearchAgent object at 0x1440a0110>

    @pytest.mark.asyncio
    async def test_confidence_scoring(research_agent):
        """Test confidence scoring in research findings."""
        message = AgentMessage(
            sender_id="test_sender",
            recipient_id="test_research_agent",
            content={
                "topic": "test_topic",
                "depth": 2,
                "require_confidence": True
            },
            timestamp=time.time(),
            message_type="research_request"
        )
>       response = await research_agent.process_message(message)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_research_agent.py:165: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <agents.core.research_agent.ResearchAgent object at 0x1440a0110>
message = <agents.core.base_agent.AgentMessage object at 0x1441a9850>

    async def process_message(self, message: AgentMessage) -> AgentMessage:
        """Process an incoming message and return a response.
    
        Args:
            message: The message to process.
    
        Returns:
            AgentMessage: The response message.
    
        Raises:
            RuntimeError: If the agent is not initialized.
        """
        if not self._is_initialized:
>           raise RuntimeError("Agent not initialized. Call initialize() first.")
E           RuntimeError: Agent not initialized. Call initialize() first.

agents/core/base_agent.py:257: RuntimeError
____________________________ test_evidence_tracking ____________________________

research_agent = <agents.core.research_agent.ResearchAgent object at 0x142c2b910>

    @pytest.mark.asyncio
    async def test_evidence_tracking(research_agent):
        """Test evidence chain tracking in research findings."""
        message = AgentMessage(
            sender_id="test_sender",
            recipient_id="test_research_agent",
            content={
                "topic": "test_topic",
                "depth": 2,
                "track_evidence": True
            },
            timestamp=time.time(),
            message_type="research_request"
        )
>       response = await research_agent.process_message(message)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_research_agent.py:185: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <agents.core.research_agent.ResearchAgent object at 0x142c2b910>
message = <agents.core.base_agent.AgentMessage object at 0x14419f550>

    async def process_message(self, message: AgentMessage) -> AgentMessage:
        """Process an incoming message and return a response.
    
        Args:
            message: The message to process.
    
        Returns:
            AgentMessage: The response message.
    
        Raises:
            RuntimeError: If the agent is not initialized.
        """
        if not self._is_initialized:
>           raise RuntimeError("Agent not initialized. Call initialize() first.")
E           RuntimeError: Agent not initialized. Call initialize() first.

agents/core/base_agent.py:257: RuntimeError
_________________________ test_multiple_research_paths _________________________

research_agent = <agents.core.research_agent.ResearchAgent object at 0x1441dda10>

    @pytest.mark.asyncio
    async def test_multiple_research_paths(research_agent):
        """Test exploration of multiple research paths."""
        message = AgentMessage(
            sender_id="test_sender",
            recipient_id="test_research_agent",
            content={
                "topic": "test_topic",
                "depth": 2,
                "explore_paths": True
            },
            timestamp=time.time(),
            message_type="research_request"
        )
>       response = await research_agent.process_message(message)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_research_agent.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <agents.core.research_agent.ResearchAgent object at 0x1441dda10>
message = <agents.core.base_agent.AgentMessage object at 0x144159d90>

    async def process_message(self, message: AgentMessage) -> AgentMessage:
        """Process an incoming message and return a response.
    
        Args:
            message: The message to process.
    
        Returns:
            AgentMessage: The response message.
    
        Raises:
            RuntimeError: If the agent is not initialized.
        """
        if not self._is_initialized:
>           raise RuntimeError("Agent not initialized. Call initialize() first.")
E           RuntimeError: Agent not initialized. Call initialize() first.

agents/core/base_agent.py:257: RuntimeError
_____________________________ test_error_handling ______________________________

research_agent = <agents.core.research_agent.ResearchAgent object at 0x144192d10>

    @pytest.mark.asyncio
    async def test_error_handling(research_agent):
        """Test comprehensive error handling."""
        # Test invalid depth
        message = AgentMessage(
            sender_id="test_sender",
            recipient_id="test_research_agent",
            content={
                "topic": "test_topic",
                "depth": -1
            },
            timestamp=time.time(),
            message_type="research_request"
        )
>       response = await research_agent.process_message(message)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_research_agent.py:225: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <agents.core.research_agent.ResearchAgent object at 0x144192d10>
message = <agents.core.base_agent.AgentMessage object at 0x144193590>

    async def process_message(self, message: AgentMessage) -> AgentMessage:
        """Process an incoming message and return a response.
    
        Args:
            message: The message to process.
    
        Returns:
            AgentMessage: The response message.
    
        Raises:
            RuntimeError: If the agent is not initialized.
        """
        if not self._is_initialized:
>           raise RuntimeError("Agent not initialized. Call initialize() first.")
E           RuntimeError: Agent not initialized. Call initialize() first.

agents/core/base_agent.py:257: RuntimeError
__________________________ test_reasoner_integration ___________________________

research_agent = <agents.core.research_agent.ResearchAgent object at 0x144059a10>

    @pytest.mark.asyncio
    async def test_reasoner_integration(research_agent):
        """Test integration with KnowledgeGraphReasoner."""
        # Test reasoner initialization
        assert research_agent.reasoner is not None
    
        # Test reasoner methods
        message = AgentMessage(
            sender_id="test_sender",
            recipient_id="test_research_agent",
            content={
                "topic": "test_topic",
                "depth": 2,
                "use_reasoner": True
            },
            timestamp=time.time(),
            message_type="research_request"
        )
>       response = await research_agent.process_message(message)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_research_agent.py:260: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <agents.core.research_agent.ResearchAgent object at 0x144059a10>
message = <agents.core.base_agent.AgentMessage object at 0x1440588d0>

    async def process_message(self, message: AgentMessage) -> AgentMessage:
        """Process an incoming message and return a response.
    
        Args:
            message: The message to process.
    
        Returns:
            AgentMessage: The response message.
    
        Raises:
            RuntimeError: If the agent is not initialized.
        """
        if not self._is_initialized:
>           raise RuntimeError("Agent not initialized. Call initialize() first.")
E           RuntimeError: Agent not initialized. Call initialize() first.

agents/core/base_agent.py:257: RuntimeError
______________________ test_research_findings_persistence ______________________

research_agent = <agents.core.research_agent.ResearchAgent object at 0x1440e36d0>

    @pytest.mark.asyncio
    async def test_research_findings_persistence(research_agent):
        """Test persistence of research findings."""
        # First research request
        message1 = AgentMessage(
            sender_id="test_sender",
            recipient_id="test_research_agent",
            content={
                "topic": "test_topic",
                "depth": 2
            },
            timestamp=time.time(),
            message_type="research_request"
        )
>       await research_agent.process_message(message1)

tests/test_research_agent.py:284: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <agents.core.research_agent.ResearchAgent object at 0x1440e36d0>
message = <agents.core.base_agent.AgentMessage object at 0x1440e1950>

    async def process_message(self, message: AgentMessage) -> AgentMessage:
        """Process an incoming message and return a response.
    
        Args:
            message: The message to process.
    
        Returns:
            AgentMessage: The response message.
    
        Raises:
            RuntimeError: If the agent is not initialized.
        """
        if not self._is_initialized:
>           raise RuntimeError("Agent not initialized. Call initialize() first.")
E           RuntimeError: Agent not initialized. Call initialize() first.

agents/core/base_agent.py:257: RuntimeError
_______________________________ test_credentials _______________________________
Expected None, but test returned True. Did you mean to use `assert` instead of `return`?
------------------------------ Captured log call -------------------------------
WARNING  tests.test_vertex_auth:test_vertex_auth.py:87 File permissions should be 600, got 644
__________________________ test_vertex_initialization __________________________
Expected None, but test returned True. Did you mean to use `assert` instead of `return`?
______________________________ test_model_access _______________________________
Expected None, but test returned False. Did you mean to use `assert` instead of `return`?
------------------------------ Captured log call -------------------------------
ERROR    tests.test_vertex_auth:test_vertex_auth.py:130 Model access test failed: 404 Publisher Model `projects/baa-roo/locations/us-central1/publishers/google/models/text-bison@002` was not found or your project does not have access to it. Please ensure you are using a valid model version. For more information, see: https://cloud.google.com/vertex-ai/generative-ai/docs/learn/model-versions
__________________________ test_vertex_initialization __________________________
Expected None, but test returned True. Did you mean to use `assert` instead of `return`?
__________________________ test_invalid_message_type ___________________________

vertex_agent = <agents.domain.vertex_email_agent.VertexEmailAgent object at 0x142d81150>

    @pytest.mark.asyncio
    async def test_invalid_message_type(vertex_agent):
        """Test handling of invalid message types."""
        message = AgentMessage(
            sender_id="test_sender",
            recipient_id="vertex_email_agent",
            content={"invalid": "content"},
            message_type="invalid_type",
            timestamp=datetime.now().timestamp()
        )
    
        response = await vertex_agent.process_message(message)
        assert response is not None
>       assert response.content.get("status") == "error"
E       assert None == 'error'
E        +  where None = <built-in method get of dict object at 0x142c4b780>('status')
E        +    where <built-in method get of dict object at 0x142c4b780> = {'message': "Agent vertex_email_agent processed: {'invalid': 'content'}"}.get
E        +      where {'message': "Agent vertex_email_agent processed: {'invalid': 'content'}"} = AgentMessage(message_id='8fa75d27-f161-4209-bbd8-e7a26cdf228a', sender_id='vertex_email_agent', recipient_id='test_sender', content={'message': "Agent vertex_email_agent processed: {'invalid': 'content'}"}, message_type='invalid_type', timestamp=datetime.datetime(2025, 6, 9, 21, 23, 40, 689336), metadata=None).content

tests/test_vertex_integration.py:94: AssertionError
_______________________ test_knowledge_graph_integration _______________________

vertex_agent = <agents.domain.vertex_email_agent.VertexEmailAgent object at 0x142db12d0>

    @pytest.mark.asyncio
    async def test_knowledge_graph_integration(vertex_agent):
        """Test integration with knowledge graph."""
        message = AgentMessage(
            sender_id="test_sender",
            recipient_id="vertex_email_agent",
            content={
                "recipient": "test@example.com",
                "subject": "Test Subject",
                "body": "Test Body"
            },
            message_type="send_email",
            timestamp=datetime.now().timestamp()
        )
    
        response = await vertex_agent.process_message(message)
        assert response is not None
>       assert "knowledge_graph" in response.content
E       AssertionError: assert 'knowledge_graph' in {'status': 'sent', 'recipient': 'test@example.com', 'subject': 'Test Subject', 'body': 'Test Body'}
E        +  where {'status': 'sent', 'recipient': 'test@example.com', 'subject': 'Test Subject', 'body': 'Test Body'} = AgentMessage(message_id='2ecd29e9-270e-45be-9a0f-15e4274da029', sender_id='vertex_email_agent', recipient_id='test_sender', content={'status': 'sent', 'recipient': 'test@example.com', 'subject': 'Test Subject', 'body': 'Test Body'}, message_type='send_email_response', timestamp=datetime.datetime(2025, 6, 9, 21, 23, 40, 694934), metadata=None).content

tests/test_vertex_integration.py:113: AssertionError
_____________________________ test_error_handling ______________________________

vertex_agent = <agents.domain.vertex_email_agent.VertexEmailAgent object at 0x142db1ed0>

    @pytest.mark.asyncio
    async def test_error_handling(vertex_agent):
        """Test error handling in various scenarios."""
        # Test with invalid email address
        message = AgentMessage(
            sender_id="test_sender",
            recipient_id="vertex_email_agent",
            content={
                "recipient": "invalid-email",
                "subject": "Test Subject",
                "body": "Test Body"
            },
            message_type="send_email",
            timestamp=datetime.now().timestamp()
        )
    
        response = await vertex_agent.process_message(message)
        assert response is not None
>       assert response.content.get("status") == "error"
E       AssertionError: assert 'sent' == 'error'
E         
E         - error
E         + sent

tests/test_vertex_integration.py:133: AssertionError
_________________________ test_empty_subject_and_body __________________________

vertex_agent = <agents.domain.vertex_email_agent.VertexEmailAgent object at 0x142d7b010>

    @pytest.mark.asyncio
    async def test_empty_subject_and_body(vertex_agent):
        """Test handling of empty subject and body."""
        message = AgentMessage(
            sender_id="test_sender",
            recipient_id="vertex_email_agent",
            content={
                "recipient": "test@example.com",
                "subject": "",
                "body": ""
            },
            message_type="send_email",
            timestamp=datetime.now().timestamp()
        )
    
        response = await vertex_agent.process_message(message)
        assert response is not None
>       assert response.content.get("status") == "error"
E       AssertionError: assert 'sent' == 'error'
E         
E         - error
E         + sent

tests/test_vertex_integration.py:152: AssertionError
_______________________________ test_credentials _______________________________
Expected None, but test returned True. Did you mean to use `assert` instead of `return`?
______________________________ test_model_access _______________________________
Expected None, but test returned True. Did you mean to use `assert` instead of `return`?
____________________________ test_workflow_creation ____________________________

workflow_manager = <agents.core.workflow_manager.WorkflowManager object at 0x142cabc10>

    @pytest.mark.asyncio
    async def test_workflow_creation(workflow_manager):
        # Create a test workflow
        workflow = Workflow(
            workflow_id="test_workflow",
            name="Test Workflow",
            description="Test workflow for unit tests",
            required_capabilities={
                Capability(CapabilityType.TASK_EXECUTION, "1.0"),
>               Capability(CapabilityType.MONITORING, "1.0")
                           ^^^^^^^^^^^^^^^^^^^^^^^^^
            }
        )

tests/test_workflow_manager.py:112: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <enum 'CapabilityType'>, name = 'MONITORING'

    def __getattr__(cls, name):
        """
        Return the enum member matching `name`
    
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        if _is_dunder(name):
            raise AttributeError(name)
        try:
            return cls._member_map_[name]
        except KeyError:
>           raise AttributeError(name) from None
E           AttributeError: MONITORING

/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/enum.py:784: AttributeError
____________________________ test_workflow_assembly ____________________________

workflow_manager = <agents.core.workflow_manager.WorkflowManager object at 0x142c60410>
registry = <agents.core.agent_registry.AgentRegistry object at 0x142e04c90>

    @pytest.mark.asyncio
    async def test_workflow_assembly(workflow_manager, registry):
        """Test workflow assembly."""
        # Create agent with required capability
        agent = TestAgent("agent1", capabilities={Capability(CapabilityType.RESEARCH, "1.0")})
        await agent.initialize()
        agent_capabilities = await agent.get_capabilities()
        await registry.register_agent(agent, agent_capabilities)
    
        # Create workflow
>       workflow_id = await workflow_manager.create_workflow(
            name="Test Workflow",
            description="Test workflow description",
            required_capabilities={Capability(CapabilityType.RESEARCH, "1.0")}
        )

tests/test_workflow_manager.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
agents/core/workflow_manager.py:123: in create_workflow
    await self.persistence.save_workflow(workflow)
agents/core/workflow_persistence.py:37: in save_workflow
    json.dump(workflow_data, f)
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/__init__.py:179: in dump
    for chunk in iterable:
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:432: in _iterencode
    yield from _iterencode_dict(o, _current_indent_level)
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:406: in _iterencode_dict
    yield from chunks
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:406: in _iterencode_dict
    yield from chunks
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:326: in _iterencode_list
    yield from chunks
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:439: in _iterencode
    o = _default(o)
        ^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.encoder.JSONEncoder object at 0x105703890>
o = Capability(type=research, version=1.0, parameters={}, metadata={})

    def default(self, o):
        """Implement this method in a subclass such that it returns
        a serializable object for ``o``, or calls the base implementation
        (to raise a ``TypeError``).
    
        For example, to support arbitrary iterators, you could
        implement default like this::
    
            def default(self, o):
                try:
                    iterable = iter(o)
                except TypeError:
                    pass
                else:
                    return list(iterable)
                # Let the base class default method raise the TypeError
                return JSONEncoder.default(self, o)
    
        """
>       raise TypeError(f'Object of type {o.__class__.__name__} '
                        f'is not JSON serializable')
E       TypeError: Object of type Capability is not JSON serializable

/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:180: TypeError
___________________________ test_workflow_validation ___________________________

workflow_manager = <agents.core.workflow_manager.WorkflowManager object at 0x142ffcd50>

    @pytest.mark.asyncio
    async def test_workflow_validation(workflow_manager):
        """Test workflow validation."""
        workflow_id = await workflow_manager.create_workflow(
            name="Invalid Workflow",
            description="Workflow with missing capabilities",
            required_capabilities=["nonexistent_capability"]
        )
    
        validation = await workflow_manager.validate_workflow(workflow_id)
>       assert not validation["valid"]
                   ^^^^^^^^^^^^^^^^^^^
E       KeyError: 'valid'

tests/test_workflow_manager.py:219: KeyError
_____________________________ test_load_balancing ______________________________

workflow_manager = <agents.core.workflow_manager.WorkflowManager object at 0x142c65990>
registry = <agents.core.agent_registry.AgentRegistry object at 0x142d88a50>
test_capabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={}), Capability(type=data_processing, version=1...sor_data, version=1.0, parameters={}, metadata={}), Capability(type=research, version=1.0, parameters={}, metadata={})}

    @pytest.mark.asyncio
    async def test_load_balancing(workflow_manager, registry, test_capabilities):
        # Create multiple agents with same capability
        agent1 = TestAgent("agent1", capabilities={next(iter(test_capabilities))})
        agent2 = TestAgent("agent2", capabilities={next(iter(test_capabilities))})
        agent3 = TestAgent("agent3", capabilities={next(iter(test_capabilities))})
    
        # Initialize agents before registration
        await agent1.initialize()
        await agent2.initialize()
        await agent3.initialize()
    
        # Get capabilities after initialization
        agent1_capabilities = await agent1.get_capabilities()
        agent2_capabilities = await agent2.get_capabilities()
        agent3_capabilities = await agent3.get_capabilities()
    
        await registry.register_agent(agent1, agent1_capabilities)
        await registry.register_agent(agent2, agent2_capabilities)
        await registry.register_agent(agent3, agent3_capabilities)
    
        # Create workflow with multiple agents per capability
>       workflow_id = await workflow_manager.create_workflow(
            name="Test Workflow",
            description="Test workflow description",
            required_capabilities={next(iter(test_capabilities))},
            max_agents_per_capability=2
        )

tests/test_workflow_manager.py:244: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
agents/core/workflow_manager.py:123: in create_workflow
    await self.persistence.save_workflow(workflow)
agents/core/workflow_persistence.py:37: in save_workflow
    json.dump(workflow_data, f)
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/__init__.py:179: in dump
    for chunk in iterable:
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:432: in _iterencode
    yield from _iterencode_dict(o, _current_indent_level)
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:406: in _iterencode_dict
    yield from chunks
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:406: in _iterencode_dict
    yield from chunks
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:326: in _iterencode_list
    yield from chunks
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:439: in _iterencode
    o = _default(o)
        ^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.encoder.JSONEncoder object at 0x105703890>
o = Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})

    def default(self, o):
        """Implement this method in a subclass such that it returns
        a serializable object for ``o``, or calls the base implementation
        (to raise a ``TypeError``).
    
        For example, to support arbitrary iterators, you could
        implement default like this::
    
            def default(self, o):
                try:
                    iterable = iter(o)
                except TypeError:
                    pass
                else:
                    return list(iterable)
                # Let the base class default method raise the TypeError
                return JSONEncoder.default(self, o)
    
        """
>       raise TypeError(f'Object of type {o.__class__.__name__} '
                        f'is not JSON serializable')
E       TypeError: Object of type Capability is not JSON serializable

/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:180: TypeError
____________________________ test_workflow_metrics _____________________________

workflow_manager = <agents.core.workflow_manager.WorkflowManager object at 0x1441aa8d0>
registry = <agents.core.agent_registry.AgentRegistry object at 0x1441c8fd0>
test_capabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={}), Capability(type=data_processing, version=1...sor_data, version=1.0, parameters={}, metadata={}), Capability(type=research, version=1.0, parameters={}, metadata={})}

    @pytest.mark.asyncio
    async def test_workflow_metrics(workflow_manager, registry, test_capabilities):
        # Create agent and workflow
        agent = TestAgent("agent1", capabilities=test_capabilities)
        await agent.initialize()  # Initialize before registration
        agent_capabilities = await agent.get_capabilities()
        await registry.register_agent(agent, agent_capabilities)
    
        # Create workflow
>       workflow_id = await workflow_manager.create_workflow(
            name="Test Workflow",
            description="Test workflow description",
            required_capabilities=test_capabilities,
            max_agents_per_capability=1
        )

tests/test_workflow_manager.py:268: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
agents/core/workflow_manager.py:123: in create_workflow
    await self.persistence.save_workflow(workflow)
agents/core/workflow_persistence.py:37: in save_workflow
    json.dump(workflow_data, f)
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/__init__.py:179: in dump
    for chunk in iterable:
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:432: in _iterencode
    yield from _iterencode_dict(o, _current_indent_level)
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:406: in _iterencode_dict
    yield from chunks
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:406: in _iterencode_dict
    yield from chunks
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:326: in _iterencode_list
    yield from chunks
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:439: in _iterencode
    o = _default(o)
        ^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.encoder.JSONEncoder object at 0x105703890>
o = Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})

    def default(self, o):
        """Implement this method in a subclass such that it returns
        a serializable object for ``o``, or calls the base implementation
        (to raise a ``TypeError``).
    
        For example, to support arbitrary iterators, you could
        implement default like this::
    
            def default(self, o):
                try:
                    iterable = iter(o)
                except TypeError:
                    pass
                else:
                    return list(iterable)
                # Let the base class default method raise the TypeError
                return JSONEncoder.default(self, o)
    
        """
>       raise TypeError(f'Object of type {o.__class__.__name__} '
                        f'is not JSON serializable')
E       TypeError: Object of type Capability is not JSON serializable

/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:180: TypeError
_______________________ test_registry_state_consistency ________________________

workflow_manager = <agents.core.workflow_manager.WorkflowManager object at 0x142c97710>
registry = <agents.core.agent_registry.AgentRegistry object at 0x14401cf50>

    @pytest.mark.asyncio
    async def test_registry_state_consistency(workflow_manager, registry):
        """Test that registry state remains consistent across workflow operations."""
        # Register initial agents
        agent1 = ResearchTestAgent(agent_id="research_1")
        agent2 = ResearchTestAgent(agent_id="research_2")
    
        await agent1.initialize()  # Initialize before registration
        await agent2.initialize()  # Initialize before registration
    
        agent1_capabilities = await agent1.get_capabilities()
        agent2_capabilities = await agent2.get_capabilities()
    
        await registry.register_agent(agent1, agent1_capabilities)
        await registry.register_agent(agent2, agent2_capabilities)
    
        # Create workflow
>       workflow_id = await workflow_manager.create_workflow(
            name="Test Workflow",
            description="Test workflow description",
            required_capabilities={Capability(CapabilityType.RESEARCH, "1.0")}
        )

tests/test_workflow_manager.py:304: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
agents/core/workflow_manager.py:123: in create_workflow
    await self.persistence.save_workflow(workflow)
agents/core/workflow_persistence.py:37: in save_workflow
    json.dump(workflow_data, f)
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/__init__.py:179: in dump
    for chunk in iterable:
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:432: in _iterencode
    yield from _iterencode_dict(o, _current_indent_level)
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:406: in _iterencode_dict
    yield from chunks
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:406: in _iterencode_dict
    yield from chunks
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:326: in _iterencode_list
    yield from chunks
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:439: in _iterencode
    o = _default(o)
        ^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.encoder.JSONEncoder object at 0x105703890>
o = Capability(type=research, version=1.0, parameters={}, metadata={})

    def default(self, o):
        """Implement this method in a subclass such that it returns
        a serializable object for ``o``, or calls the base implementation
        (to raise a ``TypeError``).
    
        For example, to support arbitrary iterators, you could
        implement default like this::
    
            def default(self, o):
                try:
                    iterable = iter(o)
                except TypeError:
                    pass
                else:
                    return list(iterable)
                # Let the base class default method raise the TypeError
                return JSONEncoder.default(self, o)
    
        """
>       raise TypeError(f'Object of type {o.__class__.__name__} '
                        f'is not JSON serializable')
E       TypeError: Object of type Capability is not JSON serializable

/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:180: TypeError
__________________ test_concurrent_registration_and_assembly ___________________

workflow_manager = <agents.core.workflow_manager.WorkflowManager object at 0x141c5f6d0>
registry = <agents.core.agent_registry.AgentRegistry object at 0x14402f690>

    @pytest.mark.asyncio
    async def test_concurrent_registration_and_assembly(workflow_manager, registry):
        """Test handling of concurrent agent registration and workflow assembly."""
        # Create workflow first
>       workflow_id = await workflow_manager.create_workflow(
            name="Concurrent Test",
            description="Test concurrent registration and assembly",
            required_capabilities={Capability(CapabilityType.RESEARCH, "1.0")}
        )

tests/test_workflow_manager.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
agents/core/workflow_manager.py:123: in create_workflow
    await self.persistence.save_workflow(workflow)
agents/core/workflow_persistence.py:37: in save_workflow
    json.dump(workflow_data, f)
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/__init__.py:179: in dump
    for chunk in iterable:
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:432: in _iterencode
    yield from _iterencode_dict(o, _current_indent_level)
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:406: in _iterencode_dict
    yield from chunks
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:406: in _iterencode_dict
    yield from chunks
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:326: in _iterencode_list
    yield from chunks
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:439: in _iterencode
    o = _default(o)
        ^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.encoder.JSONEncoder object at 0x105703890>
o = Capability(type=research, version=1.0, parameters={}, metadata={})

    def default(self, o):
        """Implement this method in a subclass such that it returns
        a serializable object for ``o``, or calls the base implementation
        (to raise a ``TypeError``).
    
        For example, to support arbitrary iterators, you could
        implement default like this::
    
            def default(self, o):
                try:
                    iterable = iter(o)
                except TypeError:
                    pass
                else:
                    return list(iterable)
                # Let the base class default method raise the TypeError
                return JSONEncoder.default(self, o)
    
        """
>       raise TypeError(f'Object of type {o.__class__.__name__} '
                        f'is not JSON serializable')
E       TypeError: Object of type Capability is not JSON serializable

/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:180: TypeError
____________________________ test_registry_recovery ____________________________

workflow_manager = <agents.core.workflow_manager.WorkflowManager object at 0x14421af10>
registry = <agents.core.agent_registry.AgentRegistry object at 0x142de2350>

    @pytest.mark.asyncio
    async def test_registry_recovery(workflow_manager, registry):
        """Test registry recovery after agent failures."""
        # Register agents
        agent1 = ResearchTestAgent(agent_id="research_1")
        agent2 = ResearchTestAgent(agent_id="research_2")
    
        await agent1.initialize()  # Initialize before registration
        await agent2.initialize()  # Initialize before registration
    
        agent1_capabilities = await agent1.get_capabilities()
        agent2_capabilities = await agent2.get_capabilities()
    
        await registry.register_agent(agent1, agent1_capabilities)
        await registry.register_agent(agent2, agent2_capabilities)
    
        # Create workflow
>       workflow_id = await workflow_manager.create_workflow(
            name="Test Workflow",
            description="Test workflow description",
            required_capabilities={Capability(CapabilityType.RESEARCH, "1.0")}
        )

tests/test_workflow_manager.py:360: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
agents/core/workflow_manager.py:123: in create_workflow
    await self.persistence.save_workflow(workflow)
agents/core/workflow_persistence.py:37: in save_workflow
    json.dump(workflow_data, f)
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/__init__.py:179: in dump
    for chunk in iterable:
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:432: in _iterencode
    yield from _iterencode_dict(o, _current_indent_level)
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:406: in _iterencode_dict
    yield from chunks
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:406: in _iterencode_dict
    yield from chunks
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:326: in _iterencode_list
    yield from chunks
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:439: in _iterencode
    o = _default(o)
        ^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.encoder.JSONEncoder object at 0x105703890>
o = Capability(type=research, version=1.0, parameters={}, metadata={})

    def default(self, o):
        """Implement this method in a subclass such that it returns
        a serializable object for ``o``, or calls the base implementation
        (to raise a ``TypeError``).
    
        For example, to support arbitrary iterators, you could
        implement default like this::
    
            def default(self, o):
                try:
                    iterable = iter(o)
                except TypeError:
                    pass
                else:
                    return list(iterable)
                # Let the base class default method raise the TypeError
                return JSONEncoder.default(self, o)
    
        """
>       raise TypeError(f'Object of type {o.__class__.__name__} '
                        f'is not JSON serializable')
E       TypeError: Object of type Capability is not JSON serializable

/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:180: TypeError
__________________________ test_capability_conflicts ___________________________

workflow_manager = <agents.core.workflow_manager.WorkflowManager object at 0x1441a83d0>
registry = <agents.core.agent_registry.AgentRegistry object at 0x142c2a5d0>

    @pytest.mark.asyncio
    async def test_capability_conflicts(workflow_manager, registry):
        """Test handling of conflicting capabilities between agents."""
        # Create agents with overlapping capabilities
        agent1 = TestAgent(
            agent_id="agent_1",
            agent_type="multi_capability",
            capabilities={
                Capability(CapabilityType.CAP_A, "1.0"),
                Capability(CapabilityType.CAP_B, "1.0")
            }
        )
        agent2 = TestAgent(
            agent_id="agent_2",
            agent_type="multi_capability",
            capabilities={
                Capability(CapabilityType.CAP_B, "1.0"),
                Capability(CapabilityType.CAP_C, "1.0")
            }
        )
    
        # Initialize agents before registration
        await agent1.initialize()
        await agent2.initialize()
    
        agent1_capabilities = await agent1.get_capabilities()
        agent2_capabilities = await agent2.get_capabilities()
    
        await registry.register_agent(agent1, agent1_capabilities)
        await registry.register_agent(agent2, agent2_capabilities)
    
        # Create workflow
>       workflow_id = await workflow_manager.create_workflow(
            name="Test Workflow",
            description="Test workflow description",
            required_capabilities={
                Capability(CapabilityType.CAP_A, "1.0"),
                Capability(CapabilityType.CAP_B, "1.0"),
                Capability(CapabilityType.CAP_C, "1.0")
            }
        )

tests/test_workflow_manager.py:405: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
agents/core/workflow_manager.py:123: in create_workflow
    await self.persistence.save_workflow(workflow)
agents/core/workflow_persistence.py:37: in save_workflow
    json.dump(workflow_data, f)
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/__init__.py:179: in dump
    for chunk in iterable:
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:432: in _iterencode
    yield from _iterencode_dict(o, _current_indent_level)
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:406: in _iterencode_dict
    yield from chunks
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:406: in _iterencode_dict
    yield from chunks
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:326: in _iterencode_list
    yield from chunks
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:439: in _iterencode
    o = _default(o)
        ^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.encoder.JSONEncoder object at 0x105703890>
o = Capability(type=cap_a, version=1.0, parameters={}, metadata={})

    def default(self, o):
        """Implement this method in a subclass such that it returns
        a serializable object for ``o``, or calls the base implementation
        (to raise a ``TypeError``).
    
        For example, to support arbitrary iterators, you could
        implement default like this::
    
            def default(self, o):
                try:
                    iterable = iter(o)
                except TypeError:
                    pass
                else:
                    return list(iterable)
                # Let the base class default method raise the TypeError
                return JSONEncoder.default(self, o)
    
        """
>       raise TypeError(f'Object of type {o.__class__.__name__} '
                        f'is not JSON serializable')
E       TypeError: Object of type Capability is not JSON serializable

/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:180: TypeError
__________________________ test_registry_persistence ___________________________

workflow_manager = <agents.core.workflow_manager.WorkflowManager object at 0x144058110>
registry = <agents.core.agent_registry.AgentRegistry object at 0x142df4d50>

    @pytest.mark.asyncio
    async def test_registry_persistence(workflow_manager, registry):
        """Test registry persistence across workflow operations."""
        # Register agents
        agent1 = ResearchTestAgent(agent_id="research_1")
        agent2 = DataProcessorTestAgent(agent_id="processor_1")
    
        await agent1.initialize()  # Initialize before registration
        await agent2.initialize()  # Initialize before registration
    
        agent1_capabilities = await agent1.get_capabilities()
        agent2_capabilities = await agent2.get_capabilities()
    
        await registry.register_agent(agent1, agent1_capabilities)
        await registry.register_agent(agent2, agent2_capabilities)
    
        # Create workflow
>       workflow_id = await workflow_manager.create_workflow(
            name="Test Workflow",
            description="Test workflow description",
            required_capabilities={
                Capability(CapabilityType.RESEARCH, "1.0"),
                Capability(CapabilityType.DATA_PROCESSING, "1.0")
            }
        )

tests/test_workflow_manager.py:439: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
agents/core/workflow_manager.py:123: in create_workflow
    await self.persistence.save_workflow(workflow)
agents/core/workflow_persistence.py:37: in save_workflow
    json.dump(workflow_data, f)
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/__init__.py:179: in dump
    for chunk in iterable:
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:432: in _iterencode
    yield from _iterencode_dict(o, _current_indent_level)
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:406: in _iterencode_dict
    yield from chunks
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:406: in _iterencode_dict
    yield from chunks
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:326: in _iterencode_list
    yield from chunks
/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:439: in _iterencode
    o = _default(o)
        ^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.encoder.JSONEncoder object at 0x105703890>
o = Capability(type=data_processing, version=1.0, parameters={}, metadata={})

    def default(self, o):
        """Implement this method in a subclass such that it returns
        a serializable object for ``o``, or calls the base implementation
        (to raise a ``TypeError``).
    
        For example, to support arbitrary iterators, you could
        implement default like this::
    
            def default(self, o):
                try:
                    iterable = iter(o)
                except TypeError:
                    pass
                else:
                    return list(iterable)
                # Let the base class default method raise the TypeError
                return JSONEncoder.default(self, o)
    
        """
>       raise TypeError(f'Object of type {o.__class__.__name__} '
                        f'is not JSON serializable')
E       TypeError: Object of type Capability is not JSON serializable

/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/json/encoder.py:180: TypeError
__________________________ test_transaction_atomicity __________________________

workflow_manager = <agents.core.workflow_manager.WorkflowManager object at 0x1440e0e10>
agent_registry = <agents.core.agent_registry.AgentRegistry object at 0x144272590>
test_capabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={}), Capability(type=data_processing, version=1...sor_data, version=1.0, parameters={}, metadata={}), Capability(type=research, version=1.0, parameters={}, metadata={})}

    @pytest.mark.asyncio
    async def test_transaction_atomicity(workflow_manager, agent_registry, test_capabilities):
        """Test that transactions are atomic."""
        # Create a workflow
>       workflow_id = await workflow_manager.create_workflow(
            name="Test Workflow",
            required_capabilities=test_capabilities,
            load_balancing_strategy="round_robin"
        )
E       TypeError: WorkflowManager.create_workflow() missing 1 required positional argument: 'description'

tests/test_workflow_manager.py:614: TypeError
_______________________________ test_retry_logic _______________________________

workflow_manager = <agents.core.workflow_manager.WorkflowManager object at 0x142d8a850>
agent_registry = <agents.core.agent_registry.AgentRegistry object at 0x14407fe50>
test_capabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={}), Capability(type=data_processing, version=1...sor_data, version=1.0, parameters={}, metadata={}), Capability(type=research, version=1.0, parameters={}, metadata={})}

    @pytest.mark.asyncio
    async def test_retry_logic(workflow_manager, agent_registry, test_capabilities):
        """Test that retry logic works correctly."""
        # Create a workflow
>       workflow_id = await workflow_manager.create_workflow(
            name="Test Workflow",
            required_capabilities=test_capabilities,
            load_balancing_strategy="round_robin"
        )
E       TypeError: WorkflowManager.create_workflow() missing 1 required positional argument: 'description'

tests/test_workflow_manager.py:637: TypeError
_________________________ test_concurrent_transactions _________________________

workflow_manager = <agents.core.workflow_manager.WorkflowManager object at 0x14281ead0>
agent_registry = <agents.core.agent_registry.AgentRegistry object at 0x14289ad10>
test_capabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={}), Capability(type=data_processing, version=1...sor_data, version=1.0, parameters={}, metadata={}), Capability(type=research, version=1.0, parameters={}, metadata={})}

    @pytest.mark.asyncio
    async def test_concurrent_transactions(workflow_manager, agent_registry, test_capabilities):
        """Test that concurrent transactions are handled correctly."""
        # Create multiple workflows
        workflow_ids = []
        for i in range(3):
>           workflow_id = await workflow_manager.create_workflow(
                name=f"Test Workflow {i}",
                required_capabilities=test_capabilities,
                load_balancing_strategy="round_robin"
            )
E           TypeError: WorkflowManager.create_workflow() missing 1 required positional argument: 'description'

tests/test_workflow_manager.py:662: TypeError
___________________________ test_transaction_timeout ___________________________

workflow_manager = <agents.core.workflow_manager.WorkflowManager object at 0x144213890>
agent_registry = <agents.core.agent_registry.AgentRegistry object at 0x142d50490>
test_capabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={}), Capability(type=data_processing, version=1...sor_data, version=1.0, parameters={}, metadata={}), Capability(type=research, version=1.0, parameters={}, metadata={})}

    @pytest.mark.asyncio
    async def test_transaction_timeout(workflow_manager, agent_registry, test_capabilities):
        """Test that transactions timeout correctly."""
        # Create a workflow
>       workflow_id = await workflow_manager.create_workflow(
            name="Test Workflow",
            required_capabilities=test_capabilities,
            load_balancing_strategy="round_robin"
        )
E       TypeError: WorkflowManager.create_workflow() missing 1 required positional argument: 'description'

tests/test_workflow_manager.py:693: TypeError
_____________________ test_workflow_persistence_versioning _____________________

persistence = <agents.core.workflow_persistence.WorkflowPersistence object at 0x142c43390>

    @pytest.mark.asyncio
    async def test_workflow_persistence_versioning(persistence):
        """Test workflow versioning functionality."""
        # Create initial workflow
        workflow = {
            "id": "test-workflow-2",
            "name": "Test Workflow",
            "description": "Test workflow for versioning",
            "required_capabilities": ["test_capability"],
            "state": "created",
            "created_at": time.time(),
            "updated_at": time.time(),
            "agents": [],
            "results": [],
            "version": "1.0"
        }
    
        # Save initial version
        await persistence.save_workflow(workflow)
    
        # Update workflow
        workflow["state"] = "updated"
        workflow["version"] = "1.1"
        workflow["updated_at"] = time.time()
    
        # Save updated version
        await persistence.save_workflow(workflow)
    
        # Get version history
        history = await persistence.get_workflow_history("test-workflow-2")
    
        # Verify version history (oldest first)
>       assert len(history) == 2
E       assert 0 == 2
E        +  where 0 = len([])

tests/test_workflow_persistence.py:103: AssertionError
______________________ test_workflow_persistence_recovery ______________________

persistence = <agents.core.workflow_persistence.WorkflowPersistence object at 0x142df1b50>

    @pytest.mark.asyncio
    async def test_workflow_persistence_recovery(persistence):
        """Test workflow recovery functionality."""
        # Create test workflow
        workflow = {
            "id": "test-workflow-3",
            "name": "Test Workflow",
            "description": "Test workflow for recovery",
            "required_capabilities": ["test_capability"],
            "state": "created",
            "created_at": time.time(),
            "updated_at": time.time(),
            "agents": [],
            "results": [],
            "version": "1.0"
        }
    
        # Save initial version
        await persistence.save_workflow(workflow)
    
        # Update workflow
        workflow["state"] = "updated"
        workflow["version"] = "1.1"
        workflow["updated_at"] = time.time()
    
        # Save updated version
        await persistence.save_workflow(workflow)
    
        # Recover to initial version
>       recovered_workflow = await persistence.recover_workflow("test-workflow-3", "1.0")
                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_workflow_persistence.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <agents.core.workflow_persistence.WorkflowPersistence object at 0x142df1b50>
workflow_id = 'test-workflow-3', version = '1.0'

    async def recover_workflow(self, workflow_id: str, version: Optional[str] = None) -> Dict[str, Any]:
        """Recover a workflow to a specific version."""
        workflow = await self.load_workflow(workflow_id)
        if not workflow:
            raise ValueError(f"Workflow {workflow_id} not found")
    
        # Add recovery metadata
>       workflow["metadata"]["recovered_at"] = datetime.now().isoformat()
        ^^^^^^^^^^^^^^^^^^^^
E       KeyError: 'metadata'

agents/core/workflow_persistence.py:146: KeyError
___________________________ test_workflow_monitoring ___________________________

monitor = <agents.core.workflow_monitor.WorkflowMonitor object at 0x142c2bd10>

    @pytest.mark.asyncio
    async def test_workflow_monitoring(monitor):
        """Test workflow monitoring functionality."""
        workflow_id = "test-workflow-4"
    
        # Track initial metrics
        await monitor.track_workflow_metrics(workflow_id, {
            "state": "created",
            "response_time": 0.0
        })
    
        # Track execution metrics
        await monitor.track_workflow_metrics(workflow_id, {
            "state": "executing",
            "response_time": 1.5,
            "resource_usage": {
                "cpu": 0.5,
                "memory": 0.3
            }
        })
    
        # Get metrics
        metrics = await monitor.get_workflow_metrics(workflow_id)
    
        # Verify metrics: check last state in state_changes
        assert metrics["state_changes"][-1]["state"] == "executing"
        assert metrics["response_times"][-1] == 1.5
>       assert metrics["resource_usage"]["cpu"][-1]["usage"] == 0.5
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: 'float' object is not subscriptable

tests/test_workflow_persistence.py:169: TypeError
______________________ test_workflow_manager_integration _______________________

workflow_manager = <agents.core.workflow_manager.WorkflowManager object at 0x142d46a50>

    @pytest.mark.asyncio
    async def test_workflow_manager_integration(workflow_manager):
        """Test integration of persistence and monitoring in WorkflowManager."""
        # Create workflow
        workflow_id = await workflow_manager.create_workflow(
            name="Test Workflow",
            description="Test workflow for integration",
            required_capabilities=["test_capability"]
        )
    
        # Assemble workflow
        assembly_result = await workflow_manager.assemble_workflow(workflow_id)
>       assert assembly_result["status"] == "error"  # No agents available
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AssertionError: assert <WorkflowStatus.ASSEMBLED: 'assembled'> == 'error'
E         
E         - error
E         + assembled

tests/test_workflow_persistence.py:207: AssertionError
________________________ test_test_agent_initialization ________________________

    @pytest.mark.asyncio
    async def test_test_agent_initialization():
        agent = TestAgent(agent_id="test_agent", agent_type="test", capabilities=[], default_response={})
        await agent.initialize()
        assert agent.agent_id == "test_agent"
        assert agent.agent_type == "test"
        capabilities = await agent.get_capabilities()
        assert isinstance(capabilities, CapabilitySet)
>       assert len(capabilities) == 2  # Default capabilities
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       assert 1 == 2
E        +  where 1 = len(CapabilitySet(capabilities={Capability(type=message_processing, version=1.0, parameters={}, metadata={})}))

tests/unit/test_test_agents.py:15: AssertionError
_______________________ test_test_agent_process_message ________________________

    @pytest.mark.asyncio
    async def test_test_agent_process_message():
        agent = TestAgent(agent_id="test_agent", agent_type="test", capabilities=[], default_response={"status": "success"})
        await agent.initialize()
        message = {
            "sender_id": "sender",
            "recipient_id": "test_agent",
            "content": "Hello",
            "timestamp": datetime.fromisoformat("2023-01-01T00:00:00"),
            "message_type": "request"
        }
>       response = await agent.process_message(message)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/unit/test_test_agents.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tests.utils.test_agents.TestAgent object at 0x142d787d0>
message = {'content': 'Hello', 'message_type': 'request', 'recipient_id': 'test_agent', 'sender_id': 'sender', ...}

    async def process_message(self, message: AgentMessage) -> AgentMessage:
        """Process a message."""
        if not self._initialized:
            raise RuntimeError("Agent not initialized. Call initialize() first.")
    
        # Add message to history
        self._message_history.append(message)
    
        # Return default response
        return AgentMessage(
            sender_id=self.agent_id,
>           recipient_id=message.sender_id,
                         ^^^^^^^^^^^^^^^^^
            content=self._default_response or {"status": "success"},
            message_type="response",
            timestamp=datetime.now()
        )
E       AttributeError: 'dict' object has no attribute 'sender_id'

tests/utils/test_agents.py:143: AttributeError
=============================== warnings summary ===============================
agents/core/message_types.py:81
  /Users/nicholasbaro/Python/semant/agents/core/message_types.py:81: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    @validator('timestamp', pre=True)

venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323: 1 warning
tests/test_agent_integrator.py: 8 warnings
tests/test_agent_recovery.py: 14 warnings
tests/test_capability_handling.py: 3 warnings
tests/test_capability_management.py: 6 warnings
tests/test_dynamic_agents.py: 8 warnings
tests/test_workflow_manager.py: 21 warnings
  /Users/nicholasbaro/Python/semant/venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:373: 1 warning
tests/test_agent_integrator.py: 8 warnings
tests/test_agent_recovery.py: 14 warnings
tests/test_capability_handling.py: 3 warnings
tests/test_capability_management.py: 6 warnings
tests/test_dynamic_agents.py: 8 warnings
tests/test_workflow_manager.py: 21 warnings
  /Users/nicholasbaro/Python/semant/venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:373: UserWarning: Valid config keys have changed in V2:
  * 'allow_population_by_field_name' has been renamed to 'validate_by_name'
    warnings.warn(message, UserWarning)

tests/utils/test_agents.py:100
  /Users/nicholasbaro/Python/semant/tests/utils/test_agents.py:100: PytestCollectionWarning: cannot collect test class 'TestAgent' because it has a __init__ constructor (from: tests/test_agent_factory.py)
    class TestAgent(BaseTestAgent):

tests/utils/test_agents.py:184
  /Users/nicholasbaro/Python/semant/tests/utils/test_agents.py:184: PytestCollectionWarning: cannot collect test class 'TestCapabilityAgent' because it has a __init__ constructor (from: tests/test_agent_factory.py)
    class TestCapabilityAgent(TestAgent):

tests/test_agent_recovery.py:71
  /Users/nicholasbaro/Python/semant/tests/test_agent_recovery.py:71: PytestCollectionWarning: cannot collect test class 'TestRecoveryAgent' because it has a __init__ constructor (from: tests/test_agent_recovery.py)
    class TestRecoveryAgent(EnhancedMockAgent):

tests/test_agents.py:14
  /Users/nicholasbaro/Python/semant/tests/test_agents.py:14: PytestCollectionWarning: cannot collect test class 'TestableBaseAgent' because it has a __init__ constructor (from: tests/test_agents.py)
    class TestableBaseAgent(BaseAgent):

tests/test_capability_management.py:16
  /Users/nicholasbaro/Python/semant/tests/test_capability_management.py:16: PytestCollectionWarning: cannot collect test class 'TestCapabilityAgent' because it has a __init__ constructor (from: tests/test_capability_management.py)
    class TestCapabilityAgent(BaseAgent):

tests/utils/test_agents.py:184
  /Users/nicholasbaro/Python/semant/tests/utils/test_agents.py:184: PytestCollectionWarning: cannot collect test class 'TestCapabilityAgent' because it has a __init__ constructor (from: tests/test_dynamic_agents.py)
    class TestCapabilityAgent(TestAgent):

tests/utils/test_agents.py:100
  /Users/nicholasbaro/Python/semant/tests/utils/test_agents.py:100: PytestCollectionWarning: cannot collect test class 'TestAgent' because it has a __init__ constructor (from: tests/test_knowledge_graph.py)
    class TestAgent(BaseTestAgent):

tests/utils/test_agents.py:100
  /Users/nicholasbaro/Python/semant/tests/utils/test_agents.py:100: PytestCollectionWarning: cannot collect test class 'TestAgent' because it has a __init__ constructor (from: tests/test_workflow_manager.py)
    class TestAgent(BaseTestAgent):

tests/utils/test_agents.py:100
  /Users/nicholasbaro/Python/semant/tests/utils/test_agents.py:100: PytestCollectionWarning: cannot collect test class 'TestAgent' because it has a __init__ constructor (from: tests/unit/test_additional_agents.py)
    class TestAgent(BaseTestAgent):

tests/utils/test_agents.py:100
  /Users/nicholasbaro/Python/semant/tests/utils/test_agents.py:100: PytestCollectionWarning: cannot collect test class 'TestAgent' because it has a __init__ constructor (from: tests/unit/test_test_agents.py)
    class TestAgent(BaseTestAgent):

tests/utils/test_agents.py:100
  /Users/nicholasbaro/Python/semant/tests/utils/test_agents.py:100: PytestCollectionWarning: cannot collect test class 'TestAgent' because it has a __init__ constructor (from: tests/utils/test_agents.py)
    class TestAgent(BaseTestAgent):

tests/utils/test_agents.py:184
  /Users/nicholasbaro/Python/semant/tests/utils/test_agents.py:184: PytestCollectionWarning: cannot collect test class 'TestCapabilityAgent' because it has a __init__ constructor (from: tests/utils/test_agents.py)
    class TestCapabilityAgent(TestAgent):

tests/utils/test_agents.py:611
  /Users/nicholasbaro/Python/semant/tests/utils/test_agents.py:611: PytestCollectionWarning: cannot collect test class 'TestableBaseAgent' because it has a __init__ constructor (from: tests/utils/test_agents.py)
    class TestableBaseAgent(BaseAgent):

tests/utils/test_helpers.py:15
  /Users/nicholasbaro/Python/semant/tests/utils/test_helpers.py:15: PytestCollectionWarning: cannot collect test class 'TestResourceManager' because it has a __init__ constructor (from: tests/utils/test_helpers.py)
    class TestResourceManager:

tests/test_agent_integrator.py: 8 warnings
tests/test_agent_recovery.py: 14 warnings
tests/test_capability_handling.py: 3 warnings
tests/test_capability_management.py: 6 warnings
tests/test_dynamic_agents.py: 8 warnings
tests/test_workflow_manager.py: 21 warnings
  /Users/nicholasbaro/Python/semant/agents/core/../core/message_types.py:81: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    @validator('timestamp', pre=True)

tests/test_capability_management.py::TestCapabilityManagement::test_remove_nonexistent_capability
  /Users/nicholasbaro/Python/semant/venv/lib/python3.11/site-packages/_pytest/unraisableexception.py:65: PytestUnraisableExceptionWarning: Exception ignored in: <coroutine object WorkflowNotifier._process_notifications at 0x140c04130>
  
  Traceback (most recent call last):
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py", line 158, in get
      await getter
  GeneratorExit
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py", line 64, in _process_notifications
      notification = await self._notification_queue.get()
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py", line 160, in get
      getter.cancel()  # Just in case getter is not done yet.
      ^^^^^^^^^^^^^^^
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 762, in call_soon
      self._check_closed()
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 520, in _check_closed
      raise RuntimeError('Event loop is closed')
  RuntimeError: Event loop is closed
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))

tests/test_capability_management.py::TestCapabilityManagement::test_remove_nonexistent_capability
  /Users/nicholasbaro/Python/semant/venv/lib/python3.11/site-packages/_pytest/unraisableexception.py:65: PytestUnraisableExceptionWarning: Exception ignored in: <coroutine object WorkflowNotifier._process_notifications at 0x1408897b0>
  
  Traceback (most recent call last):
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py", line 158, in get
      await getter
  GeneratorExit
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py", line 64, in _process_notifications
      notification = await self._notification_queue.get()
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py", line 160, in get
      getter.cancel()  # Just in case getter is not done yet.
      ^^^^^^^^^^^^^^^
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 762, in call_soon
      self._check_closed()
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 520, in _check_closed
      raise RuntimeError('Event loop is closed')
  RuntimeError: Event loop is closed
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))

tests/test_capability_management.py::TestCapabilityManagement::test_remove_nonexistent_capability
  /Users/nicholasbaro/Python/semant/venv/lib/python3.11/site-packages/_pytest/unraisableexception.py:65: PytestUnraisableExceptionWarning: Exception ignored in: <coroutine object WorkflowNotifier._process_notifications at 0x137d2ec50>
  
  Traceback (most recent call last):
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py", line 158, in get
      await getter
  GeneratorExit
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py", line 64, in _process_notifications
      notification = await self._notification_queue.get()
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py", line 160, in get
      getter.cancel()  # Just in case getter is not done yet.
      ^^^^^^^^^^^^^^^
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 762, in call_soon
      self._check_closed()
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 520, in _check_closed
      raise RuntimeError('Event loop is closed')
  RuntimeError: Event loop is closed
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))

tests/test_dynamic_agents.py::test_agent_creation
  /Users/nicholasbaro/Python/semant/venv/lib/python3.11/site-packages/_pytest/unraisableexception.py:65: PytestUnraisableExceptionWarning: Exception ignored in: <coroutine object WorkflowNotifier._process_notifications at 0x1418ee3e0>
  
  Traceback (most recent call last):
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py", line 158, in get
      await getter
  GeneratorExit
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py", line 64, in _process_notifications
      notification = await self._notification_queue.get()
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py", line 160, in get
      getter.cancel()  # Just in case getter is not done yet.
      ^^^^^^^^^^^^^^^
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 762, in call_soon
      self._check_closed()
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 520, in _check_closed
      raise RuntimeError('Event loop is closed')
  RuntimeError: Event loop is closed
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))

tests/test_dynamic_agents.py::test_agent_creation
  /Users/nicholasbaro/Python/semant/venv/lib/python3.11/site-packages/_pytest/unraisableexception.py:65: PytestUnraisableExceptionWarning: Exception ignored in: <coroutine object WorkflowNotifier._process_notifications at 0x1418ece50>
  
  Traceback (most recent call last):
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py", line 158, in get
      await getter
  GeneratorExit
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py", line 64, in _process_notifications
      notification = await self._notification_queue.get()
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py", line 160, in get
      getter.cancel()  # Just in case getter is not done yet.
      ^^^^^^^^^^^^^^^
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 762, in call_soon
      self._check_closed()
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 520, in _check_closed
      raise RuntimeError('Event loop is closed')
  RuntimeError: Event loop is closed
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))

tests/test_graph_monitoring.py::test_cache_monitoring
  /Users/nicholasbaro/Python/semant/venv/lib/python3.11/site-packages/pyparsing/core.py:855: RuntimeWarning: coroutine 'KnowledgeGraphManager.get_stats' was never awaited
    raise ParseException(instring, len_instring, self.errmsg, self)
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

tests/test_graph_optimizations.py::test_knowledge_graph_manager_add_triple
  /Users/nicholasbaro/Python/semant/venv/lib/python3.11/site-packages/pyparsing/results.py:159: RuntimeWarning: coroutine 'KnowledgeGraphManager.get_stats' was never awaited
    self._all_names = set()
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

tests/test_graph_performance.py::test_indexing_performance
  /Users/nicholasbaro/Python/semant/venv/lib/python3.11/site-packages/_pytest/unraisableexception.py:65: PytestUnraisableExceptionWarning: Exception ignored in: <coroutine object WorkflowNotifier._process_notifications at 0x1324c24d0>
  
  Traceback (most recent call last):
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py", line 158, in get
      await getter
  GeneratorExit
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py", line 64, in _process_notifications
      notification = await self._notification_queue.get()
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py", line 160, in get
      getter.cancel()  # Just in case getter is not done yet.
      ^^^^^^^^^^^^^^^
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 762, in call_soon
      self._check_closed()
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 520, in _check_closed
      raise RuntimeError('Event loop is closed')
  RuntimeError: Event loop is closed
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))

tests/test_graph_performance.py::test_indexing_performance
  /Users/nicholasbaro/Python/semant/venv/lib/python3.11/site-packages/_pytest/unraisableexception.py:65: PytestUnraisableExceptionWarning: Exception ignored in: <coroutine object WorkflowNotifier._process_notifications at 0x131d7d210>
  
  Traceback (most recent call last):
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py", line 158, in get
      await getter
  GeneratorExit
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py", line 64, in _process_notifications
      notification = await self._notification_queue.get()
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py", line 160, in get
      getter.cancel()  # Just in case getter is not done yet.
      ^^^^^^^^^^^^^^^
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 762, in call_soon
      self._check_closed()
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 520, in _check_closed
      raise RuntimeError('Event loop is closed')
  RuntimeError: Event loop is closed
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))

tests/test_graph_performance.py::test_indexing_performance
  /Users/nicholasbaro/Python/semant/venv/lib/python3.11/site-packages/_pytest/unraisableexception.py:65: PytestUnraisableExceptionWarning: Exception ignored in: <coroutine object WorkflowNotifier._process_notifications at 0x140888400>
  
  Traceback (most recent call last):
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py", line 158, in get
      await getter
  GeneratorExit
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py", line 64, in _process_notifications
      notification = await self._notification_queue.get()
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py", line 160, in get
      getter.cancel()  # Just in case getter is not done yet.
      ^^^^^^^^^^^^^^^
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 762, in call_soon
      self._check_closed()
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 520, in _check_closed
      raise RuntimeError('Event loop is closed')
  RuntimeError: Event loop is closed
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))

tests/test_graph_performance.py::test_indexing_performance
  /Users/nicholasbaro/Python/semant/venv/lib/python3.11/site-packages/_pytest/unraisableexception.py:65: PytestUnraisableExceptionWarning: Exception ignored in: <coroutine object WorkflowNotifier._process_notifications at 0x1418ecc70>
  
  Traceback (most recent call last):
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py", line 158, in get
      await getter
  GeneratorExit
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py", line 64, in _process_notifications
      notification = await self._notification_queue.get()
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py", line 160, in get
      getter.cancel()  # Just in case getter is not done yet.
      ^^^^^^^^^^^^^^^
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 762, in call_soon
      self._check_closed()
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 520, in _check_closed
      raise RuntimeError('Event loop is closed')
  RuntimeError: Event loop is closed
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))

tests/test_graph_performance.py::test_indexing_performance
  /Users/nicholasbaro/Python/semant/venv/lib/python3.11/site-packages/_pytest/unraisableexception.py:65: PytestUnraisableExceptionWarning: Exception ignored in: <coroutine object WorkflowNotifier._process_notifications at 0x141a8d4e0>
  
  Traceback (most recent call last):
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py", line 158, in get
      await getter
  GeneratorExit
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py", line 64, in _process_notifications
      notification = await self._notification_queue.get()
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py", line 160, in get
      getter.cancel()  # Just in case getter is not done yet.
      ^^^^^^^^^^^^^^^
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 762, in call_soon
      self._check_closed()
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 520, in _check_closed
      raise RuntimeError('Event loop is closed')
  RuntimeError: Event loop is closed
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))

tests/test_workflow_manager.py::test_retry_logic
  /Users/nicholasbaro/Python/semant/venv/lib/python3.11/site-packages/_pytest/unraisableexception.py:65: PytestUnraisableExceptionWarning: Exception ignored in: <coroutine object WorkflowNotifier._process_notifications at 0x137d2f6a0>
  
  Traceback (most recent call last):
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py", line 158, in get
      await getter
  GeneratorExit
  
  During handling of the above exception, another exception occurred:
  
  Traceback (most recent call last):
    File "/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py", line 64, in _process_notifications
      notification = await self._notification_queue.get()
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py", line 160, in get
      getter.cancel()  # Just in case getter is not done yet.
      ^^^^^^^^^^^^^^^
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 762, in call_soon
      self._check_closed()
    File "/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py", line 520, in _check_closed
      raise RuntimeError('Event loop is closed')
  RuntimeError: Event loop is closed
  
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.
    warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_agent_integrator.py::test_register_agent - AttributeError: 'MockAgent' object has no attribute 'capabilities'
FAILED tests/test_agent_integrator.py::test_route_message - AttributeError: 'MockAgent' object has no attribute 'capabilities'
FAILED tests/test_agent_integrator.py::test_broadcast_message - assert 13 == 1
 +  where 13 = len([AgentMessage(message_id='49fb237d-8ea0-455c-887c-3dbe206ef6d7', sender_id='scientificswarmagent_8dbc3434', recipient_id='sender', content="Agent scientificswarmagent_8dbc3434 processed: {'test': 'data'}", message_type='test', timestamp=datetime.datetime(2025, 6, 9, 21, 22, 19, 755476), metadata=None), AgentMessage(message_id='1f9afebb-a952-4c76-ab35-a83949fa2337', sender_id='sensoragent_a8a9565b', recipient_id='sender', content={'error': 'Missing sensor_id or reading.'}, message_type='sensor_response', timestamp=datetime.datetime(2025, 6, 9, 21, 22, 19, 755456), metadata=None), AgentMessage(message_id='7cc848bb-341c-47f6-b17e-1cc743fa2639', sender_id='agenticpromptagent_f4a704a5', recipient_id='sender', content={'status': 'unknown_message_type', 'original_type': 'test'}, message_type='error_response', timestamp=datetime.datetime(2025, 6, 9, 21, 22, 19, 755456), metadata=None), AgentMessage(message_id='a0f8a76d-8727-4d5f-8769-9eaa8160b180', sender_id='dataprocessoragent_8eb29a71', recipient_id='sender', content={'error': 'No data provided.'}, message_type='data_processor_response', timestamp=datetime.datetime(2025, 6, 9, 21, 22, 19, 755456), metadata=None), <agents.core.base_agent.AgentMessage object at 0x12667ecd0>, <agents.core.base_agent.AgentMessage object at 0x13244c490>, AgentMessage(message_id='38bfc433-b54a-4a50-aa7b-7dc532f84229', sender_id='codereviewagent_74524312', recipient_id='sender', content="Code Review Agent codereviewagent_74524312 processed: {'test': 'data'}", message_type='test', timestamp=datetime.datetime(2025, 6, 9, 21, 22, 19, 755540), metadata=None), AgentMessage(message_id='86c3e23a-d973-4e7a-a03e-08d185cce42c', sender_id='scientificswarmagent_014075fd', recipient_id='sender', content="Agent scientificswarmagent_014075fd processed: {'test': 'data'}", message_type='test', timestamp=datetime.datetime(2025, 6, 9, 21, 22, 19, 755551), metadata=None), AgentMessage(message_id='0f5ba4aa-d5a6-44b5-9e7d-64b797480a6e', sender_id='corporateknowledgeagent_eab68eb5', recipient_id='sender', content={'status': 'error', 'message': 'Unknown message type'}, message_type='error_response', timestamp=datetime.datetime(2025, 6, 9, 21, 22, 19, 755456), metadata=None), AgentMessage(message_id='c2b8fb1b-5dcc-4226-b9f2-0b323388c964', sender_id='vertexemailagent_93a45d95', recipient_id='sender', content={'message': "Agent vertexemailagent_93a45d95 processed: {'test': 'data'}"}, message_type='test', timestamp=datetime.datetime(2025, 6, 9, 21, 22, 19, 755569), metadata=None), AgentMessage(message_id='66020689-f83f-4b4f-b818-9f2e0169c0d3', sender_id='codereviewagent_6b2f2212', recipient_id='sender', content="Code Review Agent codereviewagent_6b2f2212 processed: {'test': 'data'}", message_type='test', timestamp=datetime.datetime(2025, 6, 9, 21, 22, 19, 755577), metadata=None), AgentMessage(message_id='d71e5bcf-3e90-44ab-a86d-7ae785faddd3', sender_id='scientificswarmagent_b19020c7', recipient_id='sender', content="Agent scientificswarmagent_b19020c7 processed: {'test': 'data'}", message_type='test', timestamp=datetime.datetime(2025, 6, 9, 21, 22, 19, 755585), metadata=None), <agents.core.base_agent.AgentMessage object at 0x13244f850>])
FAILED tests/test_agent_integrator.py::test_get_agent_status - KeyError: 'agent_id'
FAILED tests/test_agent_integrator.py::test_get_all_agent_statuses - KeyError: 'agent_type'
FAILED tests/test_agent_integrator.py::test_knowledge_graph_updates - assert 0 > 0
 +  where 0 = len([])
FAILED tests/test_agent_integrator.py::test_knowledge_graph_queries - AttributeError: 'MockAgent' object has no attribute 'get_knowledge_graph_queries'
FAILED tests/test_agent_integrator.py::test_process_message_called_during_routing - AssertionError: assert {'status': 'success'} == {'status': 'processed'}
  
  Differing items:
  {'status': 'success'} != {'status': 'processed'}
  
  Full diff:
    {
  -     'status': 'processed',
  ?                ^^^    --
  +     'status': 'success',
  ?                ^^^
    }
FAILED tests/test_capability_handling.py::test_capability_type_conversion - assert False
 +  where False = isinstance(CapabilitySet(capabilities={Capability(type=data_processing, version=1.0, parameters={}, metadata={}), Capability(type=sensor_reading, version=1.0, parameters={}, metadata={}), Capability(type=code_review, version=1.0, parameters={}, metadata={})}), set)
FAILED tests/test_capability_handling.py::test_registry_capability_handling - assert False
 +  where False = isinstance(CapabilitySet(capabilities={Capability(type=data_processing, version=1.0, parameters={}, metadata={}), Capability(type=sensor_reading, version=1.0, parameters={}, metadata={}), Capability(type=code_review, version=1.0, parameters={}, metadata={})}), set)
FAILED tests/test_capability_handling.py::test_capability_consistency - KeyError: <CapabilityType.CODE_REVIEW: 'code_review'>
FAILED tests/test_capability_handling.py::test_capability_edge_cases - KeyError: <CapabilityType.CODE_REVIEW: 'code_review'>
FAILED tests/test_consulting_agents.py::test_engagement_initialization - TypeError: object dict can't be used in 'await' expression
FAILED tests/test_consulting_agents.py::test_strategy_development - TypeError: object dict can't be used in 'await' expression
FAILED tests/test_consulting_agents.py::test_implementation_planning - TypeError: object dict can't be used in 'await' expression
FAILED tests/test_consulting_agents.py::test_value_framework_development - TypeError: object dict can't be used in 'await' expression
FAILED tests/test_consulting_agents.py::test_end_to_end_engagement - TypeError: object dict can't be used in 'await' expression
FAILED tests/test_consulting_agents.py::test_knowledge_graph_consistency - TypeError: object dict can't be used in 'await' expression
FAILED tests/test_consulting_agents.py::test_agent_diary_functionality - TypeError: object dict can't be used in 'await' expression
FAILED tests/test_consulting_agents.py::test_agent_diary_in_knowledge_graph - TypeError: object dict can't be used in 'await' expression
FAILED tests/test_dynamic_agents.py::test_agent_creation - ValueError: Unknown agent type: agent1
FAILED tests/test_dynamic_agents.py::test_role_delegation - ValueError: Unknown agent type: supervisor
FAILED tests/test_dynamic_agents.py::test_agent_scaling - ValueError: Unknown agent type: worker_0
FAILED tests/test_dynamic_agents.py::test_supervisor_agent - ValueError: Unknown agent type: supervisor
FAILED tests/test_dynamic_agents.py::test_workload_monitoring - ValueError: Unknown agent type: monitor
FAILED tests/test_email_send.py::test_email - Failed: Expected None, but test returned False. Did you mean to use `assert` instead of `return`?
FAILED tests/test_graph_monitoring.py::test_stats_collection - TypeError: 'coroutine' object is not subscriptable
FAILED tests/test_graph_monitoring.py::test_cache_monitoring - assert 0 > 0
FAILED tests/test_graph_monitoring.py::test_performance_monitoring - TypeError: 'coroutine' object is not subscriptable
FAILED tests/test_prompt_agent.py::TestPromptAgent::test_prompt_generation - AssertionError: assert 'error' == 'prompt_response'
  
  - prompt_response
  + error
FAILED tests/test_prompt_agent.py::TestPromptAgent::test_knowledge_graph_integration - AssertionError: assert (rdflib.term.URIRef('prompt:code_review'), rdflib.term.URIRef('http://www.w3.org/2000/01/rdf-schema#label'), rdflib.term.Literal('Code Review Prompt')) in <Graph identifier=N870a2042a8c847c1af86fe7563fdcc43 (<class 'rdflib.graph.Graph'>)>
FAILED tests/test_prompt_agent.py::TestPromptAgent::test_prompt_validation - AssertionError: assert 'missing required fields' in 'missing required prompt parameters'
 +  where 'missing required prompt parameters' = <built-in method lower of str object at 0x110ff4750>()
 +    where <built-in method lower of str object at 0x110ff4750> = 'Missing required prompt parameters'.lower
FAILED tests/test_prompt_agent.py::TestPromptAgent::test_prompt_metrics - AssertionError: assert 'error_response' == 'metrics_response'
  
  - metrics_response
  + error_response
FAILED tests/test_reasoner.py::test_investigate_research_topic - NameError: name 'URIRef' is not defined
FAILED tests/test_reasoner.py::test_find_topic_entries - NameError: name 'URIRef' is not defined
FAILED tests/test_reasoner.py::test_find_related_papers - NameError: name 'URIRef' is not defined
FAILED tests/test_reasoner.py::test_extract_key_insights - NameError: name 'URIRef' is not defined
FAILED tests/test_reasoner.py::test_traverse_knowledge_graph - NameError: name 'URIRef' is not defined
FAILED tests/test_research_agent.py::test_process_message - RuntimeError: Agent not initialized. Call initialize() first.
FAILED tests/test_research_agent.py::test_test_agent_initialization - AssertionError: assert 'research_test_agent' == 'test_research_agent'
  
  - test_research_agent
  + research_test_agent
FAILED tests/test_research_agent.py::test_test_agent_message_history - AssertionError: assert 'success' == 'research_completed'
  
  - research_completed
  + success
FAILED tests/test_research_agent.py::test_test_agent_knowledge_graph - AssertionError: assert {'data': {'subject': 'test_subject', 'predicate': 'test_predicate', 'object': 'test_object'}, 'timestamp': 1749518620.174051} == {'subject': 'test_subject', 'predicate': 'test_predicate', 'object': 'test_object'}
  
  Left contains 2 more items:
  {'data': {'object': 'test_object',
            'predicate': 'test_predicate',
            'subject': 'test_subject'},
   'timestamp': 1749518620.174051}
  Right contains 3 more items:
  {'object': 'test_object',
   'predicate': 'test_predicate',
   'subject': 'test_subject'}
  
  Full diff:
    {
  +     'data': {
  -     'object': 'test_object',
  +         'object': 'test_object',
  ? ++++
  -     'predicate': 'test_predicate',
  +         'predicate': 'test_predicate',
  ? ++++
  -     'subject': 'test_subject',
  +         'subject': 'test_subject',
  ? ++++
  +     },
  +     'timestamp': 1749518620.174051,
    }
FAILED tests/test_research_agent.py::test_process_message_without_topic - RuntimeError: Agent not initialized. Call initialize() first.
FAILED tests/test_research_agent.py::test_process_message_with_topic - RuntimeError: Agent not initialized. Call initialize() first.
FAILED tests/test_research_agent.py::test_confidence_scoring - RuntimeError: Agent not initialized. Call initialize() first.
FAILED tests/test_research_agent.py::test_evidence_tracking - RuntimeError: Agent not initialized. Call initialize() first.
FAILED tests/test_research_agent.py::test_multiple_research_paths - RuntimeError: Agent not initialized. Call initialize() first.
FAILED tests/test_research_agent.py::test_error_handling - RuntimeError: Agent not initialized. Call initialize() first.
FAILED tests/test_research_agent.py::test_reasoner_integration - RuntimeError: Agent not initialized. Call initialize() first.
FAILED tests/test_research_agent.py::test_research_findings_persistence - RuntimeError: Agent not initialized. Call initialize() first.
FAILED tests/test_vertex_auth.py::test_credentials - Failed: Expected None, but test returned True. Did you mean to use `assert` instead of `return`?
FAILED tests/test_vertex_auth.py::test_vertex_initialization - Failed: Expected None, but test returned True. Did you mean to use `assert` instead of `return`?
FAILED tests/test_vertex_auth.py::test_model_access - Failed: Expected None, but test returned False. Did you mean to use `assert` instead of `return`?
FAILED tests/test_vertex_integration.py::test_vertex_initialization - Failed: Expected None, but test returned True. Did you mean to use `assert` instead of `return`?
FAILED tests/test_vertex_integration.py::test_invalid_message_type - assert None == 'error'
 +  where None = <built-in method get of dict object at 0x142c4b780>('status')
 +    where <built-in method get of dict object at 0x142c4b780> = {'message': "Agent vertex_email_agent processed: {'invalid': 'content'}"}.get
 +      where {'message': "Agent vertex_email_agent processed: {'invalid': 'content'}"} = AgentMessage(message_id='8fa75d27-f161-4209-bbd8-e7a26cdf228a', sender_id='vertex_email_agent', recipient_id='test_sender', content={'message': "Agent vertex_email_agent processed: {'invalid': 'content'}"}, message_type='invalid_type', timestamp=datetime.datetime(2025, 6, 9, 21, 23, 40, 689336), metadata=None).content
FAILED tests/test_vertex_integration.py::test_knowledge_graph_integration - AssertionError: assert 'knowledge_graph' in {'status': 'sent', 'recipient': 'test@example.com', 'subject': 'Test Subject', 'body': 'Test Body'}
 +  where {'status': 'sent', 'recipient': 'test@example.com', 'subject': 'Test Subject', 'body': 'Test Body'} = AgentMessage(message_id='2ecd29e9-270e-45be-9a0f-15e4274da029', sender_id='vertex_email_agent', recipient_id='test_sender', content={'status': 'sent', 'recipient': 'test@example.com', 'subject': 'Test Subject', 'body': 'Test Body'}, message_type='send_email_response', timestamp=datetime.datetime(2025, 6, 9, 21, 23, 40, 694934), metadata=None).content
FAILED tests/test_vertex_integration.py::test_error_handling - AssertionError: assert 'sent' == 'error'
  
  - error
  + sent
FAILED tests/test_vertex_integration.py::test_empty_subject_and_body - AssertionError: assert 'sent' == 'error'
  
  - error
  + sent
FAILED tests/test_vertex_integration.py::test_credentials - Failed: Expected None, but test returned True. Did you mean to use `assert` instead of `return`?
FAILED tests/test_vertex_integration.py::test_model_access - Failed: Expected None, but test returned True. Did you mean to use `assert` instead of `return`?
FAILED tests/test_workflow_manager.py::test_workflow_creation - AttributeError: MONITORING
FAILED tests/test_workflow_manager.py::test_workflow_assembly - TypeError: Object of type Capability is not JSON serializable
FAILED tests/test_workflow_manager.py::test_workflow_validation - KeyError: 'valid'
FAILED tests/test_workflow_manager.py::test_load_balancing - TypeError: Object of type Capability is not JSON serializable
FAILED tests/test_workflow_manager.py::test_workflow_metrics - TypeError: Object of type Capability is not JSON serializable
FAILED tests/test_workflow_manager.py::test_registry_state_consistency - TypeError: Object of type Capability is not JSON serializable
FAILED tests/test_workflow_manager.py::test_concurrent_registration_and_assembly - TypeError: Object of type Capability is not JSON serializable
FAILED tests/test_workflow_manager.py::test_registry_recovery - TypeError: Object of type Capability is not JSON serializable
FAILED tests/test_workflow_manager.py::test_capability_conflicts - TypeError: Object of type Capability is not JSON serializable
FAILED tests/test_workflow_manager.py::test_registry_persistence - TypeError: Object of type Capability is not JSON serializable
FAILED tests/test_workflow_manager.py::test_transaction_atomicity - TypeError: WorkflowManager.create_workflow() missing 1 required positional argument: 'description'
FAILED tests/test_workflow_manager.py::test_retry_logic - TypeError: WorkflowManager.create_workflow() missing 1 required positional argument: 'description'
FAILED tests/test_workflow_manager.py::test_concurrent_transactions - TypeError: WorkflowManager.create_workflow() missing 1 required positional argument: 'description'
FAILED tests/test_workflow_manager.py::test_transaction_timeout - TypeError: WorkflowManager.create_workflow() missing 1 required positional argument: 'description'
FAILED tests/test_workflow_persistence.py::test_workflow_persistence_versioning - assert 0 == 2
 +  where 0 = len([])
FAILED tests/test_workflow_persistence.py::test_workflow_persistence_recovery - KeyError: 'metadata'
FAILED tests/test_workflow_persistence.py::test_workflow_monitoring - TypeError: 'float' object is not subscriptable
FAILED tests/test_workflow_persistence.py::test_workflow_manager_integration - AssertionError: assert <WorkflowStatus.ASSEMBLED: 'assembled'> == 'error'
  
  - error
  + assembled
FAILED tests/unit/test_test_agents.py::test_test_agent_initialization - assert 1 == 2
 +  where 1 = len(CapabilitySet(capabilities={Capability(type=message_processing, version=1.0, parameters={}, metadata={})}))
FAILED tests/unit/test_test_agents.py::test_test_agent_process_message - AttributeError: 'dict' object has no attribute 'sender_id'
ERROR tests/test_dynamic_agents.py::test_agent_initialization - ValueError: Unknown agent type: test_agent
ERROR tests/test_dynamic_agents.py::test_capability_tracking - ValueError: Unknown agent type: capability_agent
ERROR tests/test_dynamic_agents.py::test_knowledge_graph_operations - ValueError: Unknown agent type: capability_agent
ERROR tests/test_integration_management.py::test_integration_management - AttributeError: INTEGRATION_MANAGEMENT
ERROR tests/test_integration_management.py::test_module_management - AttributeError: INTEGRATION_MANAGEMENT
ERROR tests/test_integration_management.py::test_integration_metrics - AttributeError: INTEGRATION_MANAGEMENT
ERROR tests/test_performance.py::TestPerformance::test_message_processing_performance - TypeError: Can't instantiate abstract class TestPerformanceAgent with abstract method _process_message_impl
ERROR tests/test_performance.py::TestPerformance::test_concurrent_operations - TypeError: Can't instantiate abstract class TestPerformanceAgent with abstract method _process_message_impl
ERROR tests/test_performance.py::TestPerformance::test_resource_usage - TypeError: Can't instantiate abstract class TestPerformanceAgent with abstract method _process_message_impl
ERROR tests/test_performance.py::TestPerformance::test_recovery_performance - TypeError: Can't instantiate abstract class TestPerformanceAgent with abstract method _process_message_impl
ERROR tests/test_security_audit.py::test_security_levels - AttributeError: SECURITY_CHECK
ERROR tests/test_security_audit.py::test_audit_logging - AttributeError: SECURITY_CHECK
ERROR tests/test_security_audit.py::test_security_metrics - AttributeError: SECURITY_CHECK
ERROR tests/test_workflow_manager.py::test_agent_registration - TypeError: DataProcessorTestAgent.__init__() missing 1 required positional argument: 'agent_id'
ERROR tests/test_workflow_manager.py::test_workflow_execution
ERROR tests/test_workflow_manager.py::test_workflow_supervision
ERROR tests/test_workflow_manager.py::test_anomaly_detection_workflow - TypeError: DataProcessorTestAgent.__init__() missing 1 required positional argument: 'agent_id'
ERROR tests/test_workflow_manager.py::test_workflow_dependency_execution - TypeError: DataProcessorTestAgent.__init__() missing 1 required positional argument: 'agent_id'
ERROR tests/test_workflow_manager.py::test_workflow_timeout_handling - TypeError: DataProcessorTestAgent.__init__() missing 1 required positional argument: 'agent_id'
ERROR tests/test_workflow_manager.py::test_workflow_error_recovery - TypeError: DataProcessorTestAgent.__init__() missing 1 required positional argument: 'agent_id'
ERROR tests/unit/test_judge_agent.py::test_judge_evaluates_email - TypeError: JudgeAgent.__init__() got an unexpected keyword argument 'kg'
====== 80 failed, 142 passed, 210 warnings, 21 errors in 85.42s (0:01:25) ======
