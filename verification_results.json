{
  "documentation_files": {
    "docs/developer_guide.md": true,
    "docs/technical_architecture.md": false,
    "README.md": true
  },
  "documentation_sections": {
    "developer_guide.md": [
      "## Overview",
      "## System Architecture",
      "## Development Practices",
      "## Testing Guide",
      "## Debugging Guide",
      "## Maintenance Guide",
      "## Future Improvements",
      "## Agent System Implementation",
      "## Best Practices",
      "## Common Issues and Solutions",
      "## Agent Implementation Guidelines"
    ],
    "technical_architecture.md": [],
    "README.md": [
      "## Features",
      "## Architecture",
      "## Getting Started",
      "## Testing",
      "## Documentation",
      "## Contributing",
      "## License",
      "## Acknowledgments"
    ]
  },
  "code_components": {
    "classes": [
      "class HealthCheck:",
      "class AgentHealth:",
      "class RegistryObserver(ABC):",
      "class WorkflowNotifier:",
      "class AgentRegistry:",
      "class ScientificSwarmAgent(BaseAgent):",
      "class WorkflowTransaction:",
      "class AgentMessage:",
      "class WorkflowStatus(str, Enum):",
      "class WorkflowStep:",
      "class Workflow:",
      "class RemoteKGAgent(BaseAgent):",
      "class AgentFactory:",
      "class KnowledgeGraphReasoner:",
      "class AgentIntegrator:",
      "class WorkflowNotifier:",
      "class WorkflowPersistence:",
      "class AgentStatus(str, Enum):",
      "class AgentMessage:",
      "class BaseAgent(ABC):",
      "class MultiAgent(BaseAgent):",
      "class FeatureZAgent(BaseAgent):",
      "class CapabilityType(str, Enum):",
      "class Capability:",
      "class CapabilitySet:",
      "class WorkflowStatus(str, Enum):",
      "class WorkflowStep:",
      "class Workflow:",
      "class WorkflowManager(RegistryObserver):",
      "class RecoveryStrategy(ABC):",
      "class TimeoutRecoveryStrategy(RecoveryStrategy):",
      "class ResourceExhaustionRecoveryStrategy(RecoveryStrategy):",
      "class CommunicationRecoveryStrategy(RecoveryStrategy):",
      "class StateCorruptionRecoveryStrategy(RecoveryStrategy):",
      "class RecoveryStrategyFactory:",
      "class SensorAgent(BaseAgent):",
      "class AgenticPromptAgent(BaseAgent):",
      "class TTLValidationAgent(BaseAgent):",
      "class ResearchAgent(BaseAgent):",
      "class MetricType(str, Enum):",
      "class MetricValue:",
      "class WorkflowMonitor:",
      "class SupervisorAgent(BaseAgent):",
      "class DataProcessorAgent(BaseAgent):",
      "class EmailIntegration:",
      "class AgentMessage(BaseModel):",
      "class DiaryAgent:",
      "class JudgeAgent(BaseAgent):",
      "class DiaryAgent(BaseAgent):",
      "class TestSwarmCoordinator(ScientificSwarmAgent):",
      "class CorporateKnowledgeAgent(BaseAgent):",
      "class VertexEmailAgent(BaseAgent):",
      "class CodeReviewAgent(ScientificSwarmAgent):",
      "class SimpleResponderAgent(BaseAgent):",
      "class FinanceAgent(SimpleResponderAgent):",
      "class CoachingAgent(SimpleResponderAgent):",
      "class IntelligenceAgent(SimpleResponderAgent):",
      "class DeveloperAgent(SimpleResponderAgent):"
    ],
    "functions": [
      "def main():"
    ]
  },
  "tests": {
    "success": false,
    "output": "============================= test session starts ==============================\nplatform darwin -- Python 3.11.8, pytest-8.3.3, pluggy-1.5.0 -- /Library/Frameworks/Python.framework/Versions/3.11/bin/python3.11\ncachedir: .pytest_cache\nrootdir: /Users/nicholasbaro/Python/semant\nconfigfile: pytest.ini\nplugins: cov-4.1.0, langsmith-0.3.43, mock-3.12.0, anyio-4.4.0, asyncio-1.0.0\nasyncio: mode=Mode.AUTO, asyncio_default_fixture_loop_scope=function, asyncio_default_test_loop_scope=function\ncollecting ... collected 246 items\n\ntests/agents/test_code_review_agent.py::test_agent_initialization ERROR  [  0%]\ntests/agents/test_code_review_agent.py::test_code_review_simple_function ERROR [  0%]\ntests/agents/test_code_review_agent.py::test_code_review_complex_function ERROR [  1%]\ntests/agents/test_code_review_agent.py::test_code_review_with_syntax_error ERROR [  1%]\ntests/agents/test_code_review_agent.py::test_complexity_analysis ERROR   [  2%]\ntests/agents/test_code_review_agent.py::test_code_quality_analysis ERROR [  2%]\ntests/agents/test_code_review_agent.py::test_pattern_analysis ERROR      [  2%]\ntests/agents/test_code_review_agent.py::test_recommendation_generation ERROR [  3%]\ntests/agents/test_code_review_agent.py::test_scoring_functions ERROR     [  3%]\ntests/test_agent_factory.py::test_create_agent FAILED                    [  4%]\ntests/test_agent_factory.py::test_create_capability_agent FAILED         [  4%]\ntests/test_agent_factory.py::test_agent_initialization FAILED            [  4%]\ntests/test_agent_factory.py::test_agent_capability_management FAILED     [  5%]\ntests/test_agent_integrator.py::test_register_agent ERROR                [  5%]\ntests/test_agent_integrator.py::test_route_message ERROR                 [  6%]\ntests/test_agent_integrator.py::test_broadcast_message ERROR             [  6%]\ntests/test_agent_integrator.py::test_get_agent_status ERROR              [  6%]\ntests/test_agent_integrator.py::test_get_all_agent_statuses ERROR        [  7%]\ntests/test_agent_integrator.py::test_knowledge_graph_updates ERROR       [  7%]\ntests/test_agent_integrator.py::test_knowledge_graph_queries ERROR       [  8%]\ntests/test_agent_integrator.py::test_process_message_called_during_routing ERROR [  8%]\ntests/test_agent_recovery.py::test_agent_recovery_success ERROR          [  8%]\ntests/test_agent_recovery.py::test_agent_recovery_failure ERROR          [  9%]\ntests/test_agent_recovery.py::test_agent_recovery_timeout FAILED         [  9%]\ntests/test_agent_recovery.py::test_agent_recovery_max_attempts ERROR     [ 10%]\ntests/test_agent_recovery.py::test_concurrent_agent_recovery ERROR       [ 10%]\ntests/test_agent_recovery.py::test_agent_recovery_metrics ERROR          [ 10%]\ntests/test_agent_recovery.py::test_agent_recovery_error_handling ERROR   [ 11%]\ntests/test_agent_recovery.py::test_agent_recovery FAILED                 [ 11%]\ntests/test_agent_recovery.py::test_max_recovery_attempts FAILED          [ 12%]\ntests/test_agent_recovery.py::test_role_recovery FAILED                  [ 12%]\ntests/test_agent_recovery.py::test_recovery_metrics FAILED               [ 13%]\ntests/test_agent_recovery.py::test_knowledge_graph_integration FAILED    [ 13%]\ntests/test_agent_recovery.py::test_recovery_strategies ERROR             [ 13%]\ntests/test_agent_recovery.py::test_recovery_strategy_metrics ERROR       [ 14%]\ntests/test_agent_recovery.py::test_recovery_strategy_failure ERROR       [ 14%]\ntests/test_agents.py::TestBaseAgent::test_initialization ERROR           [ 15%]\ntests/test_agents.py::TestBaseAgent::test_state_transitions ERROR        [ 15%]\ntests/test_agents.py::TestBaseAgent::test_message_handling ERROR         [ 15%]\ntests/test_agents.py::TestSensorAgent::test_process_message ERROR        [ 16%]\ntests/test_agents.py::TestDataProcessorAgent::test_process_message ERROR [ 16%]\ntests/test_agents.py::TestPromptAgent::test_prompt_generation ERROR      [ 17%]\ntests/test_agents.py::TestPromptAgent::test_code_review ERROR            [ 17%]\ntests/test_agents.py::TestPromptAgent::test_template_management ERROR    [ 17%]\ntests/test_agents.py::TestPromptAgent::test_error_handling ERROR         [ 18%]\ntests/test_capability_handling.py::test_capability_type_conversion FAILED [ 18%]\ntests/test_capability_handling.py::test_capability_operations PASSED     [ 19%]\ntests/test_capability_handling.py::test_registry_capability_handling FAILED [ 19%]\ntests/test_capability_handling.py::test_capability_consistency FAILED    [ 19%]\ntests/test_capability_handling.py::test_capability_edge_cases FAILED     [ 20%]\ntests/test_capability_handling.py::test_capability_initialization PASSED [ 20%]\ntests/test_capability_management.py::TestCapabilityManagement::test_add_capability ERROR [ 21%]\ntests/test_capability_management.py::TestCapabilityManagement::test_remove_capability ERROR [ 21%]\ntests/test_capability_management.py::TestCapabilityManagement::test_remove_nonexistent_capability ERROR [ 21%]\ntests/test_capability_management.py::TestCapabilityManagement::test_knowledge_graph_updates ERROR [ 22%]\ntests/test_capability_management.py::TestCapabilityManagement::test_capability_conflicts ERROR [ 22%]\ntests/test_capability_management.py::TestCapabilityManagement::test_capability_dependencies ERROR [ 23%]\ntests/test_chat_endpoint.py::test_chat_endpoint PASSED                   [ 23%]\ntests/test_chat_endpoint.py::test_chat_with_history PASSED               [ 23%]\ntests/test_chat_endpoint.py::test_chat_help_message PASSED               [ 24%]\ntests/test_consulting_agents.py::test_engagement_initialization ERROR    [ 24%]\ntests/test_consulting_agents.py::test_strategy_development ERROR         [ 25%]\ntests/test_consulting_agents.py::test_implementation_planning ERROR      [ 25%]\ntests/test_consulting_agents.py::test_value_framework_development ERROR  [ 26%]\ntests/test_consulting_agents.py::test_end_to_end_engagement ERROR        [ 26%]\ntests/test_consulting_agents.py::test_knowledge_graph_consistency ERROR  [ 26%]\ntests/test_consulting_agents.py::test_agent_diary_functionality ERROR    [ 27%]\ntests/test_consulting_agents.py::test_agent_diary_in_knowledge_graph ERROR [ 27%]\ntests/test_dynamic_agents.py::test_agent_initialization ERROR            [ 28%]\ntests/test_dynamic_agents.py::test_capability_tracking ERROR             [ 28%]\ntests/test_dynamic_agents.py::test_knowledge_graph_operations ERROR      [ 28%]\ntests/test_dynamic_agents.py::test_agent_creation FAILED                 [ 29%]\ntests/test_dynamic_agents.py::test_role_delegation FAILED                [ 29%]\ntests/test_dynamic_agents.py::test_agent_scaling FAILED                  [ 30%]\ntests/test_dynamic_agents.py::test_supervisor_agent FAILED               [ 30%]\ntests/test_dynamic_agents.py::test_workload_monitoring FAILED            [ 30%]\ntests/test_email_send.py::test_email PASSED                              [ 31%]\ntests/test_graph_monitoring.py::test_stats_collection FAILED             [ 31%]\ntests/test_graph_monitoring.py::test_timestamp_tracking PASSED           [ 32%]\ntests/test_graph_monitoring.py::test_cache_monitoring PASSED             [ 32%]\ntests/test_graph_monitoring.py::test_index_monitoring PASSED             [ 32%]\ntests/test_graph_monitoring.py::test_performance_monitoring FAILED       [ 33%]\ntests/test_graph_optimizations.py::test_knowledge_graph_manager_add_triple PASSED [ 33%]\ntests/test_graph_optimizations.py::test_knowledge_graph_manager_timestamp_tracking PASSED [ 34%]\ntests/test_graph_optimizations.py::test_async_lru_cache PASSED           [ 34%]\ntests/test_graph_optimizations.py::test_triple_indexing PASSED           [ 34%]\ntests/test_graph_optimizations.py::test_concurrent_operations PASSED     [ 35%]\ntests/test_graph_optimizations.py::test_cache_invalidation PASSED        [ 35%]\ntests/test_graph_performance.py::test_query_performance PASSED           [ 36%]\ntests/test_graph_performance.py::test_concurrent_query_performance PASSED [ 36%]\ntests/test_graph_performance.py::test_indexing_performance PASSED        [ 36%]\ntests/test_graph_performance.py::test_cache_eviction_performance PASSED  [ 37%]\ntests/test_graph_performance.py::test_memory_usage PASSED                [ 37%]\ntests/test_graphdb_integration.py::test_graphdb_connection PASSED        [ 38%]\ntests/test_graphdb_integration.py::test_add_and_query_triple PASSED      [ 38%]\ntests/test_graphdb_integration.py::test_reasoner_with_graphdb PASSED     [ 39%]\ntests/test_graphdb_integration.py::test_traverse_knowledge_graph PASSED  [ 39%]\ntests/test_implementation_guide.py::test_pdf_exists[Data Collected During Interactions.pdf] PASSED [ 39%]\ntests/test_implementation_guide.py::test_pdf_exists[Self-Assembling AI Agent Architectures for Dynamic Corporate Knowledge Systems.pdf] PASSED [ 40%]\ntests/test_implementation_guide.py::test_pdf_exists[Agent Initialization Prompt for a Multi-Agent Knowledge Graph System.pdf] PASSED [ 40%]\ntests/test_implementation_guide.py::test_pdf_exists[Judge Agent System Initialization.pdf] PASSED [ 41%]\ntests/test_implementation_guide.py::test_pdf_exists[Analysis of the Cohort Definition RDF File and Knowledge Graph Integration.pdf] PASSED [ 41%]\ntests/test_implementation_guide.py::test_pdf_exists[Comparable Multi-Agent Knowledge-Graph Systems.pdf] PASSED [ 41%]\ntests/test_implementation_guide.py::test_pdf_header[Data Collected During Interactions.pdf] PASSED [ 42%]\ntests/test_implementation_guide.py::test_pdf_header[Self-Assembling AI Agent Architectures for Dynamic Corporate Knowledge Systems.pdf] PASSED [ 42%]\ntests/test_implementation_guide.py::test_pdf_header[Agent Initialization Prompt for a Multi-Agent Knowledge Graph System.pdf] PASSED [ 43%]\ntests/test_implementation_guide.py::test_pdf_header[Judge Agent System Initialization.pdf] PASSED [ 43%]\ntests/test_implementation_guide.py::test_pdf_header[Analysis of the Cohort Definition RDF File and Knowledge Graph Integration.pdf] PASSED [ 43%]\ntests/test_implementation_guide.py::test_pdf_header[Comparable Multi-Agent Knowledge-Graph Systems.pdf] PASSED [ 44%]\ntests/test_integration_management.py::test_integration_management ERROR  [ 44%]\ntests/test_integration_management.py::test_module_management ERROR       [ 45%]\ntests/test_integration_management.py::test_integration_metrics ERROR     [ 45%]\ntests/test_knowledge_graph.py::test_knowledge_graph_initialization ERROR [ 45%]\ntests/test_knowledge_graph.py::test_agent_knowledge_graph_access ERROR   [ 46%]\ntests/test_knowledge_graph.py::test_knowledge_graph_updates ERROR        [ 46%]\ntests/test_knowledge_graph.py::test_knowledge_graph_validation ERROR     [ 47%]\ntests/test_knowledge_graph.py::test_triple_addition ERROR                [ 47%]\ntests/test_knowledge_graph.py::test_graph_update ERROR                   [ 47%]\ntests/test_knowledge_graph.py::test_graph_query ERROR                    [ 48%]\ntests/test_knowledge_graph.py::test_semantic_relationships ERROR         [ 48%]\ntests/test_knowledge_graph.py::test_complex_query_patterns ERROR         [ 49%]\ntests/test_knowledge_graph.py::test_load_ontology PASSED                 [ 49%]\ntests/test_knowledge_graph.py::test_load_sample_data PASSED              [ 50%]\ntests/test_knowledge_graph.py::test_initialize_graph PASSED              [ 50%]\ntests/test_knowledge_graph.py::test_add_triple PASSED                    [ 50%]\ntests/test_knowledge_graph.py::test_query_graph PASSED                   [ 51%]\ntests/test_knowledge_graph.py::test_performance_metrics PASSED           [ 51%]\ntests/test_knowledge_graph.py::test_type_conversion PASSED               [ 52%]\ntests/test_knowledge_graph.py::test_cache_metrics FAILED                 [ 52%]\ntests/test_knowledge_graph.py::test_clear_metrics PASSED                 [ 52%]\ntests/test_knowledge_graph.py::test_subclass_reasoning_sensors PASSED    [ 53%]\ntests/test_knowledge_graph.py::test_average_sensor_reading_per_machine PASSED [ 53%]\ntests/test_knowledge_graph.py::test_high_alert_sensors PASSED            [ 54%]\ntests/test_knowledge_graph.py::test_machine_status_summary PASSED        [ 54%]\ntests/test_knowledge_graph.py::test_query_no_data PASSED                 [ 54%]\ntests/test_knowledge_graph.py::test_high_risk_machines PASSED            [ 55%]\ntests/test_knowledge_graph.py::test_machine_risk_scoring PASSED          [ 55%]\ntests/test_knowledge_graph.py::test_graph_versioning PASSED              [ 56%]\ntests/test_knowledge_graph.py::test_graph_security PASSED                [ 56%]\ntests/test_knowledge_graph.py::test_graph_validation FAILED              [ 56%]\ntests/test_knowledge_graph.py::test_selective_cache_invalidation FAILED  [ 57%]\ntests/test_knowledge_graph.py::test_enhanced_metrics PASSED              [ 57%]\ntests/test_knowledge_graph.py::test_agentic_ontology_loading PASSED      [ 58%]\ntests/test_knowledge_graph.py::test_kg_manager_cleanup PASSED            [ 58%]\ntests/test_knowledge_graph.py::test_kg_manager_caching PASSED            [ 58%]\ntests/test_knowledge_graph.py::test_kg_manager_cache_invalidation FAILED [ 59%]\ntests/test_knowledge_graph.py::test_kg_manager_cache_ttl FAILED          [ 59%]\ntests/test_knowledge_graph.py::test_kg_manager_concurrent_access PASSED  [ 60%]\ntests/test_knowledge_graph.py::test_kg_manager_error_handling PASSED     [ 60%]\ntests/test_knowledge_graph.py::test_kg_manager_metrics FAILED            [ 60%]\ntests/test_knowledge_graph.py::test_kg_manager_bulk_operations FAILED    [ 61%]\ntests/test_main_api.py::test_investigate PASSED                          [ 61%]\ntests/test_main_api.py::test_traverse PASSED                             [ 62%]\ntests/test_main_api.py::test_feedback PASSED                             [ 62%]\ntests/test_performance.py::TestPerformance::test_message_processing_performance ERROR [ 63%]\ntests/test_performance.py::TestPerformance::test_concurrent_operations ERROR [ 63%]\ntests/test_performance.py::TestPerformance::test_resource_usage ERROR    [ 63%]\ntests/test_performance.py::TestPerformance::test_recovery_performance ERROR [ 64%]\ntests/test_prompt_agent.py::TestPromptAgent::test_prompt_generation ERROR [ 64%]\ntests/test_prompt_agent.py::TestPromptAgent::test_knowledge_graph_integration ERROR [ 65%]\ntests/test_prompt_agent.py::TestPromptAgent::test_prompt_validation ERROR [ 65%]\ntests/test_prompt_agent.py::TestPromptAgent::test_prompt_metrics ERROR   [ 65%]\ntests/test_reasoner.py::test_investigate_research_topic FAILED           [ 66%]\ntests/test_reasoner.py::test_find_topic_entries FAILED                   [ 66%]\ntests/test_reasoner.py::test_find_related_papers FAILED                  [ 67%]\ntests/test_reasoner.py::test_extract_key_insights FAILED                 [ 67%]\ntests/test_reasoner.py::test_calculate_confidence PASSED                 [ 67%]\ntests/test_reasoner.py::test_traverse_knowledge_graph FAILED             [ 68%]\ntests/test_reasoner.py::test_find_related_concepts PASSED                [ 68%]\ntests/test_remote_graph_manager.py::test_query_graph PASSED              [ 69%]\ntests/test_remote_graph_manager.py::test_update_graph PASSED             [ 69%]\ntests/test_remote_graph_manager.py::test_import_graph PASSED             [ 69%]\ntests/test_remote_graph_manager.py::test_remote_graph_manager_integration PASSED [ 70%]\ntests/test_research_agent.py::test_initialize ERROR                      [ 70%]\ntests/test_research_agent.py::test_process_message ERROR                 [ 71%]\ntests/test_research_agent.py::test_test_agent_initialization ERROR       [ 71%]\ntests/test_research_agent.py::test_test_agent_message_history ERROR      [ 71%]\ntests/test_research_agent.py::test_test_agent_knowledge_graph ERROR      [ 72%]\ntests/test_research_agent.py::test_process_message_without_topic ERROR   [ 72%]\ntests/test_research_agent.py::test_process_message_with_topic ERROR      [ 73%]\ntests/test_research_agent.py::test_query_knowledge_graph_without_topic ERROR [ 73%]\ntests/test_research_agent.py::test_query_knowledge_graph_with_topic ERROR [ 73%]\ntests/test_research_agent.py::test_update_knowledge_graph ERROR          [ 74%]\ntests/test_research_agent.py::test_confidence_scoring ERROR              [ 74%]\ntests/test_research_agent.py::test_evidence_tracking ERROR               [ 75%]\ntests/test_research_agent.py::test_multiple_research_paths ERROR         [ 75%]\ntests/test_research_agent.py::test_error_handling ERROR                  [ 76%]\ntests/test_research_agent.py::test_reasoner_integration ERROR            [ 76%]\ntests/test_research_agent.py::test_research_findings_persistence ERROR   [ 76%]\ntests/test_security_audit.py::test_security_levels ERROR                 [ 77%]\ntests/test_security_audit.py::test_audit_logging ERROR                   [ 77%]\ntests/test_security_audit.py::test_security_metrics ERROR                [ 78%]\ntests/test_vertex_auth.py::test_credentials PASSED                       [ 78%]\ntests/test_vertex_auth.py::test_vertex_initialization PASSED             [ 78%]\ntests/test_vertex_auth.py::test_model_access PASSED                      [ 79%]\ntests/test_vertex_email.py::test_vertex_email PASSED                     [ 79%]\ntests/test_vertex_integration.py::test_vertex_initialization PASSED      [ 80%]\ntests/test_vertex_integration.py::test_email_enhancement ERROR           [ 80%]\ntests/test_vertex_integration.py::test_message_processing ERROR          [ 80%]\ntests/test_vertex_integration.py::test_invalid_message_type ERROR        [ 81%]\ntests/test_vertex_integration.py::test_knowledge_graph_integration ERROR [ 81%]\ntests/test_vertex_integration.py::test_error_handling ERROR              [ 82%]\ntests/test_vertex_integration.py::test_empty_subject_and_body ERROR      [ 82%]\ntests/test_vertex_integration.py::test_credentials PASSED                [ 82%]\ntests/test_vertex_integration.py::test_model_access PASSED               [ 83%]\ntests/test_workflow_manager.py::test_agent_registration ERROR            [ 83%]\ntests/test_workflow_manager.py::test_workflow_creation FAILED            [ 84%]\ntests/test_workflow_manager.py::test_workflow_assembly FAILED            [ 84%]\ntests/test_workflow_manager.py::test_workflow_execution ERROR            [ 84%]\ntests/test_workflow_manager.py::test_workflow_supervision ERROR          [ 85%]\ntests/test_workflow_manager.py::test_workflow_validation FAILED          [ 85%]\ntests/test_workflow_manager.py::test_workflow_validation ERROR           [ 85%]\ntests/test_workflow_manager.py::test_load_balancing FAILED               [ 86%]\ntests/test_workflow_manager.py::test_workflow_metrics FAILED             [ 86%]\ntests/test_workflow_manager.py::test_registry_state_consistency FAILED   [ 86%]\ntests/test_workflow_manager.py::test_concurrent_registration_and_assembly FAILED [ 87%]\ntests/test_workflow_manager.py::test_concurrent_registration_and_assembly ERROR [ 87%]\ntests/test_workflow_manager.py::test_registry_recovery FAILED            [ 87%]\ntests/test_workflow_manager.py::test_capability_conflicts FAILED         [ 88%]\ntests/test_workflow_manager.py::test_registry_persistence FAILED         [ 88%]\ntests/test_workflow_manager.py::test_anomaly_detection_workflow ERROR    [ 89%]\ntests/test_workflow_manager.py::test_workflow_dependency_execution ERROR [ 89%]\ntests/test_workflow_manager.py::test_workflow_timeout_handling ERROR     [ 89%]\ntests/test_workflow_manager.py::test_workflow_error_recovery ERROR       [ 90%]\ntests/test_workflow_manager.py::test_transaction_atomicity ERROR         [ 90%]\ntests/test_workflow_manager.py::test_retry_logic ERROR                   [ 91%]\ntests/test_workflow_manager.py::test_concurrent_transactions ERROR       [ 91%]\ntests/test_workflow_manager.py::test_transaction_timeout ERROR           [ 91%]\ntests/test_workflow_persistence.py::test_workflow_persistence_save_load PASSED [ 92%]\ntests/test_workflow_persistence.py::test_workflow_persistence_save_load ERROR [ 92%]\ntests/test_workflow_persistence.py::test_workflow_persistence_versioning FAILED [ 92%]\ntests/test_workflow_persistence.py::test_workflow_persistence_versioning ERROR [ 92%]\ntests/test_workflow_persistence.py::test_workflow_persistence_recovery FAILED [ 93%]\ntests/test_workflow_persistence.py::test_workflow_persistence_recovery ERROR [ 93%]\ntests/test_workflow_persistence.py::test_workflow_monitoring FAILED      [ 93%]\ntests/test_workflow_persistence.py::test_workflow_alerts FAILED          [ 93%]\ntests/test_workflow_persistence.py::test_workflow_manager_integration FAILED [ 94%]\ntests/test_workflow_persistence.py::test_workflow_manager_integration ERROR [ 94%]\ntests/unit/test_additional_agents.py::test_diary_write_and_query ERROR   [ 94%]\ntests/unit/test_additional_agents.py::test_diary_agent ERROR             [ 95%]\ntests/unit/test_additional_agents.py::test_simple_agents_response ERROR  [ 95%]\ntests/unit/test_additional_agents.py::test_simple_agents_knowledge_graph ERROR [ 95%]\ntests/unit/test_corporate_knowledge_agent.py::test_agent_initialization ERROR [ 96%]\ntests/unit/test_corporate_knowledge_agent.py::test_document_ingest ERROR [ 96%]\ntests/unit/test_corporate_knowledge_agent.py::test_knowledge_query ERROR [ 97%]\ntests/unit/test_corporate_knowledge_agent.py::test_document_update ERROR [ 97%]\ntests/unit/test_corporate_knowledge_agent.py::test_unknown_message_type ERROR [ 97%]\ntests/unit/test_judge_agent.py::test_judge_evaluates_email ERROR         [ 98%]\ntests/unit/test_test_agents.py::test_test_agent_initialization FAILED    [ 98%]\ntests/unit/test_test_agents.py::test_test_agent_process_message FAILED   [ 99%]\ntests/unit/test_test_agents.py::test_test_agent_update_knowledge_graph FAILED [ 99%]\ntests/unit/test_vertex_email_agent.py::test_send_email ERROR             [100%]\n\n==================================== ERRORS ====================================\n_________________ ERROR at setup of test_agent_initialization __________________\n\n    @pytest.fixture\n    async def code_review_agent():\n>       agent = CodeReviewAgent()\nE       TypeError: Can't instantiate abstract class CodeReviewAgent with abstract method _process_message_impl\n\ntests/agents/test_code_review_agent.py:8: TypeError\n______________ ERROR at setup of test_code_review_simple_function ______________\n\n    @pytest.fixture\n    async def code_review_agent():\n>       agent = CodeReviewAgent()\nE       TypeError: Can't instantiate abstract class CodeReviewAgent with abstract method _process_message_impl\n\ntests/agents/test_code_review_agent.py:8: TypeError\n_____________ ERROR at setup of test_code_review_complex_function ______________\n\n    @pytest.fixture\n    async def code_review_agent():\n>       agent = CodeReviewAgent()\nE       TypeError: Can't instantiate abstract class CodeReviewAgent with abstract method _process_message_impl\n\ntests/agents/test_code_review_agent.py:8: TypeError\n_____________ ERROR at setup of test_code_review_with_syntax_error _____________\n\n    @pytest.fixture\n    async def code_review_agent():\n>       agent = CodeReviewAgent()\nE       TypeError: Can't instantiate abstract class CodeReviewAgent with abstract method _process_message_impl\n\ntests/agents/test_code_review_agent.py:8: TypeError\n__________________ ERROR at setup of test_complexity_analysis __________________\n\n    @pytest.fixture\n    async def code_review_agent():\n>       agent = CodeReviewAgent()\nE       TypeError: Can't instantiate abstract class CodeReviewAgent with abstract method _process_message_impl\n\ntests/agents/test_code_review_agent.py:8: TypeError\n_________________ ERROR at setup of test_code_quality_analysis _________________\n\n    @pytest.fixture\n    async def code_review_agent():\n>       agent = CodeReviewAgent()\nE       TypeError: Can't instantiate abstract class CodeReviewAgent with abstract method _process_message_impl\n\ntests/agents/test_code_review_agent.py:8: TypeError\n___________________ ERROR at setup of test_pattern_analysis ____________________\n\n    @pytest.fixture\n    async def code_review_agent():\n>       agent = CodeReviewAgent()\nE       TypeError: Can't instantiate abstract class CodeReviewAgent with abstract method _process_message_impl\n\ntests/agents/test_code_review_agent.py:8: TypeError\n_______________ ERROR at setup of test_recommendation_generation _______________\n\n    @pytest.fixture\n    async def code_review_agent():\n>       agent = CodeReviewAgent()\nE       TypeError: Can't instantiate abstract class CodeReviewAgent with abstract method _process_message_impl\n\ntests/agents/test_code_review_agent.py:8: TypeError\n___________________ ERROR at setup of test_scoring_functions ___________________\n\n    @pytest.fixture\n    async def code_review_agent():\n>       agent = CodeReviewAgent()\nE       TypeError: Can't instantiate abstract class CodeReviewAgent with abstract method _process_message_impl\n\ntests/agents/test_code_review_agent.py:8: TypeError\n____________________ ERROR at setup of test_register_agent _____________________\n\n    @pytest_asyncio.fixture\n    async def integrator():\n        \"\"\"Create an AgentIntegrator instance for testing.\"\"\"\n        kg = KnowledgeGraphManager()\n        await kg.initialize()\n        integrator = AgentIntegrator(kg)\n>       await integrator.initialize()\n\ntests/test_agent_integrator.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.agent_integrator.AgentIntegrator object at 0x3023504d0>\n\n    async def initialize(self) -> None:\n        \"\"\"Initialize the agent registry and discover agents.\"\"\"\n        try:\n>           await self.registry.discover_agents()\nE           AttributeError: 'AgentRegistry' object has no attribute 'discover_agents'\n\nagents/core/agent_integrator.py:19: AttributeError\n---------------------------- Captured stderr setup -----------------------------\n2025-06-04 22:05:22.428 | DEBUG    | kg.models.graph_manager:initialize:541 - Knowledge graph initialized\n2025-06-04 22:05:22.428 | ERROR    | agents.core.agent_integrator:initialize:22 - Failed to initialize agent registry: 'AgentRegistry' object has no attribute 'discover_agents'\n_____________________ ERROR at setup of test_route_message _____________________\n\n    @pytest_asyncio.fixture\n    async def integrator():\n        \"\"\"Create an AgentIntegrator instance for testing.\"\"\"\n        kg = KnowledgeGraphManager()\n        await kg.initialize()\n        integrator = AgentIntegrator(kg)\n>       await integrator.initialize()\n\ntests/test_agent_integrator.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.agent_integrator.AgentIntegrator object at 0x302384950>\n\n    async def initialize(self) -> None:\n        \"\"\"Initialize the agent registry and discover agents.\"\"\"\n        try:\n>           await self.registry.discover_agents()\nE           AttributeError: 'AgentRegistry' object has no attribute 'discover_agents'\n\nagents/core/agent_integrator.py:19: AttributeError\n---------------------------- Captured stderr setup -----------------------------\n2025-06-04 22:05:22.432 | DEBUG    | kg.models.graph_manager:initialize:541 - Knowledge graph initialized\n2025-06-04 22:05:22.432 | ERROR    | agents.core.agent_integrator:initialize:22 - Failed to initialize agent registry: 'AgentRegistry' object has no attribute 'discover_agents'\n___________________ ERROR at setup of test_broadcast_message ___________________\n\n    @pytest_asyncio.fixture\n    async def integrator():\n        \"\"\"Create an AgentIntegrator instance for testing.\"\"\"\n        kg = KnowledgeGraphManager()\n        await kg.initialize()\n        integrator = AgentIntegrator(kg)\n>       await integrator.initialize()\n\ntests/test_agent_integrator.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.agent_integrator.AgentIntegrator object at 0x30241d850>\n\n    async def initialize(self) -> None:\n        \"\"\"Initialize the agent registry and discover agents.\"\"\"\n        try:\n>           await self.registry.discover_agents()\nE           AttributeError: 'AgentRegistry' object has no attribute 'discover_agents'\n\nagents/core/agent_integrator.py:19: AttributeError\n---------------------------- Captured stderr setup -----------------------------\n2025-06-04 22:05:22.435 | DEBUG    | kg.models.graph_manager:initialize:541 - Knowledge graph initialized\n2025-06-04 22:05:22.436 | ERROR    | agents.core.agent_integrator:initialize:22 - Failed to initialize agent registry: 'AgentRegistry' object has no attribute 'discover_agents'\n___________________ ERROR at setup of test_get_agent_status ____________________\n\n    @pytest_asyncio.fixture\n    async def integrator():\n        \"\"\"Create an AgentIntegrator instance for testing.\"\"\"\n        kg = KnowledgeGraphManager()\n        await kg.initialize()\n        integrator = AgentIntegrator(kg)\n>       await integrator.initialize()\n\ntests/test_agent_integrator.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.agent_integrator.AgentIntegrator object at 0x302433950>\n\n    async def initialize(self) -> None:\n        \"\"\"Initialize the agent registry and discover agents.\"\"\"\n        try:\n>           await self.registry.discover_agents()\nE           AttributeError: 'AgentRegistry' object has no attribute 'discover_agents'\n\nagents/core/agent_integrator.py:19: AttributeError\n---------------------------- Captured stderr setup -----------------------------\n2025-06-04 22:05:22.438 | DEBUG    | kg.models.graph_manager:initialize:541 - Knowledge graph initialized\n2025-06-04 22:05:22.438 | ERROR    | agents.core.agent_integrator:initialize:22 - Failed to initialize agent registry: 'AgentRegistry' object has no attribute 'discover_agents'\n________________ ERROR at setup of test_get_all_agent_statuses _________________\n\n    @pytest_asyncio.fixture\n    async def integrator():\n        \"\"\"Create an AgentIntegrator instance for testing.\"\"\"\n        kg = KnowledgeGraphManager()\n        await kg.initialize()\n        integrator = AgentIntegrator(kg)\n>       await integrator.initialize()\n\ntests/test_agent_integrator.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.agent_integrator.AgentIntegrator object at 0x302431f50>\n\n    async def initialize(self) -> None:\n        \"\"\"Initialize the agent registry and discover agents.\"\"\"\n        try:\n>           await self.registry.discover_agents()\nE           AttributeError: 'AgentRegistry' object has no attribute 'discover_agents'\n\nagents/core/agent_integrator.py:19: AttributeError\n---------------------------- Captured stderr setup -----------------------------\n2025-06-04 22:05:22.442 | DEBUG    | kg.models.graph_manager:initialize:541 - Knowledge graph initialized\n2025-06-04 22:05:22.442 | ERROR    | agents.core.agent_integrator:initialize:22 - Failed to initialize agent registry: 'AgentRegistry' object has no attribute 'discover_agents'\n________________ ERROR at setup of test_knowledge_graph_updates ________________\n\n    @pytest_asyncio.fixture\n    async def integrator():\n        \"\"\"Create an AgentIntegrator instance for testing.\"\"\"\n        kg = KnowledgeGraphManager()\n        await kg.initialize()\n        integrator = AgentIntegrator(kg)\n>       await integrator.initialize()\n\ntests/test_agent_integrator.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.agent_integrator.AgentIntegrator object at 0x30245f2d0>\n\n    async def initialize(self) -> None:\n        \"\"\"Initialize the agent registry and discover agents.\"\"\"\n        try:\n>           await self.registry.discover_agents()\nE           AttributeError: 'AgentRegistry' object has no attribute 'discover_agents'\n\nagents/core/agent_integrator.py:19: AttributeError\n---------------------------- Captured stderr setup -----------------------------\n2025-06-04 22:05:22.445 | DEBUG    | kg.models.graph_manager:initialize:541 - Knowledge graph initialized\n2025-06-04 22:05:22.445 | ERROR    | agents.core.agent_integrator:initialize:22 - Failed to initialize agent registry: 'AgentRegistry' object has no attribute 'discover_agents'\n________________ ERROR at setup of test_knowledge_graph_queries ________________\n\n    @pytest_asyncio.fixture\n    async def integrator():\n        \"\"\"Create an AgentIntegrator instance for testing.\"\"\"\n        kg = KnowledgeGraphManager()\n        await kg.initialize()\n        integrator = AgentIntegrator(kg)\n>       await integrator.initialize()\n\ntests/test_agent_integrator.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.agent_integrator.AgentIntegrator object at 0x302434e90>\n\n    async def initialize(self) -> None:\n        \"\"\"Initialize the agent registry and discover agents.\"\"\"\n        try:\n>           await self.registry.discover_agents()\nE           AttributeError: 'AgentRegistry' object has no attribute 'discover_agents'\n\nagents/core/agent_integrator.py:19: AttributeError\n---------------------------- Captured stderr setup -----------------------------\n2025-06-04 22:05:22.448 | DEBUG    | kg.models.graph_manager:initialize:541 - Knowledge graph initialized\n2025-06-04 22:05:22.448 | ERROR    | agents.core.agent_integrator:initialize:22 - Failed to initialize agent registry: 'AgentRegistry' object has no attribute 'discover_agents'\n_________ ERROR at setup of test_process_message_called_during_routing _________\n\n    @pytest_asyncio.fixture\n    async def integrator():\n        \"\"\"Create an AgentIntegrator instance for testing.\"\"\"\n        kg = KnowledgeGraphManager()\n        await kg.initialize()\n        integrator = AgentIntegrator(kg)\n>       await integrator.initialize()\n\ntests/test_agent_integrator.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.agent_integrator.AgentIntegrator object at 0x302333f90>\n\n    async def initialize(self) -> None:\n        \"\"\"Initialize the agent registry and discover agents.\"\"\"\n        try:\n>           await self.registry.discover_agents()\nE           AttributeError: 'AgentRegistry' object has no attribute 'discover_agents'\n\nagents/core/agent_integrator.py:19: AttributeError\n---------------------------- Captured stderr setup -----------------------------\n2025-06-04 22:05:22.451 | DEBUG    | kg.models.graph_manager:initialize:541 - Knowledge graph initialized\n2025-06-04 22:05:22.452 | ERROR    | agents.core.agent_integrator:initialize:22 - Failed to initialize agent registry: 'AgentRegistry' object has no attribute 'discover_agents'\n________________ ERROR at setup of test_agent_recovery_success _________________\n\nknowledge_graph = <kg.models.graph_manager.KnowledgeGraphManager object at 0x30233cc90>\n\n    @pytest_asyncio.fixture\n    async def recovery_agent(knowledge_graph):\n        \"\"\"Create a test recovery agent.\"\"\"\n        agent = TestRecoveryAgent(\n            agent_id=\"recovery_test_agent\",\n            agent_type=\"recovery_test\",\n            capabilities={\n                Capability(CapabilityType.TASK_EXECUTION, \"1.0\"),\n                Capability(CapabilityType.RECOVERY, \"1.0\")\n            }\n        )\n        agent.knowledge_graph = knowledge_graph\n        try:\n>           await agent.initialize()\n\ntests/test_agent_recovery.py:263: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/test_helpers.py:120: in initialize\n    await super().initialize()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_agent_recovery.TestRecoveryAgent object at 0x302427510>\n\n    async def initialize(self) -> None:\n        \"\"\"Initialize the agent and its resources.\"\"\"\n        if self._is_initialized:\n            return\n    \n        async with self._initialization_lock:\n            if self._is_initialized:  # Double-check after acquiring lock\n                return\n    \n            try:\n                # Initialize capabilities set first\n>               await self._capabilities.initialize()\nE               AttributeError: 'set' object has no attribute 'initialize'\n\nagents/core/base_agent.py:81: AttributeError\n---------------------------- Captured stderr setup -----------------------------\n2025-06-04T22:05:22.457900-0400 | DEBUG | Knowledge graph initialized\n2025-06-04T22:05:22.458060-0400 | ERROR | Failed to initialize agent recovery_test_agent: 'set' object has no attribute 'initialize'\n2025-06-04T22:05:22.458085-0400 | ERROR | Failed to initialize agent recovery_test_agent: 'set' object has no attribute 'initialize'\n2025-06-04T22:05:22.458126-0400 | INFO | Cleaned up agent resources\n________________ ERROR at setup of test_agent_recovery_failure _________________\n\nknowledge_graph = <kg.models.graph_manager.KnowledgeGraphManager object at 0x30245f210>\n\n    @pytest_asyncio.fixture\n    async def recovery_agent(knowledge_graph):\n        \"\"\"Create a test recovery agent.\"\"\"\n        agent = TestRecoveryAgent(\n            agent_id=\"recovery_test_agent\",\n            agent_type=\"recovery_test\",\n            capabilities={\n                Capability(CapabilityType.TASK_EXECUTION, \"1.0\"),\n                Capability(CapabilityType.RECOVERY, \"1.0\")\n            }\n        )\n        agent.knowledge_graph = knowledge_graph\n        try:\n>           await agent.initialize()\n\ntests/test_agent_recovery.py:263: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/test_helpers.py:120: in initialize\n    await super().initialize()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_agent_recovery.TestRecoveryAgent object at 0x30245f250>\n\n    async def initialize(self) -> None:\n        \"\"\"Initialize the agent and its resources.\"\"\"\n        if self._is_initialized:\n            return\n    \n        async with self._initialization_lock:\n            if self._is_initialized:  # Double-check after acquiring lock\n                return\n    \n            try:\n                # Initialize capabilities set first\n>               await self._capabilities.initialize()\nE               AttributeError: 'set' object has no attribute 'initialize'\n\nagents/core/base_agent.py:81: AttributeError\n---------------------------- Captured stderr setup -----------------------------\n2025-06-04T22:05:22.471007-0400 | DEBUG | Knowledge graph initialized\n2025-06-04T22:05:22.471166-0400 | ERROR | Failed to initialize agent recovery_test_agent: 'set' object has no attribute 'initialize'\n2025-06-04T22:05:22.471195-0400 | ERROR | Failed to initialize agent recovery_test_agent: 'set' object has no attribute 'initialize'\n2025-06-04T22:05:22.471244-0400 | INFO | Cleaned up agent resources\n______________ ERROR at setup of test_agent_recovery_max_attempts ______________\n\nknowledge_graph = <kg.models.graph_manager.KnowledgeGraphManager object at 0x302436e90>\n\n    @pytest_asyncio.fixture\n    async def recovery_agent(knowledge_graph):\n        \"\"\"Create a test recovery agent.\"\"\"\n        agent = TestRecoveryAgent(\n            agent_id=\"recovery_test_agent\",\n            agent_type=\"recovery_test\",\n            capabilities={\n                Capability(CapabilityType.TASK_EXECUTION, \"1.0\"),\n                Capability(CapabilityType.RECOVERY, \"1.0\")\n            }\n        )\n        agent.knowledge_graph = knowledge_graph\n        try:\n>           await agent.initialize()\n\ntests/test_agent_recovery.py:263: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/test_helpers.py:120: in initialize\n    await super().initialize()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_agent_recovery.TestRecoveryAgent object at 0x3024355d0>\n\n    async def initialize(self) -> None:\n        \"\"\"Initialize the agent and its resources.\"\"\"\n        if self._is_initialized:\n            return\n    \n        async with self._initialization_lock:\n            if self._is_initialized:  # Double-check after acquiring lock\n                return\n    \n            try:\n                # Initialize capabilities set first\n>               await self._capabilities.initialize()\nE               AttributeError: 'set' object has no attribute 'initialize'\n\nagents/core/base_agent.py:81: AttributeError\n---------------------------- Captured stderr setup -----------------------------\n2025-06-04T22:05:22.498056-0400 | DEBUG | Knowledge graph initialized\n2025-06-04T22:05:22.498193-0400 | ERROR | Failed to initialize agent recovery_test_agent: 'set' object has no attribute 'initialize'\n2025-06-04T22:05:22.498214-0400 | ERROR | Failed to initialize agent recovery_test_agent: 'set' object has no attribute 'initialize'\n2025-06-04T22:05:22.498248-0400 | INFO | Cleaned up agent resources\n_______________ ERROR at setup of test_concurrent_agent_recovery _______________\n\nknowledge_graph = <kg.models.graph_manager.KnowledgeGraphManager object at 0x30245e050>\n\n    @pytest_asyncio.fixture\n    async def recovery_agent(knowledge_graph):\n        \"\"\"Create a test recovery agent.\"\"\"\n        agent = TestRecoveryAgent(\n            agent_id=\"recovery_test_agent\",\n            agent_type=\"recovery_test\",\n            capabilities={\n                Capability(CapabilityType.TASK_EXECUTION, \"1.0\"),\n                Capability(CapabilityType.RECOVERY, \"1.0\")\n            }\n        )\n        agent.knowledge_graph = knowledge_graph\n        try:\n>           await agent.initialize()\n\ntests/test_agent_recovery.py:263: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/test_helpers.py:120: in initialize\n    await super().initialize()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_agent_recovery.TestRecoveryAgent object at 0x30245d990>\n\n    async def initialize(self) -> None:\n        \"\"\"Initialize the agent and its resources.\"\"\"\n        if self._is_initialized:\n            return\n    \n        async with self._initialization_lock:\n            if self._is_initialized:  # Double-check after acquiring lock\n                return\n    \n            try:\n                # Initialize capabilities set first\n>               await self._capabilities.initialize()\nE               AttributeError: 'set' object has no attribute 'initialize'\n\nagents/core/base_agent.py:81: AttributeError\n---------------------------- Captured stderr setup -----------------------------\n2025-06-04T22:05:22.510202-0400 | DEBUG | Knowledge graph initialized\n2025-06-04T22:05:22.510331-0400 | ERROR | Failed to initialize agent recovery_test_agent: 'set' object has no attribute 'initialize'\n2025-06-04T22:05:22.510351-0400 | ERROR | Failed to initialize agent recovery_test_agent: 'set' object has no attribute 'initialize'\n2025-06-04T22:05:22.510395-0400 | INFO | Cleaned up agent resources\n________________ ERROR at setup of test_agent_recovery_metrics _________________\n\nknowledge_graph = <kg.models.graph_manager.KnowledgeGraphManager object at 0x3024d4150>\n\n    @pytest_asyncio.fixture\n    async def recovery_agent(knowledge_graph):\n        \"\"\"Create a test recovery agent.\"\"\"\n        agent = TestRecoveryAgent(\n            agent_id=\"recovery_test_agent\",\n            agent_type=\"recovery_test\",\n            capabilities={\n                Capability(CapabilityType.TASK_EXECUTION, \"1.0\"),\n                Capability(CapabilityType.RECOVERY, \"1.0\")\n            }\n        )\n        agent.knowledge_graph = knowledge_graph\n        try:\n>           await agent.initialize()\n\ntests/test_agent_recovery.py:263: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/test_helpers.py:120: in initialize\n    await super().initialize()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_agent_recovery.TestRecoveryAgent object at 0x3024d4110>\n\n    async def initialize(self) -> None:\n        \"\"\"Initialize the agent and its resources.\"\"\"\n        if self._is_initialized:\n            return\n    \n        async with self._initialization_lock:\n            if self._is_initialized:  # Double-check after acquiring lock\n                return\n    \n            try:\n                # Initialize capabilities set first\n>               await self._capabilities.initialize()\nE               AttributeError: 'set' object has no attribute 'initialize'\n\nagents/core/base_agent.py:81: AttributeError\n---------------------------- Captured stderr setup -----------------------------\n2025-06-04T22:05:22.523401-0400 | DEBUG | Knowledge graph initialized\n2025-06-04T22:05:22.523544-0400 | ERROR | Failed to initialize agent recovery_test_agent: 'set' object has no attribute 'initialize'\n2025-06-04T22:05:22.523569-0400 | ERROR | Failed to initialize agent recovery_test_agent: 'set' object has no attribute 'initialize'\n2025-06-04T22:05:22.523603-0400 | INFO | Cleaned up agent resources\n_____________ ERROR at setup of test_agent_recovery_error_handling _____________\n\nknowledge_graph = <kg.models.graph_manager.KnowledgeGraphManager object at 0x302400f50>\n\n    @pytest_asyncio.fixture\n    async def recovery_agent(knowledge_graph):\n        \"\"\"Create a test recovery agent.\"\"\"\n        agent = TestRecoveryAgent(\n            agent_id=\"recovery_test_agent\",\n            agent_type=\"recovery_test\",\n            capabilities={\n                Capability(CapabilityType.TASK_EXECUTION, \"1.0\"),\n                Capability(CapabilityType.RECOVERY, \"1.0\")\n            }\n        )\n        agent.knowledge_graph = knowledge_graph\n        try:\n>           await agent.initialize()\n\ntests/test_agent_recovery.py:263: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/test_helpers.py:120: in initialize\n    await super().initialize()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_agent_recovery.TestRecoveryAgent object at 0x302400550>\n\n    async def initialize(self) -> None:\n        \"\"\"Initialize the agent and its resources.\"\"\"\n        if self._is_initialized:\n            return\n    \n        async with self._initialization_lock:\n            if self._is_initialized:  # Double-check after acquiring lock\n                return\n    \n            try:\n                # Initialize capabilities set first\n>               await self._capabilities.initialize()\nE               AttributeError: 'set' object has no attribute 'initialize'\n\nagents/core/base_agent.py:81: AttributeError\n---------------------------- Captured stderr setup -----------------------------\n2025-06-04T22:05:22.536070-0400 | DEBUG | Knowledge graph initialized\n2025-06-04T22:05:22.536224-0400 | ERROR | Failed to initialize agent recovery_test_agent: 'set' object has no attribute 'initialize'\n2025-06-04T22:05:22.536255-0400 | ERROR | Failed to initialize agent recovery_test_agent: 'set' object has no attribute 'initialize'\n2025-06-04T22:05:22.536297-0400 | INFO | Cleaned up agent resources\n__________________ ERROR at setup of test_recovery_strategies __________________\n\nknowledge_graph = <kg.models.graph_manager.KnowledgeGraphManager object at 0x3024264d0>\n\n    @pytest_asyncio.fixture\n    async def recovery_agent(knowledge_graph):\n        \"\"\"Create a test recovery agent.\"\"\"\n        agent = TestRecoveryAgent(\n            agent_id=\"recovery_test_agent\",\n            agent_type=\"recovery_test\",\n            capabilities={\n                Capability(CapabilityType.TASK_EXECUTION, \"1.0\"),\n                Capability(CapabilityType.RECOVERY, \"1.0\")\n            }\n        )\n        agent.knowledge_graph = knowledge_graph\n        try:\n>           await agent.initialize()\n\ntests/test_agent_recovery.py:263: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/test_helpers.py:120: in initialize\n    await super().initialize()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_agent_recovery.TestRecoveryAgent object at 0x302426490>\n\n    async def initialize(self) -> None:\n        \"\"\"Initialize the agent and its resources.\"\"\"\n        if self._is_initialized:\n            return\n    \n        async with self._initialization_lock:\n            if self._is_initialized:  # Double-check after acquiring lock\n                return\n    \n            try:\n                # Initialize capabilities set first\n>               await self._capabilities.initialize()\nE               AttributeError: 'set' object has no attribute 'initialize'\n\nagents/core/base_agent.py:81: AttributeError\n---------------------------- Captured stderr setup -----------------------------\n2025-06-04T22:05:22.725088-0400 | DEBUG | Knowledge graph initialized\n2025-06-04T22:05:22.725227-0400 | ERROR | Failed to initialize agent recovery_test_agent: 'set' object has no attribute 'initialize'\n2025-06-04T22:05:22.725248-0400 | ERROR | Failed to initialize agent recovery_test_agent: 'set' object has no attribute 'initialize'\n2025-06-04T22:05:22.725286-0400 | INFO | Cleaned up agent resources\n_______________ ERROR at setup of test_recovery_strategy_metrics _______________\n\nknowledge_graph = <kg.models.graph_manager.KnowledgeGraphManager object at 0x3023ffcd0>\n\n    @pytest_asyncio.fixture\n    async def recovery_agent(knowledge_graph):\n        \"\"\"Create a test recovery agent.\"\"\"\n        agent = TestRecoveryAgent(\n            agent_id=\"recovery_test_agent\",\n            agent_type=\"recovery_test\",\n            capabilities={\n                Capability(CapabilityType.TASK_EXECUTION, \"1.0\"),\n                Capability(CapabilityType.RECOVERY, \"1.0\")\n            }\n        )\n        agent.knowledge_graph = knowledge_graph\n        try:\n>           await agent.initialize()\n\ntests/test_agent_recovery.py:263: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/test_helpers.py:120: in initialize\n    await super().initialize()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_agent_recovery.TestRecoveryAgent object at 0x30260cd10>\n\n    async def initialize(self) -> None:\n        \"\"\"Initialize the agent and its resources.\"\"\"\n        if self._is_initialized:\n            return\n    \n        async with self._initialization_lock:\n            if self._is_initialized:  # Double-check after acquiring lock\n                return\n    \n            try:\n                # Initialize capabilities set first\n>               await self._capabilities.initialize()\nE               AttributeError: 'set' object has no attribute 'initialize'\n\nagents/core/base_agent.py:81: AttributeError\n---------------------------- Captured stderr setup -----------------------------\n2025-06-04T22:05:22.737976-0400 | DEBUG | Knowledge graph initialized\n2025-06-04T22:05:22.738101-0400 | ERROR | Failed to initialize agent recovery_test_agent: 'set' object has no attribute 'initialize'\n2025-06-04T22:05:22.738125-0400 | ERROR | Failed to initialize agent recovery_test_agent: 'set' object has no attribute 'initialize'\n2025-06-04T22:05:22.738159-0400 | INFO | Cleaned up agent resources\n_______________ ERROR at setup of test_recovery_strategy_failure _______________\n\nknowledge_graph = <kg.models.graph_manager.KnowledgeGraphManager object at 0x3023facd0>\n\n    @pytest_asyncio.fixture\n    async def recovery_agent(knowledge_graph):\n        \"\"\"Create a test recovery agent.\"\"\"\n        agent = TestRecoveryAgent(\n            agent_id=\"recovery_test_agent\",\n            agent_type=\"recovery_test\",\n            capabilities={\n                Capability(CapabilityType.TASK_EXECUTION, \"1.0\"),\n                Capability(CapabilityType.RECOVERY, \"1.0\")\n            }\n        )\n        agent.knowledge_graph = knowledge_graph\n        try:\n>           await agent.initialize()\n\ntests/test_agent_recovery.py:263: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/test_helpers.py:120: in initialize\n    await super().initialize()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tests.test_agent_recovery.TestRecoveryAgent object at 0x3023fbcd0>\n\n    async def initialize(self) -> None:\n        \"\"\"Initialize the agent and its resources.\"\"\"\n        if self._is_initialized:\n            return\n    \n        async with self._initialization_lock:\n            if self._is_initialized:  # Double-check after acquiring lock\n                return\n    \n            try:\n                # Initialize capabilities set first\n>               await self._capabilities.initialize()\nE               AttributeError: 'set' object has no attribute 'initialize'\n\nagents/core/base_agent.py:81: AttributeError\n---------------------------- Captured stderr setup -----------------------------\n2025-06-04T22:05:22.750352-0400 | DEBUG | Knowledge graph initialized\n2025-06-04T22:05:22.750509-0400 | ERROR | Failed to initialize agent recovery_test_agent: 'set' object has no attribute 'initialize'\n2025-06-04T22:05:22.750539-0400 | ERROR | Failed to initialize agent recovery_test_agent: 'set' object has no attribute 'initialize'\n2025-06-04T22:05:22.750579-0400 | INFO | Cleaned up agent resources\n_____________ ERROR at setup of TestBaseAgent.test_initialization ______________\n\nself = <tests.test_agents.TestBaseAgent object at 0x110ac8b10>\n\n    @pytest_asyncio.fixture\n    async def setup_base_agent(self):\n        \"\"\"Set up test environment for base agent.\"\"\"\n>       agent = TestableBaseAgent(\n            agent_id=\"test_base_agent\",\n            agent_type=\"test\",\n            capabilities={Capability(CapabilityType.TASK_EXECUTION, \"1.0\")}\n        )\nE       TypeError: Can't instantiate abstract class TestableBaseAgent with abstract method _process_message_impl\n\ntests/test_agents.py:31: TypeError\n____________ ERROR at setup of TestBaseAgent.test_state_transitions ____________\n\nself = <tests.test_agents.TestBaseAgent object at 0x110ac9090>\n\n    @pytest_asyncio.fixture\n    async def setup_base_agent(self):\n        \"\"\"Set up test environment for base agent.\"\"\"\n>       agent = TestableBaseAgent(\n            agent_id=\"test_base_agent\",\n            agent_type=\"test\",\n            capabilities={Capability(CapabilityType.TASK_EXECUTION, \"1.0\")}\n        )\nE       TypeError: Can't instantiate abstract class TestableBaseAgent with abstract method _process_message_impl\n\ntests/test_agents.py:31: TypeError\n____________ ERROR at setup of TestBaseAgent.test_message_handling _____________\n\nself = <tests.test_agents.TestBaseAgent object at 0x110ac9810>\n\n    @pytest_asyncio.fixture\n    async def setup_base_agent(self):\n        \"\"\"Set up test environment for base agent.\"\"\"\n>       agent = TestableBaseAgent(\n            agent_id=\"test_base_agent\",\n            agent_type=\"test\",\n            capabilities={Capability(CapabilityType.TASK_EXECUTION, \"1.0\")}\n        )\nE       TypeError: Can't instantiate abstract class TestableBaseAgent with abstract method _process_message_impl\n\ntests/test_agents.py:31: TypeError\n____________ ERROR at setup of TestSensorAgent.test_process_message ____________\n\nself = <tests.test_agents.TestSensorAgent object at 0x110aca310>\n\n    @pytest_asyncio.fixture\n    async def setup_sensor_agent(self):\n        \"\"\"Set up test environment for sensor agent.\"\"\"\n>       agent = SensorAgent()\nE       TypeError: Can't instantiate abstract class SensorAgent with abstract method _process_message_impl\n\ntests/test_agents.py:85: TypeError\n________ ERROR at setup of TestDataProcessorAgent.test_process_message _________\n\nself = <tests.test_agents.TestDataProcessorAgent object at 0x110acb210>\n\n    @pytest_asyncio.fixture\n    async def setup_data_processor_agent(self):\n        \"\"\"Set up test environment for data processor agent.\"\"\"\n>       agent = DataProcessorAgent()\nE       TypeError: Can't instantiate abstract class DataProcessorAgent with abstract method _process_message_impl\n\ntests/test_agents.py:109: TypeError\n___________ ERROR at setup of TestPromptAgent.test_prompt_generation ___________\n\nself = <tests.test_agents.TestPromptAgent object at 0x110acbed0>\n\n    @pytest_asyncio.fixture\n    async def setup_prompt_agent(self):\n        \"\"\"Set up test environment for prompt agent.\"\"\"\n        knowledge_graph = Graph()\n>       agent = AgenticPromptAgent(\n            \"test_prompt_agent\",\n            capabilities={\n                Capability(CapabilityType.CODE_REVIEW, \"1.0\"),\n                Capability(CapabilityType.KNOWLEDGE_GRAPH_QUERY, \"1.0\"),\n                Capability(CapabilityType.KNOWLEDGE_GRAPH_UPDATE, \"1.0\")\n            },\n            config={\n                \"consensus_threshold\": 0.75,\n                \"prompt_templates\": {\n                    \"code_review\": {\n                        \"role\": \"You are a {role} specializing in {specialization}.\",\n                        \"context\": \"Context:\\n{context}\",\n                        \"objective\": \"Objective:\\n{objective}\",\n                        \"approach\": \"Approach:\\n{approach}\",\n                        \"documentation\": \"Documentation:\\n{documentation}\"\n                    }\n                }\n            }\n        )\nE       TypeError: Can't instantiate abstract class AgenticPromptAgent with abstract method _process_message_impl\n\ntests/test_agents.py:134: TypeError\n______________ ERROR at setup of TestPromptAgent.test_code_review ______________\n\nself = <tests.test_agents.TestPromptAgent object at 0x1109b8590>\n\n    @pytest_asyncio.fixture\n    async def setup_prompt_agent(self):\n        \"\"\"Set up test environment for prompt agent.\"\"\"\n        knowledge_graph = Graph()\n>       agent = AgenticPromptAgent(\n            \"test_prompt_agent\",\n            capabilities={\n                Capability(CapabilityType.CODE_REVIEW, \"1.0\"),\n                Capability(CapabilityType.KNOWLEDGE_GRAPH_QUERY, \"1.0\"),\n                Capability(CapabilityType.KNOWLEDGE_GRAPH_UPDATE, \"1.0\")\n            },\n            config={\n                \"consensus_threshold\": 0.75,\n                \"prompt_templates\": {\n                    \"code_review\": {\n                        \"role\": \"You are a {role} specializing in {specialization}.\",\n                        \"context\": \"Context:\\n{context}\",\n                        \"objective\": \"Objective:\\n{objective}\",\n                        \"approach\": \"Approach:\\n{approach}\",\n                        \"documentation\": \"Documentation:\\n{documentation}\"\n                    }\n                }\n            }\n        )\nE       TypeError: Can't instantiate abstract class AgenticPromptAgent with abstract method _process_message_impl\n\ntests/test_agents.py:134: TypeError\n__________ ERROR at setup of TestPromptAgent.test_template_management __________\n\nself = <tests.test_agents.TestPromptAgent object at 0x1109b87d0>\n\n    @pytest_asyncio.fixture\n    async def setup_prompt_agent(self):\n        \"\"\"Set up test environment for prompt agent.\"\"\"\n        knowledge_graph = Graph()\n>       agent = AgenticPromptAgent(\n            \"test_prompt_agent\",\n            capabilities={\n                Capability(CapabilityType.CODE_REVIEW, \"1.0\"),\n                Capability(CapabilityType.KNOWLEDGE_GRAPH_QUERY, \"1.0\"),\n                Capability(CapabilityType.KNOWLEDGE_GRAPH_UPDATE, \"1.0\")\n            },\n            config={\n                \"consensus_threshold\": 0.75,\n                \"prompt_templates\": {\n                    \"code_review\": {\n                        \"role\": \"You are a {role} specializing in {specialization}.\",\n                        \"context\": \"Context:\\n{context}\",\n                        \"objective\": \"Objective:\\n{objective}\",\n                        \"approach\": \"Approach:\\n{approach}\",\n                        \"documentation\": \"Documentation:\\n{documentation}\"\n                    }\n                }\n            }\n        )\nE       TypeError: Can't instantiate abstract class AgenticPromptAgent with abstract method _process_message_impl\n\ntests/test_agents.py:134: TypeError\n____________ ERROR at setup of TestPromptAgent.test_error_handling _____________\n\nself = <tests.test_agents.TestPromptAgent object at 0x110acacd0>\n\n    @pytest_asyncio.fixture\n    async def setup_prompt_agent(self):\n        \"\"\"Set up test environment for prompt agent.\"\"\"\n        knowledge_graph = Graph()\n>       agent = AgenticPromptAgent(\n            \"test_prompt_agent\",\n            capabilities={\n                Capability(CapabilityType.CODE_REVIEW, \"1.0\"),\n                Capability(CapabilityType.KNOWLEDGE_GRAPH_QUERY, \"1.0\"),\n                Capability(CapabilityType.KNOWLEDGE_GRAPH_UPDATE, \"1.0\")\n            },\n            config={\n                \"consensus_threshold\": 0.75,\n                \"prompt_templates\": {\n                    \"code_review\": {\n                        \"role\": \"You are a {role} specializing in {specialization}.\",\n                        \"context\": \"Context:\\n{context}\",\n                        \"objective\": \"Objective:\\n{objective}\",\n                        \"approach\": \"Approach:\\n{approach}\",\n                        \"documentation\": \"Documentation:\\n{documentation}\"\n                    }\n                }\n            }\n        )\nE       TypeError: Can't instantiate abstract class AgenticPromptAgent with abstract method _process_message_impl\n\ntests/test_agents.py:134: TypeError\n________ ERROR at setup of TestCapabilityManagement.test_add_capability ________\n\nself = <agents.core.agent_factory.AgentFactory object at 0x3025772d0>\nagent_type = 'test_capability_agent', agent_id = 'test_agent_1'\ncapabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\nkwargs = {}\nagent_class = <class 'tests.test_capability_management.TestCapabilityAgent'>\ndefault_capabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\nfinal_capabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\n\n    async def create_agent(\n        self,\n        agent_type: str,\n        agent_id: Optional[str] = None,\n        capabilities: Optional[Set[Capability]] = None,\n        **kwargs\n    ) -> BaseAgent:\n        \"\"\"Create a new agent instance.\n    \n        Args:\n            agent_type: The type of agent to create.\n            agent_id: Optional ID for the agent. If not provided, one will be generated.\n            capabilities: Optional initial capabilities. If not provided, will use defaults.\n            **kwargs: Additional arguments to pass to the agent constructor.\n    \n        Returns:\n            BaseAgent: The created agent instance.\n    \n        Raises:\n            ValueError: If the agent type is not registered.\n            RuntimeError: If agent creation fails.\n        \"\"\"\n        if agent_type not in self._agent_classes:\n            raise ValueError(f\"Unknown agent type: {agent_type}\")\n    \n        try:\n            # Get agent class and default capabilities\n            agent_class = self._agent_classes[agent_type]\n            default_capabilities = self._default_capabilities.get(agent_type, set())\n    \n            # Use provided capabilities or defaults\n            final_capabilities = capabilities if capabilities is not None else default_capabilities\n    \n            # Create agent instance\n>           agent = agent_class(\n                agent_id=agent_id or str(uuid.uuid4()),\n                capabilities=final_capabilities,\n                **kwargs\n            )\nE           TypeError: Can't instantiate abstract class TestCapabilityAgent with abstract method _process_message_impl\n\nagents/core/agent_factory.py:123: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_capability_management.TestCapabilityManagement object at 0x110adcad0>\nsetup_test_environment = (<agents.core.agent_registry.AgentRegistry object at 0x3025755d0>, <kg.models.graph_manager.KnowledgeGraphManager object at 0x302574c10>, <agents.core.agent_factory.AgentFactory object at 0x3025772d0>)\n\n    @pytest_asyncio.fixture\n    async def setup_capability_test(self, setup_test_environment):\n        \"\"\"Set up test environment for capability management.\"\"\"\n        registry, knowledge_graph, factory = setup_test_environment\n>       agent = await factory.create_agent(\n            \"test_capability_agent\",\n            agent_id=\"test_agent_1\",\n            capabilities={Capability(CapabilityType.KNOWLEDGE_GRAPH)}\n        )\n\ntests/test_capability_management.py:199: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.agent_factory.AgentFactory object at 0x3025772d0>\nagent_type = 'test_capability_agent', agent_id = 'test_agent_1'\ncapabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\nkwargs = {}\nagent_class = <class 'tests.test_capability_management.TestCapabilityAgent'>\ndefault_capabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\nfinal_capabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\n\n    async def create_agent(\n        self,\n        agent_type: str,\n        agent_id: Optional[str] = None,\n        capabilities: Optional[Set[Capability]] = None,\n        **kwargs\n    ) -> BaseAgent:\n        \"\"\"Create a new agent instance.\n    \n        Args:\n            agent_type: The type of agent to create.\n            agent_id: Optional ID for the agent. If not provided, one will be generated.\n            capabilities: Optional initial capabilities. If not provided, will use defaults.\n            **kwargs: Additional arguments to pass to the agent constructor.\n    \n        Returns:\n            BaseAgent: The created agent instance.\n    \n        Raises:\n            ValueError: If the agent type is not registered.\n            RuntimeError: If agent creation fails.\n        \"\"\"\n        if agent_type not in self._agent_classes:\n            raise ValueError(f\"Unknown agent type: {agent_type}\")\n    \n        try:\n            # Get agent class and default capabilities\n            agent_class = self._agent_classes[agent_type]\n            default_capabilities = self._default_capabilities.get(agent_type, set())\n    \n            # Use provided capabilities or defaults\n            final_capabilities = capabilities if capabilities is not None else default_capabilities\n    \n            # Create agent instance\n            agent = agent_class(\n                agent_id=agent_id or str(uuid.uuid4()),\n                capabilities=final_capabilities,\n                **kwargs\n            )\n    \n            # Initialize agent\n            await agent.initialize()\n    \n            # Add agent to instances\n            self._agent_instances[agent.agent_id] = agent\n    \n            # Update capability map\n            for capability in final_capabilities:\n                async with self._capability_locks[capability.type]:\n                    self._capability_map[capability.type].add(agent.agent_id)\n    \n            # Update cache\n            self._capabilities_cache[agent.agent_id] = final_capabilities\n            self._capabilities_cache_time[agent.agent_id] = time.time()\n    \n            # Register agent if registry is available\n            if self.registry:\n                await self.registry.register_agent(agent, final_capabilities)\n    \n            self.logger.info(f\"Created agent {agent.agent_id} of type {agent_type} with capabilities: {final_capabilities}\")\n            return agent\n    \n        except Exception as e:\n            self.logger.error(f\"Failed to create agent of type {agent_type}: {str(e)}\")\n>           raise RuntimeError(f\"Failed to create agent: {str(e)}\")\nE           RuntimeError: Failed to create agent: Can't instantiate abstract class TestCapabilityAgent with abstract method _process_message_impl\n\nagents/core/agent_factory.py:153: RuntimeError\n______ ERROR at setup of TestCapabilityManagement.test_remove_capability _______\n\nself = <agents.core.agent_factory.AgentFactory object at 0x302629a10>\nagent_type = 'test_capability_agent', agent_id = 'test_agent_1'\ncapabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\nkwargs = {}\nagent_class = <class 'tests.test_capability_management.TestCapabilityAgent'>\ndefault_capabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\nfinal_capabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\n\n    async def create_agent(\n        self,\n        agent_type: str,\n        agent_id: Optional[str] = None,\n        capabilities: Optional[Set[Capability]] = None,\n        **kwargs\n    ) -> BaseAgent:\n        \"\"\"Create a new agent instance.\n    \n        Args:\n            agent_type: The type of agent to create.\n            agent_id: Optional ID for the agent. If not provided, one will be generated.\n            capabilities: Optional initial capabilities. If not provided, will use defaults.\n            **kwargs: Additional arguments to pass to the agent constructor.\n    \n        Returns:\n            BaseAgent: The created agent instance.\n    \n        Raises:\n            ValueError: If the agent type is not registered.\n            RuntimeError: If agent creation fails.\n        \"\"\"\n        if agent_type not in self._agent_classes:\n            raise ValueError(f\"Unknown agent type: {agent_type}\")\n    \n        try:\n            # Get agent class and default capabilities\n            agent_class = self._agent_classes[agent_type]\n            default_capabilities = self._default_capabilities.get(agent_type, set())\n    \n            # Use provided capabilities or defaults\n            final_capabilities = capabilities if capabilities is not None else default_capabilities\n    \n            # Create agent instance\n>           agent = agent_class(\n                agent_id=agent_id or str(uuid.uuid4()),\n                capabilities=final_capabilities,\n                **kwargs\n            )\nE           TypeError: Can't instantiate abstract class TestCapabilityAgent with abstract method _process_message_impl\n\nagents/core/agent_factory.py:123: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_capability_management.TestCapabilityManagement object at 0x110adef10>\nsetup_test_environment = (<agents.core.agent_registry.AgentRegistry object at 0x30262a050>, <kg.models.graph_manager.KnowledgeGraphManager object at 0x302628c10>, <agents.core.agent_factory.AgentFactory object at 0x302629a10>)\n\n    @pytest_asyncio.fixture\n    async def setup_capability_test(self, setup_test_environment):\n        \"\"\"Set up test environment for capability management.\"\"\"\n        registry, knowledge_graph, factory = setup_test_environment\n>       agent = await factory.create_agent(\n            \"test_capability_agent\",\n            agent_id=\"test_agent_1\",\n            capabilities={Capability(CapabilityType.KNOWLEDGE_GRAPH)}\n        )\n\ntests/test_capability_management.py:199: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.agent_factory.AgentFactory object at 0x302629a10>\nagent_type = 'test_capability_agent', agent_id = 'test_agent_1'\ncapabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\nkwargs = {}\nagent_class = <class 'tests.test_capability_management.TestCapabilityAgent'>\ndefault_capabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\nfinal_capabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\n\n    async def create_agent(\n        self,\n        agent_type: str,\n        agent_id: Optional[str] = None,\n        capabilities: Optional[Set[Capability]] = None,\n        **kwargs\n    ) -> BaseAgent:\n        \"\"\"Create a new agent instance.\n    \n        Args:\n            agent_type: The type of agent to create.\n            agent_id: Optional ID for the agent. If not provided, one will be generated.\n            capabilities: Optional initial capabilities. If not provided, will use defaults.\n            **kwargs: Additional arguments to pass to the agent constructor.\n    \n        Returns:\n            BaseAgent: The created agent instance.\n    \n        Raises:\n            ValueError: If the agent type is not registered.\n            RuntimeError: If agent creation fails.\n        \"\"\"\n        if agent_type not in self._agent_classes:\n            raise ValueError(f\"Unknown agent type: {agent_type}\")\n    \n        try:\n            # Get agent class and default capabilities\n            agent_class = self._agent_classes[agent_type]\n            default_capabilities = self._default_capabilities.get(agent_type, set())\n    \n            # Use provided capabilities or defaults\n            final_capabilities = capabilities if capabilities is not None else default_capabilities\n    \n            # Create agent instance\n            agent = agent_class(\n                agent_id=agent_id or str(uuid.uuid4()),\n                capabilities=final_capabilities,\n                **kwargs\n            )\n    \n            # Initialize agent\n            await agent.initialize()\n    \n            # Add agent to instances\n            self._agent_instances[agent.agent_id] = agent\n    \n            # Update capability map\n            for capability in final_capabilities:\n                async with self._capability_locks[capability.type]:\n                    self._capability_map[capability.type].add(agent.agent_id)\n    \n            # Update cache\n            self._capabilities_cache[agent.agent_id] = final_capabilities\n            self._capabilities_cache_time[agent.agent_id] = time.time()\n    \n            # Register agent if registry is available\n            if self.registry:\n                await self.registry.register_agent(agent, final_capabilities)\n    \n            self.logger.info(f\"Created agent {agent.agent_id} of type {agent_type} with capabilities: {final_capabilities}\")\n            return agent\n    \n        except Exception as e:\n            self.logger.error(f\"Failed to create agent of type {agent_type}: {str(e)}\")\n>           raise RuntimeError(f\"Failed to create agent: {str(e)}\")\nE           RuntimeError: Failed to create agent: Can't instantiate abstract class TestCapabilityAgent with abstract method _process_message_impl\n\nagents/core/agent_factory.py:153: RuntimeError\n_ ERROR at setup of TestCapabilityManagement.test_remove_nonexistent_capability _\n\nself = <agents.core.agent_factory.AgentFactory object at 0x3024f2950>\nagent_type = 'test_capability_agent', agent_id = 'test_agent_1'\ncapabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\nkwargs = {}\nagent_class = <class 'tests.test_capability_management.TestCapabilityAgent'>\ndefault_capabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\nfinal_capabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\n\n    async def create_agent(\n        self,\n        agent_type: str,\n        agent_id: Optional[str] = None,\n        capabilities: Optional[Set[Capability]] = None,\n        **kwargs\n    ) -> BaseAgent:\n        \"\"\"Create a new agent instance.\n    \n        Args:\n            agent_type: The type of agent to create.\n            agent_id: Optional ID for the agent. If not provided, one will be generated.\n            capabilities: Optional initial capabilities. If not provided, will use defaults.\n            **kwargs: Additional arguments to pass to the agent constructor.\n    \n        Returns:\n            BaseAgent: The created agent instance.\n    \n        Raises:\n            ValueError: If the agent type is not registered.\n            RuntimeError: If agent creation fails.\n        \"\"\"\n        if agent_type not in self._agent_classes:\n            raise ValueError(f\"Unknown agent type: {agent_type}\")\n    \n        try:\n            # Get agent class and default capabilities\n            agent_class = self._agent_classes[agent_type]\n            default_capabilities = self._default_capabilities.get(agent_type, set())\n    \n            # Use provided capabilities or defaults\n            final_capabilities = capabilities if capabilities is not None else default_capabilities\n    \n            # Create agent instance\n>           agent = agent_class(\n                agent_id=agent_id or str(uuid.uuid4()),\n                capabilities=final_capabilities,\n                **kwargs\n            )\nE           TypeError: Can't instantiate abstract class TestCapabilityAgent with abstract method _process_message_impl\n\nagents/core/agent_factory.py:123: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_capability_management.TestCapabilityManagement object at 0x110adf750>\nsetup_test_environment = (<agents.core.agent_registry.AgentRegistry object at 0x302358610>, <kg.models.graph_manager.KnowledgeGraphManager object at 0x302359a90>, <agents.core.agent_factory.AgentFactory object at 0x3024f2950>)\n\n    @pytest_asyncio.fixture\n    async def setup_capability_test(self, setup_test_environment):\n        \"\"\"Set up test environment for capability management.\"\"\"\n        registry, knowledge_graph, factory = setup_test_environment\n>       agent = await factory.create_agent(\n            \"test_capability_agent\",\n            agent_id=\"test_agent_1\",\n            capabilities={Capability(CapabilityType.KNOWLEDGE_GRAPH)}\n        )\n\ntests/test_capability_management.py:199: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.agent_factory.AgentFactory object at 0x3024f2950>\nagent_type = 'test_capability_agent', agent_id = 'test_agent_1'\ncapabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\nkwargs = {}\nagent_class = <class 'tests.test_capability_management.TestCapabilityAgent'>\ndefault_capabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\nfinal_capabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\n\n    async def create_agent(\n        self,\n        agent_type: str,\n        agent_id: Optional[str] = None,\n        capabilities: Optional[Set[Capability]] = None,\n        **kwargs\n    ) -> BaseAgent:\n        \"\"\"Create a new agent instance.\n    \n        Args:\n            agent_type: The type of agent to create.\n            agent_id: Optional ID for the agent. If not provided, one will be generated.\n            capabilities: Optional initial capabilities. If not provided, will use defaults.\n            **kwargs: Additional arguments to pass to the agent constructor.\n    \n        Returns:\n            BaseAgent: The created agent instance.\n    \n        Raises:\n            ValueError: If the agent type is not registered.\n            RuntimeError: If agent creation fails.\n        \"\"\"\n        if agent_type not in self._agent_classes:\n            raise ValueError(f\"Unknown agent type: {agent_type}\")\n    \n        try:\n            # Get agent class and default capabilities\n            agent_class = self._agent_classes[agent_type]\n            default_capabilities = self._default_capabilities.get(agent_type, set())\n    \n            # Use provided capabilities or defaults\n            final_capabilities = capabilities if capabilities is not None else default_capabilities\n    \n            # Create agent instance\n            agent = agent_class(\n                agent_id=agent_id or str(uuid.uuid4()),\n                capabilities=final_capabilities,\n                **kwargs\n            )\n    \n            # Initialize agent\n            await agent.initialize()\n    \n            # Add agent to instances\n            self._agent_instances[agent.agent_id] = agent\n    \n            # Update capability map\n            for capability in final_capabilities:\n                async with self._capability_locks[capability.type]:\n                    self._capability_map[capability.type].add(agent.agent_id)\n    \n            # Update cache\n            self._capabilities_cache[agent.agent_id] = final_capabilities\n            self._capabilities_cache_time[agent.agent_id] = time.time()\n    \n            # Register agent if registry is available\n            if self.registry:\n                await self.registry.register_agent(agent, final_capabilities)\n    \n            self.logger.info(f\"Created agent {agent.agent_id} of type {agent_type} with capabilities: {final_capabilities}\")\n            return agent\n    \n        except Exception as e:\n            self.logger.error(f\"Failed to create agent of type {agent_type}: {str(e)}\")\n>           raise RuntimeError(f\"Failed to create agent: {str(e)}\")\nE           RuntimeError: Failed to create agent: Can't instantiate abstract class TestCapabilityAgent with abstract method _process_message_impl\n\nagents/core/agent_factory.py:153: RuntimeError\n___ ERROR at setup of TestCapabilityManagement.test_knowledge_graph_updates ____\n\nself = <agents.core.agent_factory.AgentFactory object at 0x302446710>\nagent_type = 'test_capability_agent', agent_id = 'test_agent_1'\ncapabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\nkwargs = {}\nagent_class = <class 'tests.test_capability_management.TestCapabilityAgent'>\ndefault_capabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\nfinal_capabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\n\n    async def create_agent(\n        self,\n        agent_type: str,\n        agent_id: Optional[str] = None,\n        capabilities: Optional[Set[Capability]] = None,\n        **kwargs\n    ) -> BaseAgent:\n        \"\"\"Create a new agent instance.\n    \n        Args:\n            agent_type: The type of agent to create.\n            agent_id: Optional ID for the agent. If not provided, one will be generated.\n            capabilities: Optional initial capabilities. If not provided, will use defaults.\n            **kwargs: Additional arguments to pass to the agent constructor.\n    \n        Returns:\n            BaseAgent: The created agent instance.\n    \n        Raises:\n            ValueError: If the agent type is not registered.\n            RuntimeError: If agent creation fails.\n        \"\"\"\n        if agent_type not in self._agent_classes:\n            raise ValueError(f\"Unknown agent type: {agent_type}\")\n    \n        try:\n            # Get agent class and default capabilities\n            agent_class = self._agent_classes[agent_type]\n            default_capabilities = self._default_capabilities.get(agent_type, set())\n    \n            # Use provided capabilities or defaults\n            final_capabilities = capabilities if capabilities is not None else default_capabilities\n    \n            # Create agent instance\n>           agent = agent_class(\n                agent_id=agent_id or str(uuid.uuid4()),\n                capabilities=final_capabilities,\n                **kwargs\n            )\nE           TypeError: Can't instantiate abstract class TestCapabilityAgent with abstract method _process_message_impl\n\nagents/core/agent_factory.py:123: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_capability_management.TestCapabilityManagement object at 0x110adffd0>\nsetup_test_environment = (<agents.core.agent_registry.AgentRegistry object at 0x3024472d0>, <kg.models.graph_manager.KnowledgeGraphManager object at 0x302447d10>, <agents.core.agent_factory.AgentFactory object at 0x302446710>)\n\n    @pytest_asyncio.fixture\n    async def setup_capability_test(self, setup_test_environment):\n        \"\"\"Set up test environment for capability management.\"\"\"\n        registry, knowledge_graph, factory = setup_test_environment\n>       agent = await factory.create_agent(\n            \"test_capability_agent\",\n            agent_id=\"test_agent_1\",\n            capabilities={Capability(CapabilityType.KNOWLEDGE_GRAPH)}\n        )\n\ntests/test_capability_management.py:199: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.agent_factory.AgentFactory object at 0x302446710>\nagent_type = 'test_capability_agent', agent_id = 'test_agent_1'\ncapabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\nkwargs = {}\nagent_class = <class 'tests.test_capability_management.TestCapabilityAgent'>\ndefault_capabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\nfinal_capabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\n\n    async def create_agent(\n        self,\n        agent_type: str,\n        agent_id: Optional[str] = None,\n        capabilities: Optional[Set[Capability]] = None,\n        **kwargs\n    ) -> BaseAgent:\n        \"\"\"Create a new agent instance.\n    \n        Args:\n            agent_type: The type of agent to create.\n            agent_id: Optional ID for the agent. If not provided, one will be generated.\n            capabilities: Optional initial capabilities. If not provided, will use defaults.\n            **kwargs: Additional arguments to pass to the agent constructor.\n    \n        Returns:\n            BaseAgent: The created agent instance.\n    \n        Raises:\n            ValueError: If the agent type is not registered.\n            RuntimeError: If agent creation fails.\n        \"\"\"\n        if agent_type not in self._agent_classes:\n            raise ValueError(f\"Unknown agent type: {agent_type}\")\n    \n        try:\n            # Get agent class and default capabilities\n            agent_class = self._agent_classes[agent_type]\n            default_capabilities = self._default_capabilities.get(agent_type, set())\n    \n            # Use provided capabilities or defaults\n            final_capabilities = capabilities if capabilities is not None else default_capabilities\n    \n            # Create agent instance\n            agent = agent_class(\n                agent_id=agent_id or str(uuid.uuid4()),\n                capabilities=final_capabilities,\n                **kwargs\n            )\n    \n            # Initialize agent\n            await agent.initialize()\n    \n            # Add agent to instances\n            self._agent_instances[agent.agent_id] = agent\n    \n            # Update capability map\n            for capability in final_capabilities:\n                async with self._capability_locks[capability.type]:\n                    self._capability_map[capability.type].add(agent.agent_id)\n    \n            # Update cache\n            self._capabilities_cache[agent.agent_id] = final_capabilities\n            self._capabilities_cache_time[agent.agent_id] = time.time()\n    \n            # Register agent if registry is available\n            if self.registry:\n                await self.registry.register_agent(agent, final_capabilities)\n    \n            self.logger.info(f\"Created agent {agent.agent_id} of type {agent_type} with capabilities: {final_capabilities}\")\n            return agent\n    \n        except Exception as e:\n            self.logger.error(f\"Failed to create agent of type {agent_type}: {str(e)}\")\n>           raise RuntimeError(f\"Failed to create agent: {str(e)}\")\nE           RuntimeError: Failed to create agent: Can't instantiate abstract class TestCapabilityAgent with abstract method _process_message_impl\n\nagents/core/agent_factory.py:153: RuntimeError\n_____ ERROR at setup of TestCapabilityManagement.test_capability_conflicts _____\n\nself = <agents.core.agent_factory.AgentFactory object at 0x30251b950>\nagent_type = 'test_capability_agent', agent_id = 'test_agent_1'\ncapabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\nkwargs = {}\nagent_class = <class 'tests.test_capability_management.TestCapabilityAgent'>\ndefault_capabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\nfinal_capabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\n\n    async def create_agent(\n        self,\n        agent_type: str,\n        agent_id: Optional[str] = None,\n        capabilities: Optional[Set[Capability]] = None,\n        **kwargs\n    ) -> BaseAgent:\n        \"\"\"Create a new agent instance.\n    \n        Args:\n            agent_type: The type of agent to create.\n            agent_id: Optional ID for the agent. If not provided, one will be generated.\n            capabilities: Optional initial capabilities. If not provided, will use defaults.\n            **kwargs: Additional arguments to pass to the agent constructor.\n    \n        Returns:\n            BaseAgent: The created agent instance.\n    \n        Raises:\n            ValueError: If the agent type is not registered.\n            RuntimeError: If agent creation fails.\n        \"\"\"\n        if agent_type not in self._agent_classes:\n            raise ValueError(f\"Unknown agent type: {agent_type}\")\n    \n        try:\n            # Get agent class and default capabilities\n            agent_class = self._agent_classes[agent_type]\n            default_capabilities = self._default_capabilities.get(agent_type, set())\n    \n            # Use provided capabilities or defaults\n            final_capabilities = capabilities if capabilities is not None else default_capabilities\n    \n            # Create agent instance\n>           agent = agent_class(\n                agent_id=agent_id or str(uuid.uuid4()),\n                capabilities=final_capabilities,\n                **kwargs\n            )\nE           TypeError: Can't instantiate abstract class TestCapabilityAgent with abstract method _process_message_impl\n\nagents/core/agent_factory.py:123: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_capability_management.TestCapabilityManagement object at 0x110adfbd0>\nsetup_test_environment = (<agents.core.agent_registry.AgentRegistry object at 0x302445b10>, <kg.models.graph_manager.KnowledgeGraphManager object at 0x302447210>, <agents.core.agent_factory.AgentFactory object at 0x30251b950>)\n\n    @pytest_asyncio.fixture\n    async def setup_capability_test(self, setup_test_environment):\n        \"\"\"Set up test environment for capability management.\"\"\"\n        registry, knowledge_graph, factory = setup_test_environment\n>       agent = await factory.create_agent(\n            \"test_capability_agent\",\n            agent_id=\"test_agent_1\",\n            capabilities={Capability(CapabilityType.KNOWLEDGE_GRAPH)}\n        )\n\ntests/test_capability_management.py:199: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.agent_factory.AgentFactory object at 0x30251b950>\nagent_type = 'test_capability_agent', agent_id = 'test_agent_1'\ncapabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\nkwargs = {}\nagent_class = <class 'tests.test_capability_management.TestCapabilityAgent'>\ndefault_capabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\nfinal_capabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\n\n    async def create_agent(\n        self,\n        agent_type: str,\n        agent_id: Optional[str] = None,\n        capabilities: Optional[Set[Capability]] = None,\n        **kwargs\n    ) -> BaseAgent:\n        \"\"\"Create a new agent instance.\n    \n        Args:\n            agent_type: The type of agent to create.\n            agent_id: Optional ID for the agent. If not provided, one will be generated.\n            capabilities: Optional initial capabilities. If not provided, will use defaults.\n            **kwargs: Additional arguments to pass to the agent constructor.\n    \n        Returns:\n            BaseAgent: The created agent instance.\n    \n        Raises:\n            ValueError: If the agent type is not registered.\n            RuntimeError: If agent creation fails.\n        \"\"\"\n        if agent_type not in self._agent_classes:\n            raise ValueError(f\"Unknown agent type: {agent_type}\")\n    \n        try:\n            # Get agent class and default capabilities\n            agent_class = self._agent_classes[agent_type]\n            default_capabilities = self._default_capabilities.get(agent_type, set())\n    \n            # Use provided capabilities or defaults\n            final_capabilities = capabilities if capabilities is not None else default_capabilities\n    \n            # Create agent instance\n            agent = agent_class(\n                agent_id=agent_id or str(uuid.uuid4()),\n                capabilities=final_capabilities,\n                **kwargs\n            )\n    \n            # Initialize agent\n            await agent.initialize()\n    \n            # Add agent to instances\n            self._agent_instances[agent.agent_id] = agent\n    \n            # Update capability map\n            for capability in final_capabilities:\n                async with self._capability_locks[capability.type]:\n                    self._capability_map[capability.type].add(agent.agent_id)\n    \n            # Update cache\n            self._capabilities_cache[agent.agent_id] = final_capabilities\n            self._capabilities_cache_time[agent.agent_id] = time.time()\n    \n            # Register agent if registry is available\n            if self.registry:\n                await self.registry.register_agent(agent, final_capabilities)\n    \n            self.logger.info(f\"Created agent {agent.agent_id} of type {agent_type} with capabilities: {final_capabilities}\")\n            return agent\n    \n        except Exception as e:\n            self.logger.error(f\"Failed to create agent of type {agent_type}: {str(e)}\")\n>           raise RuntimeError(f\"Failed to create agent: {str(e)}\")\nE           RuntimeError: Failed to create agent: Can't instantiate abstract class TestCapabilityAgent with abstract method _process_message_impl\n\nagents/core/agent_factory.py:153: RuntimeError\n___ ERROR at setup of TestCapabilityManagement.test_capability_dependencies ____\n\nself = <agents.core.agent_factory.AgentFactory object at 0x30382c5d0>\nagent_type = 'test_capability_agent', agent_id = 'test_agent_1'\ncapabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\nkwargs = {}\nagent_class = <class 'tests.test_capability_management.TestCapabilityAgent'>\ndefault_capabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\nfinal_capabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\n\n    async def create_agent(\n        self,\n        agent_type: str,\n        agent_id: Optional[str] = None,\n        capabilities: Optional[Set[Capability]] = None,\n        **kwargs\n    ) -> BaseAgent:\n        \"\"\"Create a new agent instance.\n    \n        Args:\n            agent_type: The type of agent to create.\n            agent_id: Optional ID for the agent. If not provided, one will be generated.\n            capabilities: Optional initial capabilities. If not provided, will use defaults.\n            **kwargs: Additional arguments to pass to the agent constructor.\n    \n        Returns:\n            BaseAgent: The created agent instance.\n    \n        Raises:\n            ValueError: If the agent type is not registered.\n            RuntimeError: If agent creation fails.\n        \"\"\"\n        if agent_type not in self._agent_classes:\n            raise ValueError(f\"Unknown agent type: {agent_type}\")\n    \n        try:\n            # Get agent class and default capabilities\n            agent_class = self._agent_classes[agent_type]\n            default_capabilities = self._default_capabilities.get(agent_type, set())\n    \n            # Use provided capabilities or defaults\n            final_capabilities = capabilities if capabilities is not None else default_capabilities\n    \n            # Create agent instance\n>           agent = agent_class(\n                agent_id=agent_id or str(uuid.uuid4()),\n                capabilities=final_capabilities,\n                **kwargs\n            )\nE           TypeError: Can't instantiate abstract class TestCapabilityAgent with abstract method _process_message_impl\n\nagents/core/agent_factory.py:123: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_capability_management.TestCapabilityManagement object at 0x110adf050>\nsetup_test_environment = (<agents.core.agent_registry.AgentRegistry object at 0x3024df750>, <kg.models.graph_manager.KnowledgeGraphManager object at 0x107ae5750>, <agents.core.agent_factory.AgentFactory object at 0x30382c5d0>)\n\n    @pytest_asyncio.fixture\n    async def setup_capability_test(self, setup_test_environment):\n        \"\"\"Set up test environment for capability management.\"\"\"\n        registry, knowledge_graph, factory = setup_test_environment\n>       agent = await factory.create_agent(\n            \"test_capability_agent\",\n            agent_id=\"test_agent_1\",\n            capabilities={Capability(CapabilityType.KNOWLEDGE_GRAPH)}\n        )\n\ntests/test_capability_management.py:199: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.agent_factory.AgentFactory object at 0x30382c5d0>\nagent_type = 'test_capability_agent', agent_id = 'test_agent_1'\ncapabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\nkwargs = {}\nagent_class = <class 'tests.test_capability_management.TestCapabilityAgent'>\ndefault_capabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\nfinal_capabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\n\n    async def create_agent(\n        self,\n        agent_type: str,\n        agent_id: Optional[str] = None,\n        capabilities: Optional[Set[Capability]] = None,\n        **kwargs\n    ) -> BaseAgent:\n        \"\"\"Create a new agent instance.\n    \n        Args:\n            agent_type: The type of agent to create.\n            agent_id: Optional ID for the agent. If not provided, one will be generated.\n            capabilities: Optional initial capabilities. If not provided, will use defaults.\n            **kwargs: Additional arguments to pass to the agent constructor.\n    \n        Returns:\n            BaseAgent: The created agent instance.\n    \n        Raises:\n            ValueError: If the agent type is not registered.\n            RuntimeError: If agent creation fails.\n        \"\"\"\n        if agent_type not in self._agent_classes:\n            raise ValueError(f\"Unknown agent type: {agent_type}\")\n    \n        try:\n            # Get agent class and default capabilities\n            agent_class = self._agent_classes[agent_type]\n            default_capabilities = self._default_capabilities.get(agent_type, set())\n    \n            # Use provided capabilities or defaults\n            final_capabilities = capabilities if capabilities is not None else default_capabilities\n    \n            # Create agent instance\n            agent = agent_class(\n                agent_id=agent_id or str(uuid.uuid4()),\n                capabilities=final_capabilities,\n                **kwargs\n            )\n    \n            # Initialize agent\n            await agent.initialize()\n    \n            # Add agent to instances\n            self._agent_instances[agent.agent_id] = agent\n    \n            # Update capability map\n            for capability in final_capabilities:\n                async with self._capability_locks[capability.type]:\n                    self._capability_map[capability.type].add(agent.agent_id)\n    \n            # Update cache\n            self._capabilities_cache[agent.agent_id] = final_capabilities\n            self._capabilities_cache_time[agent.agent_id] = time.time()\n    \n            # Register agent if registry is available\n            if self.registry:\n                await self.registry.register_agent(agent, final_capabilities)\n    \n            self.logger.info(f\"Created agent {agent.agent_id} of type {agent_type} with capabilities: {final_capabilities}\")\n            return agent\n    \n        except Exception as e:\n            self.logger.error(f\"Failed to create agent of type {agent_type}: {str(e)}\")\n>           raise RuntimeError(f\"Failed to create agent: {str(e)}\")\nE           RuntimeError: Failed to create agent: Can't instantiate abstract class TestCapabilityAgent with abstract method _process_message_impl\n\nagents/core/agent_factory.py:153: RuntimeError\n_______________ ERROR at setup of test_engagement_initialization _______________\n\n    @pytest.fixture\n    async def setup_agents():\n        \"\"\"Setup all agents for testing.\"\"\"\n>       engagement_manager = EngagementManagerAgent()\nE       TypeError: Can't instantiate abstract class EngagementManagerAgent with abstract method _process_message_impl\n\ntests/test_consulting_agents.py:19: TypeError\n_________________ ERROR at setup of test_strategy_development __________________\n\n    @pytest.fixture\n    async def setup_agents():\n        \"\"\"Setup all agents for testing.\"\"\"\n>       engagement_manager = EngagementManagerAgent()\nE       TypeError: Can't instantiate abstract class EngagementManagerAgent with abstract method _process_message_impl\n\ntests/test_consulting_agents.py:19: TypeError\n________________ ERROR at setup of test_implementation_planning ________________\n\n    @pytest.fixture\n    async def setup_agents():\n        \"\"\"Setup all agents for testing.\"\"\"\n>       engagement_manager = EngagementManagerAgent()\nE       TypeError: Can't instantiate abstract class EngagementManagerAgent with abstract method _process_message_impl\n\ntests/test_consulting_agents.py:19: TypeError\n______________ ERROR at setup of test_value_framework_development ______________\n\n    @pytest.fixture\n    async def setup_agents():\n        \"\"\"Setup all agents for testing.\"\"\"\n>       engagement_manager = EngagementManagerAgent()\nE       TypeError: Can't instantiate abstract class EngagementManagerAgent with abstract method _process_message_impl\n\ntests/test_consulting_agents.py:19: TypeError\n_________________ ERROR at setup of test_end_to_end_engagement _________________\n\n    @pytest.fixture\n    async def setup_agents():\n        \"\"\"Setup all agents for testing.\"\"\"\n>       engagement_manager = EngagementManagerAgent()\nE       TypeError: Can't instantiate abstract class EngagementManagerAgent with abstract method _process_message_impl\n\ntests/test_consulting_agents.py:19: TypeError\n______________ ERROR at setup of test_knowledge_graph_consistency ______________\n\n    @pytest.fixture\n    async def setup_agents():\n        \"\"\"Setup all agents for testing.\"\"\"\n>       engagement_manager = EngagementManagerAgent()\nE       TypeError: Can't instantiate abstract class EngagementManagerAgent with abstract method _process_message_impl\n\ntests/test_consulting_agents.py:19: TypeError\n_______________ ERROR at setup of test_agent_diary_functionality _______________\n\n    @pytest.fixture\n    async def setup_agents():\n        \"\"\"Setup all agents for testing.\"\"\"\n>       engagement_manager = EngagementManagerAgent()\nE       TypeError: Can't instantiate abstract class EngagementManagerAgent with abstract method _process_message_impl\n\ntests/test_consulting_agents.py:19: TypeError\n____________ ERROR at setup of test_agent_diary_in_knowledge_graph _____________\n\n    @pytest.fixture\n    async def setup_agents():\n        \"\"\"Setup all agents for testing.\"\"\"\n>       engagement_manager = EngagementManagerAgent()\nE       TypeError: Can't instantiate abstract class EngagementManagerAgent with abstract method _process_message_impl\n\ntests/test_consulting_agents.py:19: TypeError\n_________________ ERROR at setup of test_agent_initialization __________________\n\nfactory = <agents.core.agent_factory.AgentFactory object at 0x304cd4490>\n\n    @pytest_asyncio.fixture\n    async def test_agent(factory):\n        \"\"\"Create a test agent with mixed capability types.\"\"\"\n        capabilities = {\n            Capability(\"custom_capability\", \"A custom capability\"),\n            CapabilityType.KNOWLEDGE_GRAPH,\n            CapabilityType.MESSAGE_PROCESSING\n        }\n>       agent = await factory.create_agent(\"test_agent\", \"test\", capabilities)\n\ntests/test_dynamic_agents.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.agent_factory.AgentFactory object at 0x304cd4490>\nagent_type = 'test_agent', agent_id = 'test'\ncapabilities = {<CapabilityType.MESSAGE_PROCESSING: 'message_processing'>, <CapabilityType.KNOWLEDGE_GRAPH: 'knowledge_graph'>, <[AttributeError(\"'str' object has no attribute 'value'\") raised in repr()] Capability object at 0x304cd64d0>}\nkwargs = {}\n\n    async def create_agent(\n        self,\n        agent_type: str,\n        agent_id: Optional[str] = None,\n        capabilities: Optional[Set[Capability]] = None,\n        **kwargs\n    ) -> BaseAgent:\n        \"\"\"Create a new agent instance.\n    \n        Args:\n            agent_type: The type of agent to create.\n            agent_id: Optional ID for the agent. If not provided, one will be generated.\n            capabilities: Optional initial capabilities. If not provided, will use defaults.\n            **kwargs: Additional arguments to pass to the agent constructor.\n    \n        Returns:\n            BaseAgent: The created agent instance.\n    \n        Raises:\n            ValueError: If the agent type is not registered.\n            RuntimeError: If agent creation fails.\n        \"\"\"\n        if agent_type not in self._agent_classes:\n>           raise ValueError(f\"Unknown agent type: {agent_type}\")\nE           ValueError: Unknown agent type: test_agent\n\nagents/core/agent_factory.py:112: ValueError\n__________________ ERROR at setup of test_capability_tracking __________________\n\nfactory = <agents.core.agent_factory.AgentFactory object at 0x304e55810>\n\n    @pytest_asyncio.fixture\n    async def capability_agent(factory):\n        \"\"\"Create a capability tracking agent.\"\"\"\n        capabilities = {CapabilityType.KNOWLEDGE_GRAPH}\n>       agent = await factory.create_agent(\"capability_agent\", \"test\", capabilities)\n\ntests/test_dynamic_agents.py:79: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.agent_factory.AgentFactory object at 0x304e55810>\nagent_type = 'capability_agent', agent_id = 'test'\ncapabilities = {<CapabilityType.KNOWLEDGE_GRAPH: 'knowledge_graph'>}\nkwargs = {}\n\n    async def create_agent(\n        self,\n        agent_type: str,\n        agent_id: Optional[str] = None,\n        capabilities: Optional[Set[Capability]] = None,\n        **kwargs\n    ) -> BaseAgent:\n        \"\"\"Create a new agent instance.\n    \n        Args:\n            agent_type: The type of agent to create.\n            agent_id: Optional ID for the agent. If not provided, one will be generated.\n            capabilities: Optional initial capabilities. If not provided, will use defaults.\n            **kwargs: Additional arguments to pass to the agent constructor.\n    \n        Returns:\n            BaseAgent: The created agent instance.\n    \n        Raises:\n            ValueError: If the agent type is not registered.\n            RuntimeError: If agent creation fails.\n        \"\"\"\n        if agent_type not in self._agent_classes:\n>           raise ValueError(f\"Unknown agent type: {agent_type}\")\nE           ValueError: Unknown agent type: capability_agent\n\nagents/core/agent_factory.py:112: ValueError\n______________ ERROR at setup of test_knowledge_graph_operations _______________\n\nfactory = <agents.core.agent_factory.AgentFactory object at 0x304cb6a50>\n\n    @pytest_asyncio.fixture\n    async def capability_agent(factory):\n        \"\"\"Create a capability tracking agent.\"\"\"\n        capabilities = {CapabilityType.KNOWLEDGE_GRAPH}\n>       agent = await factory.create_agent(\"capability_agent\", \"test\", capabilities)\n\ntests/test_dynamic_agents.py:79: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.agent_factory.AgentFactory object at 0x304cb6a50>\nagent_type = 'capability_agent', agent_id = 'test'\ncapabilities = {<CapabilityType.KNOWLEDGE_GRAPH: 'knowledge_graph'>}\nkwargs = {}\n\n    async def create_agent(\n        self,\n        agent_type: str,\n        agent_id: Optional[str] = None,\n        capabilities: Optional[Set[Capability]] = None,\n        **kwargs\n    ) -> BaseAgent:\n        \"\"\"Create a new agent instance.\n    \n        Args:\n            agent_type: The type of agent to create.\n            agent_id: Optional ID for the agent. If not provided, one will be generated.\n            capabilities: Optional initial capabilities. If not provided, will use defaults.\n            **kwargs: Additional arguments to pass to the agent constructor.\n    \n        Returns:\n            BaseAgent: The created agent instance.\n    \n        Raises:\n            ValueError: If the agent type is not registered.\n            RuntimeError: If agent creation fails.\n        \"\"\"\n        if agent_type not in self._agent_classes:\n>           raise ValueError(f\"Unknown agent type: {agent_type}\")\nE           ValueError: Unknown agent type: capability_agent\n\nagents/core/agent_factory.py:112: ValueError\n________________ ERROR at setup of test_integration_management _________________\n\n    @pytest_asyncio.fixture\n    async def setup_integration_test():\n        \"\"\"Set up test environment for integration testing.\"\"\"\n        registry = AgentRegistry()\n        knowledge_graph = Graph()\n        factory = AgentFactory(registry, knowledge_graph)\n    \n        # Register test agent templates\n        await factory.register_agent_template(\n            \"integration_test\",\n            TestIntegrationAgent,\n>           {CapabilityType.INTEGRATION_MANAGEMENT}\n        )\n\ntests/test_integration_management.py:117: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <enum 'CapabilityType'>, name = 'INTEGRATION_MANAGEMENT'\n\n    def __getattr__(cls, name):\n        \"\"\"\n        Return the enum member matching `name`\n    \n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n>           raise AttributeError(name) from None\nE           AttributeError: INTEGRATION_MANAGEMENT\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/enum.py:784: AttributeError\n___________________ ERROR at setup of test_module_management ___________________\n\n    @pytest_asyncio.fixture\n    async def setup_integration_test():\n        \"\"\"Set up test environment for integration testing.\"\"\"\n        registry = AgentRegistry()\n        knowledge_graph = Graph()\n        factory = AgentFactory(registry, knowledge_graph)\n    \n        # Register test agent templates\n        await factory.register_agent_template(\n            \"integration_test\",\n            TestIntegrationAgent,\n>           {CapabilityType.INTEGRATION_MANAGEMENT}\n        )\n\ntests/test_integration_management.py:117: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <enum 'CapabilityType'>, name = 'INTEGRATION_MANAGEMENT'\n\n    def __getattr__(cls, name):\n        \"\"\"\n        Return the enum member matching `name`\n    \n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n>           raise AttributeError(name) from None\nE           AttributeError: INTEGRATION_MANAGEMENT\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/enum.py:784: AttributeError\n__________________ ERROR at setup of test_integration_metrics __________________\n\n    @pytest_asyncio.fixture\n    async def setup_integration_test():\n        \"\"\"Set up test environment for integration testing.\"\"\"\n        registry = AgentRegistry()\n        knowledge_graph = Graph()\n        factory = AgentFactory(registry, knowledge_graph)\n    \n        # Register test agent templates\n        await factory.register_agent_template(\n            \"integration_test\",\n            TestIntegrationAgent,\n>           {CapabilityType.INTEGRATION_MANAGEMENT}\n        )\n\ntests/test_integration_management.py:117: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <enum 'CapabilityType'>, name = 'INTEGRATION_MANAGEMENT'\n\n    def __getattr__(cls, name):\n        \"\"\"\n        Return the enum member matching `name`\n    \n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n>           raise AttributeError(name) from None\nE           AttributeError: INTEGRATION_MANAGEMENT\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/enum.py:784: AttributeError\n____________ ERROR at setup of test_knowledge_graph_initialization _____________\n\n    @pytest_asyncio.fixture\n    async def knowledge_graph():\n        graph = KnowledgeGraph()\n>       await graph.initialize()\nE       AttributeError: 'KnowledgeGraph' object has no attribute 'initialize'\n\ntests/test_knowledge_graph.py:37: AttributeError\n_____________ ERROR at setup of test_agent_knowledge_graph_access ______________\n\n    @pytest_asyncio.fixture\n    async def knowledge_graph():\n        graph = KnowledgeGraph()\n>       await graph.initialize()\nE       AttributeError: 'KnowledgeGraph' object has no attribute 'initialize'\n\ntests/test_knowledge_graph.py:37: AttributeError\n________________ ERROR at setup of test_knowledge_graph_updates ________________\n\n    @pytest_asyncio.fixture\n    async def knowledge_graph():\n        graph = KnowledgeGraph()\n>       await graph.initialize()\nE       AttributeError: 'KnowledgeGraph' object has no attribute 'initialize'\n\ntests/test_knowledge_graph.py:37: AttributeError\n______________ ERROR at setup of test_knowledge_graph_validation _______________\n\n    @pytest_asyncio.fixture\n    async def knowledge_graph():\n        graph = KnowledgeGraph()\n>       await graph.initialize()\nE       AttributeError: 'KnowledgeGraph' object has no attribute 'initialize'\n\ntests/test_knowledge_graph.py:37: AttributeError\n____________________ ERROR at setup of test_triple_addition ____________________\n\n    @pytest_asyncio.fixture\n    async def knowledge_graph():\n        graph = KnowledgeGraph()\n>       await graph.initialize()\nE       AttributeError: 'KnowledgeGraph' object has no attribute 'initialize'\n\ntests/test_knowledge_graph.py:37: AttributeError\n_____________________ ERROR at setup of test_graph_update ______________________\n\n    @pytest_asyncio.fixture\n    async def knowledge_graph():\n        graph = KnowledgeGraph()\n>       await graph.initialize()\nE       AttributeError: 'KnowledgeGraph' object has no attribute 'initialize'\n\ntests/test_knowledge_graph.py:37: AttributeError\n______________________ ERROR at setup of test_graph_query ______________________\n\n    @pytest_asyncio.fixture\n    async def knowledge_graph():\n        graph = KnowledgeGraph()\n>       await graph.initialize()\nE       AttributeError: 'KnowledgeGraph' object has no attribute 'initialize'\n\ntests/test_knowledge_graph.py:37: AttributeError\n________________ ERROR at setup of test_semantic_relationships _________________\n\n    @pytest_asyncio.fixture\n    async def knowledge_graph():\n        graph = KnowledgeGraph()\n>       await graph.initialize()\nE       AttributeError: 'KnowledgeGraph' object has no attribute 'initialize'\n\ntests/test_knowledge_graph.py:37: AttributeError\n________________ ERROR at setup of test_complex_query_patterns _________________\n\n    @pytest_asyncio.fixture\n    async def knowledge_graph():\n        graph = KnowledgeGraph()\n>       await graph.initialize()\nE       AttributeError: 'KnowledgeGraph' object has no attribute 'initialize'\n\ntests/test_knowledge_graph.py:37: AttributeError\n____ ERROR at setup of TestPerformance.test_message_processing_performance _____\n\nself = <tests.test_performance.TestPerformance object at 0x111ec0950>\n\n    @pytest_asyncio.fixture\n    async def setup_performance_test(self):\n        \"\"\"Set up test environment for performance testing.\"\"\"\n        knowledge_graph = Graph()\n>       agent = TestPerformanceAgent(\n            \"test_performance_agent\",\n            capabilities={\n                Capability(CapabilityType.TASK_EXECUTION, \"1.0\"),\n                Capability(CapabilityType.KNOWLEDGE_GRAPH_QUERY, \"1.0\"),\n                Capability(CapabilityType.KNOWLEDGE_GRAPH_UPDATE, \"1.0\")\n            }\n        )\nE       TypeError: Can't instantiate abstract class TestPerformanceAgent with abstract method _process_message_impl\n\ntests/test_performance.py:67: TypeError\n_________ ERROR at setup of TestPerformance.test_concurrent_operations _________\n\nself = <tests.test_performance.TestPerformance object at 0x111eb7d10>\n\n    @pytest_asyncio.fixture\n    async def setup_performance_test(self):\n        \"\"\"Set up test environment for performance testing.\"\"\"\n        knowledge_graph = Graph()\n>       agent = TestPerformanceAgent(\n            \"test_performance_agent\",\n            capabilities={\n                Capability(CapabilityType.TASK_EXECUTION, \"1.0\"),\n                Capability(CapabilityType.KNOWLEDGE_GRAPH_QUERY, \"1.0\"),\n                Capability(CapabilityType.KNOWLEDGE_GRAPH_UPDATE, \"1.0\")\n            }\n        )\nE       TypeError: Can't instantiate abstract class TestPerformanceAgent with abstract method _process_message_impl\n\ntests/test_performance.py:67: TypeError\n____________ ERROR at setup of TestPerformance.test_resource_usage _____________\n\nself = <tests.test_performance.TestPerformance object at 0x111eb5210>\n\n    @pytest_asyncio.fixture\n    async def setup_performance_test(self):\n        \"\"\"Set up test environment for performance testing.\"\"\"\n        knowledge_graph = Graph()\n>       agent = TestPerformanceAgent(\n            \"test_performance_agent\",\n            capabilities={\n                Capability(CapabilityType.TASK_EXECUTION, \"1.0\"),\n                Capability(CapabilityType.KNOWLEDGE_GRAPH_QUERY, \"1.0\"),\n                Capability(CapabilityType.KNOWLEDGE_GRAPH_UPDATE, \"1.0\")\n            }\n        )\nE       TypeError: Can't instantiate abstract class TestPerformanceAgent with abstract method _process_message_impl\n\ntests/test_performance.py:67: TypeError\n_________ ERROR at setup of TestPerformance.test_recovery_performance __________\n\nself = <tests.test_performance.TestPerformance object at 0x111f7d090>\n\n    @pytest_asyncio.fixture\n    async def setup_performance_test(self):\n        \"\"\"Set up test environment for performance testing.\"\"\"\n        knowledge_graph = Graph()\n>       agent = TestPerformanceAgent(\n            \"test_performance_agent\",\n            capabilities={\n                Capability(CapabilityType.TASK_EXECUTION, \"1.0\"),\n                Capability(CapabilityType.KNOWLEDGE_GRAPH_QUERY, \"1.0\"),\n                Capability(CapabilityType.KNOWLEDGE_GRAPH_UPDATE, \"1.0\")\n            }\n        )\nE       TypeError: Can't instantiate abstract class TestPerformanceAgent with abstract method _process_message_impl\n\ntests/test_performance.py:67: TypeError\n___________ ERROR at setup of TestPromptAgent.test_prompt_generation ___________\n\nself = <tests.test_prompt_agent.TestPromptAgent object at 0x111fc9590>\n\n    @pytest_asyncio.fixture\n    async def setup_prompt_agent(self):\n        \"\"\"Set up test environment for prompt agent.\"\"\"\n        knowledge_graph = Graph()\n>       agent = AgenticPromptAgent(\n            \"test_prompt_agent\",\n            capabilities={\n                Capability(CapabilityType.CODE_REVIEW, \"1.0\"),\n                Capability(CapabilityType.KNOWLEDGE_GRAPH_QUERY, \"1.0\"),\n                Capability(CapabilityType.KNOWLEDGE_GRAPH_UPDATE, \"1.0\")\n            },\n            config={\n                \"consensus_threshold\": 0.75,\n                \"prompt_templates\": {\n                    \"code_review\": {\n                        \"role\": \"You are a {role} specializing in {specialization}.\",\n                        \"context\": \"Context:\\n{context}\",\n                        \"objective\": \"Objective:\\n{objective}\",\n                        \"approach\": \"Approach:\\n{approach}\",\n                        \"documentation\": \"Documentation:\\n{documentation}\"\n                    },\n                    \"task_execution\": {\n                        \"role\": \"You are a {role}.\",\n                        \"task\": \"Task:\\n{task}\",\n                        \"constraints\": \"Constraints:\\n{constraints}\",\n                        \"expected_output\": \"Expected Output:\\n{expected_output}\"\n                    }\n                }\n            }\n        )\nE       TypeError: Can't instantiate abstract class AgenticPromptAgent with abstract method _process_message_impl\n\ntests/test_prompt_agent.py:16: TypeError\n______ ERROR at setup of TestPromptAgent.test_knowledge_graph_integration ______\n\nself = <tests.test_prompt_agent.TestPromptAgent object at 0x111fc9cd0>\n\n    @pytest_asyncio.fixture\n    async def setup_prompt_agent(self):\n        \"\"\"Set up test environment for prompt agent.\"\"\"\n        knowledge_graph = Graph()\n>       agent = AgenticPromptAgent(\n            \"test_prompt_agent\",\n            capabilities={\n                Capability(CapabilityType.CODE_REVIEW, \"1.0\"),\n                Capability(CapabilityType.KNOWLEDGE_GRAPH_QUERY, \"1.0\"),\n                Capability(CapabilityType.KNOWLEDGE_GRAPH_UPDATE, \"1.0\")\n            },\n            config={\n                \"consensus_threshold\": 0.75,\n                \"prompt_templates\": {\n                    \"code_review\": {\n                        \"role\": \"You are a {role} specializing in {specialization}.\",\n                        \"context\": \"Context:\\n{context}\",\n                        \"objective\": \"Objective:\\n{objective}\",\n                        \"approach\": \"Approach:\\n{approach}\",\n                        \"documentation\": \"Documentation:\\n{documentation}\"\n                    },\n                    \"task_execution\": {\n                        \"role\": \"You are a {role}.\",\n                        \"task\": \"Task:\\n{task}\",\n                        \"constraints\": \"Constraints:\\n{constraints}\",\n                        \"expected_output\": \"Expected Output:\\n{expected_output}\"\n                    }\n                }\n            }\n        )\nE       TypeError: Can't instantiate abstract class AgenticPromptAgent with abstract method _process_message_impl\n\ntests/test_prompt_agent.py:16: TypeError\n___________ ERROR at setup of TestPromptAgent.test_prompt_validation ___________\n\nself = <tests.test_prompt_agent.TestPromptAgent object at 0x111fc9dd0>\n\n    @pytest_asyncio.fixture\n    async def setup_prompt_agent(self):\n        \"\"\"Set up test environment for prompt agent.\"\"\"\n        knowledge_graph = Graph()\n>       agent = AgenticPromptAgent(\n            \"test_prompt_agent\",\n            capabilities={\n                Capability(CapabilityType.CODE_REVIEW, \"1.0\"),\n                Capability(CapabilityType.KNOWLEDGE_GRAPH_QUERY, \"1.0\"),\n                Capability(CapabilityType.KNOWLEDGE_GRAPH_UPDATE, \"1.0\")\n            },\n            config={\n                \"consensus_threshold\": 0.75,\n                \"prompt_templates\": {\n                    \"code_review\": {\n                        \"role\": \"You are a {role} specializing in {specialization}.\",\n                        \"context\": \"Context:\\n{context}\",\n                        \"objective\": \"Objective:\\n{objective}\",\n                        \"approach\": \"Approach:\\n{approach}\",\n                        \"documentation\": \"Documentation:\\n{documentation}\"\n                    },\n                    \"task_execution\": {\n                        \"role\": \"You are a {role}.\",\n                        \"task\": \"Task:\\n{task}\",\n                        \"constraints\": \"Constraints:\\n{constraints}\",\n                        \"expected_output\": \"Expected Output:\\n{expected_output}\"\n                    }\n                }\n            }\n        )\nE       TypeError: Can't instantiate abstract class AgenticPromptAgent with abstract method _process_message_impl\n\ntests/test_prompt_agent.py:16: TypeError\n____________ ERROR at setup of TestPromptAgent.test_prompt_metrics _____________\n\nself = <tests.test_prompt_agent.TestPromptAgent object at 0x111fcb210>\n\n    @pytest_asyncio.fixture\n    async def setup_prompt_agent(self):\n        \"\"\"Set up test environment for prompt agent.\"\"\"\n        knowledge_graph = Graph()\n>       agent = AgenticPromptAgent(\n            \"test_prompt_agent\",\n            capabilities={\n                Capability(CapabilityType.CODE_REVIEW, \"1.0\"),\n                Capability(CapabilityType.KNOWLEDGE_GRAPH_QUERY, \"1.0\"),\n                Capability(CapabilityType.KNOWLEDGE_GRAPH_UPDATE, \"1.0\")\n            },\n            config={\n                \"consensus_threshold\": 0.75,\n                \"prompt_templates\": {\n                    \"code_review\": {\n                        \"role\": \"You are a {role} specializing in {specialization}.\",\n                        \"context\": \"Context:\\n{context}\",\n                        \"objective\": \"Objective:\\n{objective}\",\n                        \"approach\": \"Approach:\\n{approach}\",\n                        \"documentation\": \"Documentation:\\n{documentation}\"\n                    },\n                    \"task_execution\": {\n                        \"role\": \"You are a {role}.\",\n                        \"task\": \"Task:\\n{task}\",\n                        \"constraints\": \"Constraints:\\n{constraints}\",\n                        \"expected_output\": \"Expected Output:\\n{expected_output}\"\n                    }\n                }\n            }\n        )\nE       TypeError: Can't instantiate abstract class AgenticPromptAgent with abstract method _process_message_impl\n\ntests/test_prompt_agent.py:16: TypeError\n______________________ ERROR at setup of test_initialize _______________________\n\n    @pytest_asyncio.fixture\n    async def research_agent():\n        \"\"\"Create a ResearchAgent instance for testing.\"\"\"\n>       agent = ResearchAgent(\"test_research_agent\")\nE       TypeError: Can't instantiate abstract class ResearchAgent with abstract method _process_message_impl\n\ntests/test_research_agent.py:12: TypeError\n____________________ ERROR at setup of test_process_message ____________________\n\n    @pytest_asyncio.fixture\n    async def research_agent():\n        \"\"\"Create a ResearchAgent instance for testing.\"\"\"\n>       agent = ResearchAgent(\"test_research_agent\")\nE       TypeError: Can't instantiate abstract class ResearchAgent with abstract method _process_message_impl\n\ntests/test_research_agent.py:12: TypeError\n_______________ ERROR at setup of test_test_agent_initialization _______________\n\n    @pytest_asyncio.fixture\n    async def test_research_agent():\n        \"\"\"Create a ResearchTestAgent instance for testing.\"\"\"\n>       agent = ResearchTestAgent()\nE       TypeError: ResearchTestAgent.__init__() missing 1 required positional argument: 'agent_id'\n\ntests/test_research_agent.py:21: TypeError\n______________ ERROR at setup of test_test_agent_message_history _______________\n\n    @pytest_asyncio.fixture\n    async def test_research_agent():\n        \"\"\"Create a ResearchTestAgent instance for testing.\"\"\"\n>       agent = ResearchTestAgent()\nE       TypeError: ResearchTestAgent.__init__() missing 1 required positional argument: 'agent_id'\n\ntests/test_research_agent.py:21: TypeError\n______________ ERROR at setup of test_test_agent_knowledge_graph _______________\n\n    @pytest_asyncio.fixture\n    async def test_research_agent():\n        \"\"\"Create a ResearchTestAgent instance for testing.\"\"\"\n>       agent = ResearchTestAgent()\nE       TypeError: ResearchTestAgent.__init__() missing 1 required positional argument: 'agent_id'\n\ntests/test_research_agent.py:21: TypeError\n_____________ ERROR at setup of test_process_message_without_topic _____________\n\n    @pytest_asyncio.fixture\n    async def research_agent():\n        \"\"\"Create a ResearchAgent instance for testing.\"\"\"\n>       agent = ResearchAgent(\"test_research_agent\")\nE       TypeError: Can't instantiate abstract class ResearchAgent with abstract method _process_message_impl\n\ntests/test_research_agent.py:12: TypeError\n______________ ERROR at setup of test_process_message_with_topic _______________\n\n    @pytest_asyncio.fixture\n    async def research_agent():\n        \"\"\"Create a ResearchAgent instance for testing.\"\"\"\n>       agent = ResearchAgent(\"test_research_agent\")\nE       TypeError: Can't instantiate abstract class ResearchAgent with abstract method _process_message_impl\n\ntests/test_research_agent.py:12: TypeError\n__________ ERROR at setup of test_query_knowledge_graph_without_topic __________\n\n    @pytest_asyncio.fixture\n    async def research_agent():\n        \"\"\"Create a ResearchAgent instance for testing.\"\"\"\n>       agent = ResearchAgent(\"test_research_agent\")\nE       TypeError: Can't instantiate abstract class ResearchAgent with abstract method _process_message_impl\n\ntests/test_research_agent.py:12: TypeError\n___________ ERROR at setup of test_query_knowledge_graph_with_topic ____________\n\n    @pytest_asyncio.fixture\n    async def research_agent():\n        \"\"\"Create a ResearchAgent instance for testing.\"\"\"\n>       agent = ResearchAgent(\"test_research_agent\")\nE       TypeError: Can't instantiate abstract class ResearchAgent with abstract method _process_message_impl\n\ntests/test_research_agent.py:12: TypeError\n________________ ERROR at setup of test_update_knowledge_graph _________________\n\n    @pytest_asyncio.fixture\n    async def research_agent():\n        \"\"\"Create a ResearchAgent instance for testing.\"\"\"\n>       agent = ResearchAgent(\"test_research_agent\")\nE       TypeError: Can't instantiate abstract class ResearchAgent with abstract method _process_message_impl\n\ntests/test_research_agent.py:12: TypeError\n__________________ ERROR at setup of test_confidence_scoring ___________________\n\n    @pytest_asyncio.fixture\n    async def research_agent():\n        \"\"\"Create a ResearchAgent instance for testing.\"\"\"\n>       agent = ResearchAgent(\"test_research_agent\")\nE       TypeError: Can't instantiate abstract class ResearchAgent with abstract method _process_message_impl\n\ntests/test_research_agent.py:12: TypeError\n___________________ ERROR at setup of test_evidence_tracking ___________________\n\n    @pytest_asyncio.fixture\n    async def research_agent():\n        \"\"\"Create a ResearchAgent instance for testing.\"\"\"\n>       agent = ResearchAgent(\"test_research_agent\")\nE       TypeError: Can't instantiate abstract class ResearchAgent with abstract method _process_message_impl\n\ntests/test_research_agent.py:12: TypeError\n________________ ERROR at setup of test_multiple_research_paths ________________\n\n    @pytest_asyncio.fixture\n    async def research_agent():\n        \"\"\"Create a ResearchAgent instance for testing.\"\"\"\n>       agent = ResearchAgent(\"test_research_agent\")\nE       TypeError: Can't instantiate abstract class ResearchAgent with abstract method _process_message_impl\n\ntests/test_research_agent.py:12: TypeError\n____________________ ERROR at setup of test_error_handling _____________________\n\n    @pytest_asyncio.fixture\n    async def research_agent():\n        \"\"\"Create a ResearchAgent instance for testing.\"\"\"\n>       agent = ResearchAgent(\"test_research_agent\")\nE       TypeError: Can't instantiate abstract class ResearchAgent with abstract method _process_message_impl\n\ntests/test_research_agent.py:12: TypeError\n_________________ ERROR at setup of test_reasoner_integration __________________\n\n    @pytest_asyncio.fixture\n    async def research_agent():\n        \"\"\"Create a ResearchAgent instance for testing.\"\"\"\n>       agent = ResearchAgent(\"test_research_agent\")\nE       TypeError: Can't instantiate abstract class ResearchAgent with abstract method _process_message_impl\n\ntests/test_research_agent.py:12: TypeError\n_____________ ERROR at setup of test_research_findings_persistence _____________\n\n    @pytest_asyncio.fixture\n    async def research_agent():\n        \"\"\"Create a ResearchAgent instance for testing.\"\"\"\n>       agent = ResearchAgent(\"test_research_agent\")\nE       TypeError: Can't instantiate abstract class ResearchAgent with abstract method _process_message_impl\n\ntests/test_research_agent.py:12: TypeError\n____________________ ERROR at setup of test_security_levels ____________________\n\n    @pytest_asyncio.fixture\n    async def setup_security_test():\n        \"\"\"Set up test environment for security testing.\"\"\"\n        registry = AgentRegistry()\n        knowledge_graph = Graph()\n        factory = AgentFactory(registry, knowledge_graph)\n    \n        # Register test agent template\n        await factory.register_agent_template(\n            \"security_test\",\n            TestSecurityAgent,\n>           {CapabilityType.SECURITY_CHECK}\n        )\n\ntests/test_security_audit.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <enum 'CapabilityType'>, name = 'SECURITY_CHECK'\n\n    def __getattr__(cls, name):\n        \"\"\"\n        Return the enum member matching `name`\n    \n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n>           raise AttributeError(name) from None\nE           AttributeError: SECURITY_CHECK\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/enum.py:784: AttributeError\n_____________________ ERROR at setup of test_audit_logging _____________________\n\n    @pytest_asyncio.fixture\n    async def setup_security_test():\n        \"\"\"Set up test environment for security testing.\"\"\"\n        registry = AgentRegistry()\n        knowledge_graph = Graph()\n        factory = AgentFactory(registry, knowledge_graph)\n    \n        # Register test agent template\n        await factory.register_agent_template(\n            \"security_test\",\n            TestSecurityAgent,\n>           {CapabilityType.SECURITY_CHECK}\n        )\n\ntests/test_security_audit.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <enum 'CapabilityType'>, name = 'SECURITY_CHECK'\n\n    def __getattr__(cls, name):\n        \"\"\"\n        Return the enum member matching `name`\n    \n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n>           raise AttributeError(name) from None\nE           AttributeError: SECURITY_CHECK\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/enum.py:784: AttributeError\n___________________ ERROR at setup of test_security_metrics ____________________\n\n    @pytest_asyncio.fixture\n    async def setup_security_test():\n        \"\"\"Set up test environment for security testing.\"\"\"\n        registry = AgentRegistry()\n        knowledge_graph = Graph()\n        factory = AgentFactory(registry, knowledge_graph)\n    \n        # Register test agent template\n        await factory.register_agent_template(\n            \"security_test\",\n            TestSecurityAgent,\n>           {CapabilityType.SECURITY_CHECK}\n        )\n\ntests/test_security_audit.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <enum 'CapabilityType'>, name = 'SECURITY_CHECK'\n\n    def __getattr__(cls, name):\n        \"\"\"\n        Return the enum member matching `name`\n    \n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n>           raise AttributeError(name) from None\nE           AttributeError: SECURITY_CHECK\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/enum.py:784: AttributeError\n___________________ ERROR at setup of test_email_enhancement ___________________\n\n    @pytest_asyncio.fixture\n    async def vertex_agent():\n        \"\"\"Fixture to create and initialize a VertexEmailAgent instance.\"\"\"\n>       agent = VertexEmailAgent()\nE       TypeError: Can't instantiate abstract class VertexEmailAgent with abstract method _process_message_impl\n\ntests/test_vertex_integration.py:30: TypeError\n__________________ ERROR at setup of test_message_processing ___________________\n\n    @pytest_asyncio.fixture\n    async def vertex_agent():\n        \"\"\"Fixture to create and initialize a VertexEmailAgent instance.\"\"\"\n>       agent = VertexEmailAgent()\nE       TypeError: Can't instantiate abstract class VertexEmailAgent with abstract method _process_message_impl\n\ntests/test_vertex_integration.py:30: TypeError\n_________________ ERROR at setup of test_invalid_message_type __________________\n\n    @pytest_asyncio.fixture\n    async def vertex_agent():\n        \"\"\"Fixture to create and initialize a VertexEmailAgent instance.\"\"\"\n>       agent = VertexEmailAgent()\nE       TypeError: Can't instantiate abstract class VertexEmailAgent with abstract method _process_message_impl\n\ntests/test_vertex_integration.py:30: TypeError\n______________ ERROR at setup of test_knowledge_graph_integration ______________\n\n    @pytest_asyncio.fixture\n    async def vertex_agent():\n        \"\"\"Fixture to create and initialize a VertexEmailAgent instance.\"\"\"\n>       agent = VertexEmailAgent()\nE       TypeError: Can't instantiate abstract class VertexEmailAgent with abstract method _process_message_impl\n\ntests/test_vertex_integration.py:30: TypeError\n____________________ ERROR at setup of test_error_handling _____________________\n\n    @pytest_asyncio.fixture\n    async def vertex_agent():\n        \"\"\"Fixture to create and initialize a VertexEmailAgent instance.\"\"\"\n>       agent = VertexEmailAgent()\nE       TypeError: Can't instantiate abstract class VertexEmailAgent with abstract method _process_message_impl\n\ntests/test_vertex_integration.py:30: TypeError\n________________ ERROR at setup of test_empty_subject_and_body _________________\n\n    @pytest_asyncio.fixture\n    async def vertex_agent():\n        \"\"\"Fixture to create and initialize a VertexEmailAgent instance.\"\"\"\n>       agent = VertexEmailAgent()\nE       TypeError: Can't instantiate abstract class VertexEmailAgent with abstract method _process_message_impl\n\ntests/test_vertex_integration.py:30: TypeError\n__________________ ERROR at setup of test_agent_registration ___________________\n\nregistry = <agents.core.agent_registry.AgentRegistry object at 0x3039be7d0>\n\n    @pytest_asyncio.fixture\n    async def setup_agents(registry):\n        \"\"\"Set up test agents with their capabilities.\"\"\"\n        agents = {\n>           \"research\": ResearchTestAgent(),\n            \"data_processor\": DataProcessorTestAgent(),\n            \"sensor\": SensorTestAgent()\n        }\nE       TypeError: ResearchTestAgent.__init__() missing 1 required positional argument: 'agent_id'\n\ntests/test_workflow_manager.py:41: TypeError\n__________________ ERROR at setup of test_workflow_execution ___________________\nfile /Users/nicholasbaro/Python/semant/tests/test_workflow_manager.py, line 148\n  @pytest.mark.asyncio\n  async def test_workflow_execution(workflow_manager, test_agents):\n      # Create and register workflow\n      workflow = Workflow(\n          workflow_id=\"exec_workflow\",\n          name=\"Execution Workflow\",\n          description=\"Workflow for execution testing\",\n          required_capabilities={\n              Capability(CapabilityType.TASK_EXECUTION, \"1.0\"),\n              Capability(CapabilityType.MONITORING, \"1.0\")\n          }\n      )\n      await workflow_manager.register_workflow(workflow)\n\n      # Register agents\n      await workflow_manager.register_agent(test_agents[\"worker\"])\n      await workflow_manager.register_agent(test_agents[\"monitor\"])\n\n      # Execute workflow\n      execution = await workflow_manager.execute_workflow(\"exec_workflow\")\n      assert execution is not None\n      assert execution.workflow_id == \"exec_workflow\"\n      assert execution.status == \"running\"\n\n      # Verify agent assignments\n      assignments = await workflow_manager.get_workflow_assignments(\"exec_workflow\")\n      assert len(assignments) == 2\n      assert any(a.agent_id == \"worker_1\" for a in assignments)\n      assert any(a.agent_id == \"monitor_1\" for a in assignments)\nE       fixture 'test_agents' not found\n>       available fixtures: _class_event_loop, _function_event_loop, _module_event_loop, _package_event_loop, _session_event_loop, agent_factory, agent_registry, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, event_loop, event_loop_policy, knowledge_graph, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, registry, session_mocker, setup_agents, test_capabilities, test_config, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, workflow_manager\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/Users/nicholasbaro/Python/semant/tests/test_workflow_manager.py:148\n_________________ ERROR at setup of test_workflow_supervision __________________\nfile /Users/nicholasbaro/Python/semant/tests/test_workflow_manager.py, line 178\n  @pytest.mark.asyncio\n  async def test_workflow_supervision(workflow_manager, test_agents):\n      # Create and register workflow\n      workflow = Workflow(\n          workflow_id=\"supervised_workflow\",\n          name=\"Supervised Workflow\",\n          description=\"Workflow with supervision\",\n          required_capabilities={\n              Capability(CapabilityType.SUPERVISION, \"1.0\"),\n              Capability(CapabilityType.TASK_EXECUTION, \"1.0\")\n          }\n      )\n      await workflow_manager.register_workflow(workflow)\n\n      # Register agents\n      await workflow_manager.register_agent(test_agents[\"supervisor\"])\n      await workflow_manager.register_agent(test_agents[\"worker\"])\n\n      # Execute workflow\n      execution = await workflow_manager.execute_workflow(\"supervised_workflow\")\n      assert execution is not None\n      assert execution.workflow_id == \"supervised_workflow\"\n\n      # Verify supervisor assignment\n      assignments = await workflow_manager.get_workflow_assignments(\"supervised_workflow\")\n      assert len(assignments) == 2\n      supervisor = next(a for a in assignments if a.agent_id == \"supervisor_1\")\n      assert supervisor is not None\n      capabilities = await supervisor.get_capabilities()\n      assert any(c.type == CapabilityType.SUPERVISION for c in capabilities)\nE       fixture 'test_agents' not found\n>       available fixtures: _class_event_loop, _function_event_loop, _module_event_loop, _package_event_loop, _session_event_loop, agent_factory, agent_registry, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, class_mocker, cov, doctest_namespace, event_loop, event_loop_policy, knowledge_graph, mocker, module_mocker, monkeypatch, no_cover, package_mocker, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, registry, session_mocker, setup_agents, test_capabilities, test_config, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, workflow_manager\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/Users/nicholasbaro/Python/semant/tests/test_workflow_manager.py:178\n________________ ERROR at teardown of test_workflow_validation _________________\n\nregistry = <agents.core.agent_registry.AgentRegistry object at 0x303bd6c10>\n\n    @pytest_asyncio.fixture(scope=\"function\")\n    async def workflow_manager(registry):\n        \"\"\"Create a WorkflowManager instance with the registry.\"\"\"\n        manager = WorkflowManager(registry)\n        await manager.initialize()\n        yield manager\n>       await manager.shutdown()  # Clean up after test\n\ntests/test_workflow_manager.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.workflow_manager.WorkflowManager object at 0x303d15e50>\n\n    async def shutdown(self) -> None:\n        \"\"\"Shutdown the workflow manager.\"\"\"\n        async with self._lock:\n            for workflow_id, workflow in self._workflows.items():\n>               if workflow.status == WorkflowStatus.RUNNING:\nE               AttributeError: 'dict' object has no attribute 'status'\n\nagents/core/workflow_manager.py:460: AttributeError\n________ ERROR at teardown of test_concurrent_registration_and_assembly ________\n\nregistry = <agents.core.agent_registry.AgentRegistry object at 0x304d1d190>\n\n    @pytest_asyncio.fixture(scope=\"function\")\n    async def workflow_manager(registry):\n        \"\"\"Create a WorkflowManager instance with the registry.\"\"\"\n        manager = WorkflowManager(registry)\n        await manager.initialize()\n        yield manager\n>       await manager.shutdown()  # Clean up after test\n\ntests/test_workflow_manager.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.workflow_manager.WorkflowManager object at 0x303f2bcd0>\n\n    async def shutdown(self) -> None:\n        \"\"\"Shutdown the workflow manager.\"\"\"\n        async with self._lock:\n            for workflow_id, workflow in self._workflows.items():\n>               if workflow.status == WorkflowStatus.RUNNING:\nE               AttributeError: 'dict' object has no attribute 'status'\n\nagents/core/workflow_manager.py:460: AttributeError\n______________ ERROR at setup of test_anomaly_detection_workflow _______________\n\nregistry = <agents.core.agent_registry.AgentRegistry object at 0x30251a190>\n\n    @pytest_asyncio.fixture\n    async def setup_agents(registry):\n        \"\"\"Set up test agents with their capabilities.\"\"\"\n        agents = {\n>           \"research\": ResearchTestAgent(),\n            \"data_processor\": DataProcessorTestAgent(),\n            \"sensor\": SensorTestAgent()\n        }\nE       TypeError: ResearchTestAgent.__init__() missing 1 required positional argument: 'agent_id'\n\ntests/test_workflow_manager.py:41: TypeError\n_____________ ERROR at setup of test_workflow_dependency_execution _____________\n\nregistry = <agents.core.agent_registry.AgentRegistry object at 0x303f45150>\n\n    @pytest_asyncio.fixture\n    async def setup_agents(registry):\n        \"\"\"Set up test agents with their capabilities.\"\"\"\n        agents = {\n>           \"research\": ResearchTestAgent(),\n            \"data_processor\": DataProcessorTestAgent(),\n            \"sensor\": SensorTestAgent()\n        }\nE       TypeError: ResearchTestAgent.__init__() missing 1 required positional argument: 'agent_id'\n\ntests/test_workflow_manager.py:41: TypeError\n_______________ ERROR at setup of test_workflow_timeout_handling _______________\n\nregistry = <agents.core.agent_registry.AgentRegistry object at 0x304902d10>\n\n    @pytest_asyncio.fixture\n    async def setup_agents(registry):\n        \"\"\"Set up test agents with their capabilities.\"\"\"\n        agents = {\n>           \"research\": ResearchTestAgent(),\n            \"data_processor\": DataProcessorTestAgent(),\n            \"sensor\": SensorTestAgent()\n        }\nE       TypeError: ResearchTestAgent.__init__() missing 1 required positional argument: 'agent_id'\n\ntests/test_workflow_manager.py:41: TypeError\n________________ ERROR at setup of test_workflow_error_recovery ________________\n\nregistry = <agents.core.agent_registry.AgentRegistry object at 0x3024f3d50>\n\n    @pytest_asyncio.fixture\n    async def setup_agents(registry):\n        \"\"\"Set up test agents with their capabilities.\"\"\"\n        agents = {\n>           \"research\": ResearchTestAgent(),\n            \"data_processor\": DataProcessorTestAgent(),\n            \"sensor\": SensorTestAgent()\n        }\nE       TypeError: ResearchTestAgent.__init__() missing 1 required positional argument: 'agent_id'\n\ntests/test_workflow_manager.py:41: TypeError\n_________________ ERROR at setup of test_transaction_atomicity _________________\n\nrequest = <SubRequest 'knowledge_graph' for <Coroutine test_transaction_atomicity>>\nkwargs = {'test_config': {'knowledge_graph': {'namespaces': ['http://example.org/demo/', 'http://example.org/demo/consulting/',...'Process Optimization', 'Strategic Planning'], 'timeline_range': ['6 months', '12 months', '18 months', '24 months']}}}\nevent_loop_fixture_id = '_function_event_loop'\nevent_loop = <_UnixSelectorEventLoop running=False closed=False debug=False>\nsetup = <function _wrap_async_fixture.<locals>._async_fixture_wrapper.<locals>.setup at 0x30b1c2520>\ncontext = <_contextvars.Context object at 0x303bbe100>\nsetup_task = <Task finished name='Task-734' coro=<_wrap_async_fixture.<locals>._async_fixture_wrapper.<locals>.setup() done, define...est_asyncio/plugin.py:361> exception=AttributeError(\"'KnowledgeGraphManager' object has no attribute 'add_namespace'\")>\n\n    @functools.wraps(fixture)\n    def _async_fixture_wrapper(request: FixtureRequest, **kwargs: Any):\n        func = _perhaps_rebind_fixture_func(fixture, request.instance)\n        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(\n            request, func\n        )\n        event_loop = request.getfixturevalue(event_loop_fixture_id)\n        kwargs.pop(event_loop_fixture_id, None)\n    \n        async def setup():\n            res = await func(**_add_kwargs(func, kwargs, request))\n            return res\n    \n        context = contextvars.copy_context()\n        setup_task = _create_task_in_context(event_loop, setup(), context)\n>       result = event_loop.run_until_complete(setup_task)\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/pytest_asyncio/plugin.py:367: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py:654: in run_until_complete\n    return future.result()\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/pytest_asyncio/plugin.py:362: in setup\n    res = await func(**_add_kwargs(func, kwargs, request))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntest_config = {'knowledge_graph': {'namespaces': ['http://example.org/demo/', 'http://example.org/demo/consulting/', 'http://example... 'Process Optimization', 'Strategic Planning'], 'timeline_range': ['6 months', '12 months', '18 months', '24 months']}}\n\n    @pytest.fixture\n    async def knowledge_graph(test_config):\n        \"\"\"Create and initialize knowledge graph.\"\"\"\n        kg = KnowledgeGraphManager()\n        await kg.initialize()\n        for namespace in test_config[\"knowledge_graph\"][\"namespaces\"]:\n>           await kg.add_namespace(namespace)\nE           AttributeError: 'KnowledgeGraphManager' object has no attribute 'add_namespace'\n\ntests/conftest.py:62: AttributeError\n______________________ ERROR at setup of test_retry_logic ______________________\n\nrequest = <SubRequest 'knowledge_graph' for <Coroutine test_retry_logic>>\nkwargs = {'test_config': {'knowledge_graph': {'namespaces': ['http://example.org/demo/', 'http://example.org/demo/consulting/',...'Process Optimization', 'Strategic Planning'], 'timeline_range': ['6 months', '12 months', '18 months', '24 months']}}}\nevent_loop_fixture_id = '_function_event_loop'\nevent_loop = <_UnixSelectorEventLoop running=False closed=False debug=False>\nsetup = <function _wrap_async_fixture.<locals>._async_fixture_wrapper.<locals>.setup at 0x30b1c2840>\ncontext = <_contextvars.Context object at 0x303af2740>\nsetup_task = <Task finished name='Task-741' coro=<_wrap_async_fixture.<locals>._async_fixture_wrapper.<locals>.setup() done, define...est_asyncio/plugin.py:361> exception=AttributeError(\"'KnowledgeGraphManager' object has no attribute 'add_namespace'\")>\n\n    @functools.wraps(fixture)\n    def _async_fixture_wrapper(request: FixtureRequest, **kwargs: Any):\n        func = _perhaps_rebind_fixture_func(fixture, request.instance)\n        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(\n            request, func\n        )\n        event_loop = request.getfixturevalue(event_loop_fixture_id)\n        kwargs.pop(event_loop_fixture_id, None)\n    \n        async def setup():\n            res = await func(**_add_kwargs(func, kwargs, request))\n            return res\n    \n        context = contextvars.copy_context()\n        setup_task = _create_task_in_context(event_loop, setup(), context)\n>       result = event_loop.run_until_complete(setup_task)\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/pytest_asyncio/plugin.py:367: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py:654: in run_until_complete\n    return future.result()\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/pytest_asyncio/plugin.py:362: in setup\n    res = await func(**_add_kwargs(func, kwargs, request))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntest_config = {'knowledge_graph': {'namespaces': ['http://example.org/demo/', 'http://example.org/demo/consulting/', 'http://example... 'Process Optimization', 'Strategic Planning'], 'timeline_range': ['6 months', '12 months', '18 months', '24 months']}}\n\n    @pytest.fixture\n    async def knowledge_graph(test_config):\n        \"\"\"Create and initialize knowledge graph.\"\"\"\n        kg = KnowledgeGraphManager()\n        await kg.initialize()\n        for namespace in test_config[\"knowledge_graph\"][\"namespaces\"]:\n>           await kg.add_namespace(namespace)\nE           AttributeError: 'KnowledgeGraphManager' object has no attribute 'add_namespace'\n\ntests/conftest.py:62: AttributeError\n________________ ERROR at setup of test_concurrent_transactions ________________\n\nrequest = <SubRequest 'knowledge_graph' for <Coroutine test_concurrent_transactions>>\nkwargs = {'test_config': {'knowledge_graph': {'namespaces': ['http://example.org/demo/', 'http://example.org/demo/consulting/',...'Process Optimization', 'Strategic Planning'], 'timeline_range': ['6 months', '12 months', '18 months', '24 months']}}}\nevent_loop_fixture_id = '_function_event_loop'\nevent_loop = <_UnixSelectorEventLoop running=False closed=False debug=False>\nsetup = <function _wrap_async_fixture.<locals>._async_fixture_wrapper.<locals>.setup at 0x30b1c0720>\ncontext = <_contextvars.Context object at 0x303f0b240>\nsetup_task = <Task finished name='Task-748' coro=<_wrap_async_fixture.<locals>._async_fixture_wrapper.<locals>.setup() done, define...est_asyncio/plugin.py:361> exception=AttributeError(\"'KnowledgeGraphManager' object has no attribute 'add_namespace'\")>\n\n    @functools.wraps(fixture)\n    def _async_fixture_wrapper(request: FixtureRequest, **kwargs: Any):\n        func = _perhaps_rebind_fixture_func(fixture, request.instance)\n        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(\n            request, func\n        )\n        event_loop = request.getfixturevalue(event_loop_fixture_id)\n        kwargs.pop(event_loop_fixture_id, None)\n    \n        async def setup():\n            res = await func(**_add_kwargs(func, kwargs, request))\n            return res\n    \n        context = contextvars.copy_context()\n        setup_task = _create_task_in_context(event_loop, setup(), context)\n>       result = event_loop.run_until_complete(setup_task)\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/pytest_asyncio/plugin.py:367: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py:654: in run_until_complete\n    return future.result()\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/pytest_asyncio/plugin.py:362: in setup\n    res = await func(**_add_kwargs(func, kwargs, request))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntest_config = {'knowledge_graph': {'namespaces': ['http://example.org/demo/', 'http://example.org/demo/consulting/', 'http://example... 'Process Optimization', 'Strategic Planning'], 'timeline_range': ['6 months', '12 months', '18 months', '24 months']}}\n\n    @pytest.fixture\n    async def knowledge_graph(test_config):\n        \"\"\"Create and initialize knowledge graph.\"\"\"\n        kg = KnowledgeGraphManager()\n        await kg.initialize()\n        for namespace in test_config[\"knowledge_graph\"][\"namespaces\"]:\n>           await kg.add_namespace(namespace)\nE           AttributeError: 'KnowledgeGraphManager' object has no attribute 'add_namespace'\n\ntests/conftest.py:62: AttributeError\n__________________ ERROR at setup of test_transaction_timeout __________________\n\nrequest = <SubRequest 'knowledge_graph' for <Coroutine test_transaction_timeout>>\nkwargs = {'test_config': {'knowledge_graph': {'namespaces': ['http://example.org/demo/', 'http://example.org/demo/consulting/',...'Process Optimization', 'Strategic Planning'], 'timeline_range': ['6 months', '12 months', '18 months', '24 months']}}}\nevent_loop_fixture_id = '_function_event_loop'\nevent_loop = <_UnixSelectorEventLoop running=False closed=False debug=False>\nsetup = <function _wrap_async_fixture.<locals>._async_fixture_wrapper.<locals>.setup at 0x30b04ce00>\ncontext = <_contextvars.Context object at 0x177f49dc0>\nsetup_task = <Task finished name='Task-755' coro=<_wrap_async_fixture.<locals>._async_fixture_wrapper.<locals>.setup() done, define...est_asyncio/plugin.py:361> exception=AttributeError(\"'KnowledgeGraphManager' object has no attribute 'add_namespace'\")>\n\n    @functools.wraps(fixture)\n    def _async_fixture_wrapper(request: FixtureRequest, **kwargs: Any):\n        func = _perhaps_rebind_fixture_func(fixture, request.instance)\n        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(\n            request, func\n        )\n        event_loop = request.getfixturevalue(event_loop_fixture_id)\n        kwargs.pop(event_loop_fixture_id, None)\n    \n        async def setup():\n            res = await func(**_add_kwargs(func, kwargs, request))\n            return res\n    \n        context = contextvars.copy_context()\n        setup_task = _create_task_in_context(event_loop, setup(), context)\n>       result = event_loop.run_until_complete(setup_task)\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/pytest_asyncio/plugin.py:367: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py:654: in run_until_complete\n    return future.result()\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/pytest_asyncio/plugin.py:362: in setup\n    res = await func(**_add_kwargs(func, kwargs, request))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntest_config = {'knowledge_graph': {'namespaces': ['http://example.org/demo/', 'http://example.org/demo/consulting/', 'http://example... 'Process Optimization', 'Strategic Planning'], 'timeline_range': ['6 months', '12 months', '18 months', '24 months']}}\n\n    @pytest.fixture\n    async def knowledge_graph(test_config):\n        \"\"\"Create and initialize knowledge graph.\"\"\"\n        kg = KnowledgeGraphManager()\n        await kg.initialize()\n        for namespace in test_config[\"knowledge_graph\"][\"namespaces\"]:\n>           await kg.add_namespace(namespace)\nE           AttributeError: 'KnowledgeGraphManager' object has no attribute 'add_namespace'\n\ntests/conftest.py:62: AttributeError\n___________ ERROR at teardown of test_workflow_persistence_save_load ___________\n\n    @pytest_asyncio.fixture\n    async def persistence():\n        \"\"\"Create a WorkflowPersistence instance for testing.\"\"\"\n        persistence = WorkflowPersistence()\n        yield persistence\n        # Cleanup test files\n        if os.path.exists(persistence.storage_dir):\n            for file in os.listdir(persistence.storage_dir):\n>               os.remove(os.path.join(persistence.storage_dir, file))\nE               PermissionError: [Errno 1] Operation not permitted: '/var/folders/8n/3yxkh4ks6sb51cmx8n8nk45m0000gn/T/workflows/history'\n\ntests/test_workflow_persistence.py:21: PermissionError\n__________ ERROR at teardown of test_workflow_persistence_versioning ___________\n\n    @pytest_asyncio.fixture\n    async def persistence():\n        \"\"\"Create a WorkflowPersistence instance for testing.\"\"\"\n        persistence = WorkflowPersistence()\n        yield persistence\n        # Cleanup test files\n        if os.path.exists(persistence.storage_dir):\n            for file in os.listdir(persistence.storage_dir):\n>               os.remove(os.path.join(persistence.storage_dir, file))\nE               PermissionError: [Errno 1] Operation not permitted: '/var/folders/8n/3yxkh4ks6sb51cmx8n8nk45m0000gn/T/workflows/history'\n\ntests/test_workflow_persistence.py:21: PermissionError\n___________ ERROR at teardown of test_workflow_persistence_recovery ____________\n\n    @pytest_asyncio.fixture\n    async def persistence():\n        \"\"\"Create a WorkflowPersistence instance for testing.\"\"\"\n        persistence = WorkflowPersistence()\n        yield persistence\n        # Cleanup test files\n        if os.path.exists(persistence.storage_dir):\n            for file in os.listdir(persistence.storage_dir):\n>               os.remove(os.path.join(persistence.storage_dir, file))\nE               PermissionError: [Errno 1] Operation not permitted: '/var/folders/8n/3yxkh4ks6sb51cmx8n8nk45m0000gn/T/workflows/history'\n\ntests/test_workflow_persistence.py:21: PermissionError\n____________ ERROR at teardown of test_workflow_manager_integration ____________\n\n    @pytest_asyncio.fixture\n    async def workflow_manager():\n        \"\"\"Create a WorkflowManager instance for testing.\"\"\"\n        registry = AgentRegistry()\n        manager = WorkflowManager(registry)\n        await manager.initialize()\n        yield manager\n        # Cleanup test files\n        if os.path.exists(manager.persistence.storage_dir):\n            for file in os.listdir(manager.persistence.storage_dir):\n>               os.remove(os.path.join(manager.persistence.storage_dir, file))\nE               PermissionError: [Errno 1] Operation not permitted: '/var/folders/8n/3yxkh4ks6sb51cmx8n8nk45m0000gn/T/workflows/history'\n\ntests/test_workflow_persistence.py:39: PermissionError\n_________________ ERROR at setup of test_diary_write_and_query _________________\n\n    @pytest_asyncio.fixture\n    async def diary_agent():\n>       agent = DiaryAgent()\nE       TypeError: Can't instantiate abstract class DiaryAgent with abstract method _process_message_impl\n\ntests/unit/test_additional_agents.py:13: TypeError\n______________________ ERROR at setup of test_diary_agent ______________________\n\n    @pytest_asyncio.fixture\n    async def diary_agent():\n>       agent = DiaryAgent()\nE       TypeError: Can't instantiate abstract class DiaryAgent with abstract method _process_message_impl\n\ntests/unit/test_additional_agents.py:13: TypeError\n________________ ERROR at setup of test_simple_agents_response _________________\n\n    @pytest_asyncio.fixture\n    async def test_agents():\n        \"\"\"Create test instances of simple agents.\"\"\"\n        agents = {\n>           \"finance\": TestAgent(\n                agent_id=\"finance_agent\",\n                agent_type=\"finance\",\n                capabilities=[CapabilityType.CODE_REVIEW],\n                default_response={\"status\": \"finance_processed\", \"result\": \"Financial analysis complete\"}\n            ),\n            \"coaching\": TestAgent(\n                agent_id=\"coaching_agent\",\n                agent_type=\"coaching\",\n                capabilities=[CapabilityType.CODE_REVIEW],\n                default_response={\"status\": \"coaching_processed\", \"result\": \"Coaching session complete\"}\n            ),\n            \"intelligence\": TestAgent(\n                agent_id=\"intelligence_agent\",\n                agent_type=\"intelligence\",\n                capabilities=[CapabilityType.CODE_REVIEW],\n                default_response={\"status\": \"intelligence_processed\", \"result\": \"Intelligence analysis complete\"}\n            ),\n            \"developer\": TestAgent(\n                agent_id=\"developer_agent\",\n                agent_type=\"developer\",\n                capabilities=[CapabilityType.CODE_REVIEW],\n                default_response={\"status\": \"development_processed\", \"result\": \"Development task complete\"}\n            )\n        }\n\ntests/unit/test_additional_agents.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/test_agents.py:116: in __init__\n    Capability(CapabilityType.GENERIC, \"1.0\"),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <enum 'CapabilityType'>, name = 'GENERIC'\n\n    def __getattr__(cls, name):\n        \"\"\"\n        Return the enum member matching `name`\n    \n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n>           raise AttributeError(name) from None\nE           AttributeError: GENERIC\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/enum.py:784: AttributeError\n_____________ ERROR at setup of test_simple_agents_knowledge_graph _____________\n\n    @pytest_asyncio.fixture\n    async def test_agents():\n        \"\"\"Create test instances of simple agents.\"\"\"\n        agents = {\n>           \"finance\": TestAgent(\n                agent_id=\"finance_agent\",\n                agent_type=\"finance\",\n                capabilities=[CapabilityType.CODE_REVIEW],\n                default_response={\"status\": \"finance_processed\", \"result\": \"Financial analysis complete\"}\n            ),\n            \"coaching\": TestAgent(\n                agent_id=\"coaching_agent\",\n                agent_type=\"coaching\",\n                capabilities=[CapabilityType.CODE_REVIEW],\n                default_response={\"status\": \"coaching_processed\", \"result\": \"Coaching session complete\"}\n            ),\n            \"intelligence\": TestAgent(\n                agent_id=\"intelligence_agent\",\n                agent_type=\"intelligence\",\n                capabilities=[CapabilityType.CODE_REVIEW],\n                default_response={\"status\": \"intelligence_processed\", \"result\": \"Intelligence analysis complete\"}\n            ),\n            \"developer\": TestAgent(\n                agent_id=\"developer_agent\",\n                agent_type=\"developer\",\n                capabilities=[CapabilityType.CODE_REVIEW],\n                default_response={\"status\": \"development_processed\", \"result\": \"Development task complete\"}\n            )\n        }\n\ntests/unit/test_additional_agents.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/test_agents.py:116: in __init__\n    Capability(CapabilityType.GENERIC, \"1.0\"),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <enum 'CapabilityType'>, name = 'GENERIC'\n\n    def __getattr__(cls, name):\n        \"\"\"\n        Return the enum member matching `name`\n    \n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n>           raise AttributeError(name) from None\nE           AttributeError: GENERIC\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/enum.py:784: AttributeError\n_________________ ERROR at setup of test_agent_initialization __________________\n\nknowledge_graph = <kg.models.graph_manager.KnowledgeGraphManager object at 0x304894410>\n\n    @pytest_asyncio.fixture\n    async def corporate_agent(knowledge_graph):\n        \"\"\"Fixture for corporate knowledge agent.\"\"\"\n>       agent = CorporateKnowledgeAgent()\nE       TypeError: Can't instantiate abstract class CorporateKnowledgeAgent with abstract method _process_message_impl\n\ntests/unit/test_corporate_knowledge_agent.py:18: TypeError\n____________________ ERROR at setup of test_document_ingest ____________________\n\nknowledge_graph = <kg.models.graph_manager.KnowledgeGraphManager object at 0x303962dd0>\n\n    @pytest_asyncio.fixture\n    async def corporate_agent(knowledge_graph):\n        \"\"\"Fixture for corporate knowledge agent.\"\"\"\n>       agent = CorporateKnowledgeAgent()\nE       TypeError: Can't instantiate abstract class CorporateKnowledgeAgent with abstract method _process_message_impl\n\ntests/unit/test_corporate_knowledge_agent.py:18: TypeError\n____________________ ERROR at setup of test_knowledge_query ____________________\n\nknowledge_graph = <kg.models.graph_manager.KnowledgeGraphManager object at 0x303cd7ad0>\n\n    @pytest_asyncio.fixture\n    async def corporate_agent(knowledge_graph):\n        \"\"\"Fixture for corporate knowledge agent.\"\"\"\n>       agent = CorporateKnowledgeAgent()\nE       TypeError: Can't instantiate abstract class CorporateKnowledgeAgent with abstract method _process_message_impl\n\ntests/unit/test_corporate_knowledge_agent.py:18: TypeError\n____________________ ERROR at setup of test_document_update ____________________\n\nknowledge_graph = <kg.models.graph_manager.KnowledgeGraphManager object at 0x303cb12d0>\n\n    @pytest_asyncio.fixture\n    async def corporate_agent(knowledge_graph):\n        \"\"\"Fixture for corporate knowledge agent.\"\"\"\n>       agent = CorporateKnowledgeAgent()\nE       TypeError: Can't instantiate abstract class CorporateKnowledgeAgent with abstract method _process_message_impl\n\ntests/unit/test_corporate_knowledge_agent.py:18: TypeError\n_________________ ERROR at setup of test_unknown_message_type __________________\n\nknowledge_graph = <kg.models.graph_manager.KnowledgeGraphManager object at 0x3039628d0>\n\n    @pytest_asyncio.fixture\n    async def corporate_agent(knowledge_graph):\n        \"\"\"Fixture for corporate knowledge agent.\"\"\"\n>       agent = CorporateKnowledgeAgent()\nE       TypeError: Can't instantiate abstract class CorporateKnowledgeAgent with abstract method _process_message_impl\n\ntests/unit/test_corporate_knowledge_agent.py:18: TypeError\n_________________ ERROR at setup of test_judge_evaluates_email _________________\n\n    @pytest_asyncio.fixture\n    async def setup_agents():\n        kg = KnowledgeGraphManager()\n>       email_agent = VertexEmailAgent()\nE       TypeError: Can't instantiate abstract class VertexEmailAgent with abstract method _process_message_impl\n\ntests/unit/test_judge_agent.py:13: TypeError\n______________________ ERROR at setup of test_send_email _______________________\n\n    @pytest_asyncio.fixture\n    async def vertex_agent():\n        kg = KnowledgeGraphManager()\n>       agent = VertexEmailAgent()\nE       TypeError: Can't instantiate abstract class VertexEmailAgent with abstract method _process_message_impl\n\ntests/unit/test_vertex_email_agent.py:10: TypeError\n=================================== FAILURES ===================================\n______________________________ test_create_agent _______________________________\n\nagent_factory = <agents.core.agent_factory.AgentFactory object at 0x125a469d0>\n\n    @pytest.mark.asyncio\n    async def test_create_agent(agent_factory):\n        # Create test agent\n>       agent = await agent_factory.create_agent(\n            \"test_agent\",\n            \"test_1\",\n            {Capability(CapabilityType.KNOWLEDGE_GRAPH, \"1.0\")}\n        )\n\ntests/test_agent_factory.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.agent_factory.AgentFactory object at 0x125a469d0>\nagent_type = 'test_agent', agent_id = 'test_1'\ncapabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\nkwargs = {}\n\n    async def create_agent(\n        self,\n        agent_type: str,\n        agent_id: Optional[str] = None,\n        capabilities: Optional[Set[Capability]] = None,\n        **kwargs\n    ) -> BaseAgent:\n        \"\"\"Create a new agent instance.\n    \n        Args:\n            agent_type: The type of agent to create.\n            agent_id: Optional ID for the agent. If not provided, one will be generated.\n            capabilities: Optional initial capabilities. If not provided, will use defaults.\n            **kwargs: Additional arguments to pass to the agent constructor.\n    \n        Returns:\n            BaseAgent: The created agent instance.\n    \n        Raises:\n            ValueError: If the agent type is not registered.\n            RuntimeError: If agent creation fails.\n        \"\"\"\n        if agent_type not in self._agent_classes:\n>           raise ValueError(f\"Unknown agent type: {agent_type}\")\nE           ValueError: Unknown agent type: test_agent\n\nagents/core/agent_factory.py:112: ValueError\n---------------------------- Captured stderr setup -----------------------------\n2025-06-04 22:05:20.987 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_health.py: attempted relative import with no known parent package\n2025-06-04 22:05:20.987 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_registry.py: attempted relative import with no known parent package\n2025-06-04 22:05:20.987 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/scientific_swarm_agent.py: Can't instantiate abstract class ScientificSwarmAgent with abstract method _process_message_impl\n2025-06-04 22:05:20.987 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_transaction.py: attempted relative import with no known parent package\n2025-06-04 22:05:20.989 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/remote_kg_agent.py: Can't instantiate abstract class RemoteKGAgent with abstract method _process_message_impl\n2025-06-04 22:05:20.990 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_integrator.py: attempted relative import with no known parent package\n2025-06-04 22:05:20.990 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_persistence.py: attempted relative import with no known parent package\n2025-06-04 22:05:20.991 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/multi_agent.py: Can't instantiate abstract class MultiAgent with abstract method _process_message_impl\n2025-06-04 22:05:20.991 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/feature_z_agent.py: Can't instantiate abstract class FeatureZAgent with abstract method _process_message_impl\n2025-06-04 22:05:20.992 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_manager.py: attempted relative import with no known parent package\n2025-06-04 22:05:20.992 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/recovery_strategies.py: attempted relative import with no known parent package\n2025-06-04 22:05:20.992 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/sensor_agent.py: Can't instantiate abstract class SensorAgent with abstract method _process_message_impl\n2025-06-04 22:05:20.992 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agentic_prompt_agent.py: Can't instantiate abstract class AgenticPromptAgent with abstract method _process_message_impl\n2025-06-04 22:05:20.993 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/ttl_validation_agent.py: Can't instantiate abstract class TTLValidationAgent with abstract method _process_message_impl\n2025-06-04 22:05:20.993 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/research_agent.py: Can't instantiate abstract class ResearchAgent with abstract method _process_message_impl\n2025-06-04 22:05:20.993 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_monitor.py: attempted relative import with no known parent package\n2025-06-04 22:05:20.993 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/supervisor_agent.py: Can't instantiate abstract class SupervisorAgent with abstract method _process_message_impl\n2025-06-04 22:05:20.994 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/data_processor_agent.py: Can't instantiate abstract class DataProcessorAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.388 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../diary/diary_agent.py: OPENAI_API_KEY not found in environment variables.\n2025-06-04 22:05:22.389 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../diary/example.py: No module named 'diary_agent'\n2025-06-04 22:05:22.389 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/judge_agent.py: Can't instantiate abstract class JudgeAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.389 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/diary_agent.py: Can't instantiate abstract class DiaryAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.390 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/test_swarm_coordinator.py: Can't instantiate abstract class CodeReviewAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.390 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/corporate_knowledge_agent.py: Can't instantiate abstract class CorporateKnowledgeAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.390 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/vertex_email_agent.py: Can't instantiate abstract class VertexEmailAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.390 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/code_review_agent.py: Can't instantiate abstract class CodeReviewAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.390 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/simple_agents.py: Can't instantiate abstract class CoachingAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.390 | DEBUG    | agents.core.agent_registry:initialize:386 - AgentRegistry initialized\n2025-06-04 22:05:22.390 | DEBUG    | agents.core.agent_factory:initialize:52 - AgentFactory initialized\n_________________________ test_create_capability_agent _________________________\n\nagent_factory = <agents.core.agent_factory.AgentFactory object at 0x160579590>\n\n    @pytest.mark.asyncio\n    async def test_create_capability_agent(agent_factory):\n        # Create capability agent\n>       agent = await agent_factory.create_agent(\n            \"capability_agent\",\n            \"cap_1\",\n            {Capability(CapabilityType.CAPABILITY_MANAGEMENT, \"1.0\")}\n        )\n\ntests/test_agent_factory.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.agent_factory.AgentFactory object at 0x160579590>\nagent_type = 'capability_agent', agent_id = 'cap_1'\ncapabilities = {Capability(type=capability_management, version=1.0, parameters={}, metadata={})}\nkwargs = {}\n\n    async def create_agent(\n        self,\n        agent_type: str,\n        agent_id: Optional[str] = None,\n        capabilities: Optional[Set[Capability]] = None,\n        **kwargs\n    ) -> BaseAgent:\n        \"\"\"Create a new agent instance.\n    \n        Args:\n            agent_type: The type of agent to create.\n            agent_id: Optional ID for the agent. If not provided, one will be generated.\n            capabilities: Optional initial capabilities. If not provided, will use defaults.\n            **kwargs: Additional arguments to pass to the agent constructor.\n    \n        Returns:\n            BaseAgent: The created agent instance.\n    \n        Raises:\n            ValueError: If the agent type is not registered.\n            RuntimeError: If agent creation fails.\n        \"\"\"\n        if agent_type not in self._agent_classes:\n>           raise ValueError(f\"Unknown agent type: {agent_type}\")\nE           ValueError: Unknown agent type: capability_agent\n\nagents/core/agent_factory.py:112: ValueError\n---------------------------- Captured stderr setup -----------------------------\n2025-06-04 22:05:22.396 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_health.py: attempted relative import with no known parent package\n2025-06-04 22:05:22.396 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_registry.py: attempted relative import with no known parent package\n2025-06-04 22:05:22.396 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/scientific_swarm_agent.py: Can't instantiate abstract class ScientificSwarmAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.396 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_transaction.py: attempted relative import with no known parent package\n2025-06-04 22:05:22.398 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/remote_kg_agent.py: Can't instantiate abstract class RemoteKGAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.398 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_integrator.py: attempted relative import with no known parent package\n2025-06-04 22:05:22.399 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_persistence.py: attempted relative import with no known parent package\n2025-06-04 22:05:22.399 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/multi_agent.py: Can't instantiate abstract class MultiAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.399 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/feature_z_agent.py: Can't instantiate abstract class FeatureZAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.400 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_manager.py: attempted relative import with no known parent package\n2025-06-04 22:05:22.400 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/recovery_strategies.py: attempted relative import with no known parent package\n2025-06-04 22:05:22.400 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/sensor_agent.py: Can't instantiate abstract class SensorAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.400 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agentic_prompt_agent.py: Can't instantiate abstract class AgenticPromptAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.400 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/ttl_validation_agent.py: Can't instantiate abstract class TTLValidationAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.401 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/research_agent.py: Can't instantiate abstract class ResearchAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.401 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_monitor.py: attempted relative import with no known parent package\n2025-06-04 22:05:22.401 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/supervisor_agent.py: Can't instantiate abstract class SupervisorAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.401 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/data_processor_agent.py: Can't instantiate abstract class DataProcessorAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.402 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../diary/diary_agent.py: OPENAI_API_KEY not found in environment variables.\n2025-06-04 22:05:22.402 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../diary/example.py: No module named 'diary_agent'\n2025-06-04 22:05:22.402 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/judge_agent.py: Can't instantiate abstract class JudgeAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.403 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/diary_agent.py: Can't instantiate abstract class DiaryAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.403 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/test_swarm_coordinator.py: Can't instantiate abstract class CodeReviewAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.403 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/corporate_knowledge_agent.py: Can't instantiate abstract class CorporateKnowledgeAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.403 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/vertex_email_agent.py: Can't instantiate abstract class VertexEmailAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.404 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/code_review_agent.py: Can't instantiate abstract class CodeReviewAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.404 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/simple_agents.py: Can't instantiate abstract class CoachingAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.404 | DEBUG    | agents.core.agent_registry:initialize:386 - AgentRegistry initialized\n2025-06-04 22:05:22.404 | DEBUG    | agents.core.agent_factory:initialize:52 - AgentFactory initialized\n__________________________ test_agent_initialization ___________________________\n\nagent_factory = <agents.core.agent_factory.AgentFactory object at 0x302350c90>\n\n    @pytest.mark.asyncio\n    async def test_agent_initialization(agent_factory):\n        # Create and initialize agent\n>       agent = await agent_factory.create_agent(\n            \"test_agent\",\n            \"test_2\",\n            {Capability(CapabilityType.KNOWLEDGE_GRAPH, \"1.0\")}\n        )\n\ntests/test_agent_factory.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.agent_factory.AgentFactory object at 0x302350c90>\nagent_type = 'test_agent', agent_id = 'test_2'\ncapabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={})}\nkwargs = {}\n\n    async def create_agent(\n        self,\n        agent_type: str,\n        agent_id: Optional[str] = None,\n        capabilities: Optional[Set[Capability]] = None,\n        **kwargs\n    ) -> BaseAgent:\n        \"\"\"Create a new agent instance.\n    \n        Args:\n            agent_type: The type of agent to create.\n            agent_id: Optional ID for the agent. If not provided, one will be generated.\n            capabilities: Optional initial capabilities. If not provided, will use defaults.\n            **kwargs: Additional arguments to pass to the agent constructor.\n    \n        Returns:\n            BaseAgent: The created agent instance.\n    \n        Raises:\n            ValueError: If the agent type is not registered.\n            RuntimeError: If agent creation fails.\n        \"\"\"\n        if agent_type not in self._agent_classes:\n>           raise ValueError(f\"Unknown agent type: {agent_type}\")\nE           ValueError: Unknown agent type: test_agent\n\nagents/core/agent_factory.py:112: ValueError\n---------------------------- Captured stderr setup -----------------------------\n2025-06-04 22:05:22.408 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_health.py: attempted relative import with no known parent package\n2025-06-04 22:05:22.408 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_registry.py: attempted relative import with no known parent package\n2025-06-04 22:05:22.408 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/scientific_swarm_agent.py: Can't instantiate abstract class ScientificSwarmAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.408 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_transaction.py: attempted relative import with no known parent package\n2025-06-04 22:05:22.410 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/remote_kg_agent.py: Can't instantiate abstract class RemoteKGAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.410 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_integrator.py: attempted relative import with no known parent package\n2025-06-04 22:05:22.410 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_persistence.py: attempted relative import with no known parent package\n2025-06-04 22:05:22.411 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/multi_agent.py: Can't instantiate abstract class MultiAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.411 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/feature_z_agent.py: Can't instantiate abstract class FeatureZAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.412 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_manager.py: attempted relative import with no known parent package\n2025-06-04 22:05:22.412 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/recovery_strategies.py: attempted relative import with no known parent package\n2025-06-04 22:05:22.412 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/sensor_agent.py: Can't instantiate abstract class SensorAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.412 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agentic_prompt_agent.py: Can't instantiate abstract class AgenticPromptAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.412 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/ttl_validation_agent.py: Can't instantiate abstract class TTLValidationAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.412 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/research_agent.py: Can't instantiate abstract class ResearchAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.412 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_monitor.py: attempted relative import with no known parent package\n2025-06-04 22:05:22.412 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/supervisor_agent.py: Can't instantiate abstract class SupervisorAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.412 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/data_processor_agent.py: Can't instantiate abstract class DataProcessorAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.413 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../diary/diary_agent.py: OPENAI_API_KEY not found in environment variables.\n2025-06-04 22:05:22.413 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../diary/example.py: No module named 'diary_agent'\n2025-06-04 22:05:22.413 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/judge_agent.py: Can't instantiate abstract class JudgeAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.413 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/diary_agent.py: Can't instantiate abstract class DiaryAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.413 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/test_swarm_coordinator.py: Can't instantiate abstract class CodeReviewAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.414 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/corporate_knowledge_agent.py: Can't instantiate abstract class CorporateKnowledgeAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.414 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/vertex_email_agent.py: Can't instantiate abstract class VertexEmailAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.414 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/code_review_agent.py: Can't instantiate abstract class CodeReviewAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.414 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/simple_agents.py: Can't instantiate abstract class CoachingAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.414 | DEBUG    | agents.core.agent_registry:initialize:386 - AgentRegistry initialized\n2025-06-04 22:05:22.414 | DEBUG    | agents.core.agent_factory:initialize:52 - AgentFactory initialized\n_______________________ test_agent_capability_management _______________________\n\nagent_factory = <agents.core.agent_factory.AgentFactory object at 0x177b87e50>\n\n    @pytest.mark.asyncio\n    async def test_agent_capability_management(agent_factory):\n        # Create capability agent and test capability requests\n>       agent = await agent_factory.create_agent(\n            \"capability_agent\",\n            \"cap_2\",\n            {Capability(CapabilityType.CAPABILITY_MANAGEMENT, \"1.0\")}\n        )\n\ntests/test_agent_factory.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.agent_factory.AgentFactory object at 0x177b87e50>\nagent_type = 'capability_agent', agent_id = 'cap_2'\ncapabilities = {Capability(type=capability_management, version=1.0, parameters={}, metadata={})}\nkwargs = {}\n\n    async def create_agent(\n        self,\n        agent_type: str,\n        agent_id: Optional[str] = None,\n        capabilities: Optional[Set[Capability]] = None,\n        **kwargs\n    ) -> BaseAgent:\n        \"\"\"Create a new agent instance.\n    \n        Args:\n            agent_type: The type of agent to create.\n            agent_id: Optional ID for the agent. If not provided, one will be generated.\n            capabilities: Optional initial capabilities. If not provided, will use defaults.\n            **kwargs: Additional arguments to pass to the agent constructor.\n    \n        Returns:\n            BaseAgent: The created agent instance.\n    \n        Raises:\n            ValueError: If the agent type is not registered.\n            RuntimeError: If agent creation fails.\n        \"\"\"\n        if agent_type not in self._agent_classes:\n>           raise ValueError(f\"Unknown agent type: {agent_type}\")\nE           ValueError: Unknown agent type: capability_agent\n\nagents/core/agent_factory.py:112: ValueError\n---------------------------- Captured stderr setup -----------------------------\n2025-06-04 22:05:22.419 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_health.py: attempted relative import with no known parent package\n2025-06-04 22:05:22.419 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_registry.py: attempted relative import with no known parent package\n2025-06-04 22:05:22.419 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/scientific_swarm_agent.py: Can't instantiate abstract class ScientificSwarmAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.419 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_transaction.py: attempted relative import with no known parent package\n2025-06-04 22:05:22.420 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/remote_kg_agent.py: Can't instantiate abstract class RemoteKGAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.420 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_integrator.py: attempted relative import with no known parent package\n2025-06-04 22:05:22.421 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_persistence.py: attempted relative import with no known parent package\n2025-06-04 22:05:22.421 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/multi_agent.py: Can't instantiate abstract class MultiAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.421 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/feature_z_agent.py: Can't instantiate abstract class FeatureZAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.422 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_manager.py: attempted relative import with no known parent package\n2025-06-04 22:05:22.422 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/recovery_strategies.py: attempted relative import with no known parent package\n2025-06-04 22:05:22.422 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/sensor_agent.py: Can't instantiate abstract class SensorAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.422 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agentic_prompt_agent.py: Can't instantiate abstract class AgenticPromptAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.422 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/ttl_validation_agent.py: Can't instantiate abstract class TTLValidationAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.423 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/research_agent.py: Can't instantiate abstract class ResearchAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.423 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_monitor.py: attempted relative import with no known parent package\n2025-06-04 22:05:22.423 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/supervisor_agent.py: Can't instantiate abstract class SupervisorAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.423 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/data_processor_agent.py: Can't instantiate abstract class DataProcessorAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.423 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../diary/diary_agent.py: OPENAI_API_KEY not found in environment variables.\n2025-06-04 22:05:22.424 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../diary/example.py: No module named 'diary_agent'\n2025-06-04 22:05:22.424 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/judge_agent.py: Can't instantiate abstract class JudgeAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.424 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/diary_agent.py: Can't instantiate abstract class DiaryAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.424 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/test_swarm_coordinator.py: Can't instantiate abstract class CodeReviewAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.424 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/corporate_knowledge_agent.py: Can't instantiate abstract class CorporateKnowledgeAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.424 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/vertex_email_agent.py: Can't instantiate abstract class VertexEmailAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.424 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/code_review_agent.py: Can't instantiate abstract class CodeReviewAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.424 | ERROR    | agents.core.agent_registry:_auto_discover_agents:360 - Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/simple_agents.py: Can't instantiate abstract class CoachingAgent with abstract method _process_message_impl\n2025-06-04 22:05:22.424 | DEBUG    | agents.core.agent_registry:initialize:386 - AgentRegistry initialized\n2025-06-04 22:05:22.424 | DEBUG    | agents.core.agent_factory:initialize:52 - AgentFactory initialized\n_________________________ test_agent_recovery_timeout __________________________\n\nagent_registry = <agents.core.agent_registry.AgentRegistry object at 0x302386090>\n\n    @pytest.mark.asyncio\n    async def test_agent_recovery_timeout(agent_registry):\n        \"\"\"Test agent recovery timeout handling.\"\"\"\n        capabilities = {Capability(CapabilityType.TASK_EXECUTION, version=\"1.0\")}\n        agent = TestRecoveryAgent(\"test_agent\", \"recovery_test\", capabilities)\n        agent.recovery_timeout = 0.1  # Set short timeout\n        agent.set_recovery_success(True)  # Make recovery succeed but slow\n>       await agent_registry.register_agent(agent)\nE       TypeError: AgentRegistry.register_agent() missing 1 required positional argument: 'capabilities'\n\ntests/test_agent_recovery.py:614: TypeError\n---------------------------- Captured stderr setup -----------------------------\n2025-06-04T22:05:22.483748-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_health.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.483937-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_registry.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.484094-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/scientific_swarm_agent.py: Can't instantiate abstract class ScientificSwarmAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.484161-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_transaction.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.485234-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/remote_kg_agent.py: Can't instantiate abstract class RemoteKGAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.485553-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_integrator.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.485718-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_persistence.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.486094-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/multi_agent.py: Can't instantiate abstract class MultiAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.486176-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/feature_z_agent.py: Can't instantiate abstract class FeatureZAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.487046-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_manager.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.487131-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/recovery_strategies.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.487218-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/sensor_agent.py: Can't instantiate abstract class SensorAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.487325-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agentic_prompt_agent.py: Can't instantiate abstract class AgenticPromptAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.487400-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/ttl_validation_agent.py: Can't instantiate abstract class TTLValidationAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.487499-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/research_agent.py: Can't instantiate abstract class ResearchAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.487621-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_monitor.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.487736-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/supervisor_agent.py: Can't instantiate abstract class SupervisorAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.487808-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/data_processor_agent.py: Can't instantiate abstract class DataProcessorAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.488250-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../diary/diary_agent.py: OPENAI_API_KEY not found in environment variables.\n2025-06-04T22:05:22.488427-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../diary/example.py: No module named 'diary_agent'\n2025-06-04T22:05:22.488576-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/judge_agent.py: Can't instantiate abstract class JudgeAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.488660-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/diary_agent.py: Can't instantiate abstract class DiaryAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.488795-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/test_swarm_coordinator.py: Can't instantiate abstract class CodeReviewAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.488989-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/corporate_knowledge_agent.py: Can't instantiate abstract class CorporateKnowledgeAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.489143-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/vertex_email_agent.py: Can't instantiate abstract class VertexEmailAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.489290-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/code_review_agent.py: Can't instantiate abstract class CodeReviewAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.489410-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/simple_agents.py: Can't instantiate abstract class CoachingAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.489629-0400 | DEBUG | AgentRegistry initialized\n--------------------------- Captured stderr teardown ---------------------------\n2025-06-04T22:05:22.494541-0400 | INFO | Starting WorkflowNotifier cleanup\n2025-06-04T22:05:22.494598-0400 | INFO | Notification processor cancelled\n2025-06-04T22:05:22.494634-0400 | INFO | WorkflowNotifier cleanup completed\n2025-06-04T22:05:22.494650-0400 | INFO | AgentRegistry cleaned up\n2025-06-04T22:05:22.494663-0400 | INFO | Starting WorkflowNotifier cleanup\n2025-06-04T22:05:22.494676-0400 | INFO | WorkflowNotifier cleanup completed\n2025-06-04T22:05:22.494689-0400 | INFO | AgentRegistry cleaned up\n2025-06-04T22:05:22.494700-0400 | INFO | AgentRegistry shut down\n_____________________________ test_agent_recovery ______________________________\n\nagent_registry = <agents.core.agent_registry.AgentRegistry object at 0x302582a10>\n\n    @pytest.mark.asyncio\n    async def test_agent_recovery(agent_registry):\n        \"\"\"Test basic agent recovery functionality.\"\"\"\n        capabilities = {Capability(CapabilityType.TASK_EXECUTION, version=\"1.0\")}\n        agent = TestRecoveryAgent(\"test_agent\", \"recovery_test\", capabilities)\n        agent.set_recovery_success(True)  # Ensure recovery succeeds\n    \n        try:\n            async with asyncio.timeout(2.0):  # Add timeout\n>               await agent_registry.register_agent(agent)\nE               TypeError: AgentRegistry.register_agent() missing 1 required positional argument: 'capabilities'\n\ntests/test_agent_recovery.py:550: TypeError\n---------------------------- Captured stderr setup -----------------------------\n2025-06-04T22:05:22.548844-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_health.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.549103-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_registry.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.549294-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/scientific_swarm_agent.py: Can't instantiate abstract class ScientificSwarmAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.549384-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_transaction.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.550577-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/remote_kg_agent.py: Can't instantiate abstract class RemoteKGAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.550988-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_integrator.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.551183-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_persistence.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.551694-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/multi_agent.py: Can't instantiate abstract class MultiAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.551785-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/feature_z_agent.py: Can't instantiate abstract class FeatureZAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.552734-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_manager.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.552823-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/recovery_strategies.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.552914-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/sensor_agent.py: Can't instantiate abstract class SensorAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.553020-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agentic_prompt_agent.py: Can't instantiate abstract class AgenticPromptAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.553094-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/ttl_validation_agent.py: Can't instantiate abstract class TTLValidationAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.553195-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/research_agent.py: Can't instantiate abstract class ResearchAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.553323-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_monitor.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.553430-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/supervisor_agent.py: Can't instantiate abstract class SupervisorAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.553498-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/data_processor_agent.py: Can't instantiate abstract class DataProcessorAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.553957-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../diary/diary_agent.py: OPENAI_API_KEY not found in environment variables.\n2025-06-04T22:05:22.554124-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../diary/example.py: No module named 'diary_agent'\n2025-06-04T22:05:22.554262-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/judge_agent.py: Can't instantiate abstract class JudgeAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.554341-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/diary_agent.py: Can't instantiate abstract class DiaryAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.554452-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/test_swarm_coordinator.py: Can't instantiate abstract class CodeReviewAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.554550-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/corporate_knowledge_agent.py: Can't instantiate abstract class CorporateKnowledgeAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.554633-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/vertex_email_agent.py: Can't instantiate abstract class VertexEmailAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.554751-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/code_review_agent.py: Can't instantiate abstract class CodeReviewAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.554855-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/simple_agents.py: Can't instantiate abstract class CoachingAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.554894-0400 | DEBUG | AgentRegistry initialized\n----------------------------- Captured stderr call -----------------------------\n2025-06-04T22:05:22.555275-0400 | INFO | Cleaned up agent resources\n--------------------------- Captured stderr teardown ---------------------------\n2025-06-04T22:05:22.560157-0400 | INFO | Starting WorkflowNotifier cleanup\n2025-06-04T22:05:22.560233-0400 | INFO | Notification processor cancelled\n2025-06-04T22:05:22.560270-0400 | INFO | WorkflowNotifier cleanup completed\n2025-06-04T22:05:22.560286-0400 | INFO | AgentRegistry cleaned up\n2025-06-04T22:05:22.560303-0400 | INFO | Starting WorkflowNotifier cleanup\n2025-06-04T22:05:22.560318-0400 | INFO | WorkflowNotifier cleanup completed\n2025-06-04T22:05:22.560334-0400 | INFO | AgentRegistry cleaned up\n2025-06-04T22:05:22.560348-0400 | INFO | AgentRegistry shut down\n__________________________ test_max_recovery_attempts __________________________\n\nagent_registry = <agents.core.agent_registry.AgentRegistry object at 0x3025d6bd0>\n\n    @pytest.mark.asyncio\n    async def test_max_recovery_attempts(agent_registry):\n        \"\"\"Test that recovery stops after maximum attempts.\"\"\"\n        capabilities = {Capability(CapabilityType.TASK_EXECUTION, version=\"1.0\")}\n        agent = TestRecoveryAgent(\"test_agent\", \"recovery_test\", capabilities)\n        agent.recovery_attempts = 3  # Set to max attempts\n        agent.set_recovery_success(False)  # Make recovery fail\n>       await agent_registry.register_agent(agent)\nE       TypeError: AgentRegistry.register_agent() missing 1 required positional argument: 'capabilities'\n\ntests/test_agent_recovery.py:582: TypeError\n---------------------------- Captured stderr setup -----------------------------\n2025-06-04T22:05:22.563834-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_health.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.564028-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_registry.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.564206-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/scientific_swarm_agent.py: Can't instantiate abstract class ScientificSwarmAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.564283-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_transaction.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.565551-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/remote_kg_agent.py: Can't instantiate abstract class RemoteKGAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.565944-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_integrator.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.566154-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_persistence.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.566776-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/multi_agent.py: Can't instantiate abstract class MultiAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.566869-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/feature_z_agent.py: Can't instantiate abstract class FeatureZAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.567863-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_manager.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.567958-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/recovery_strategies.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.568050-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/sensor_agent.py: Can't instantiate abstract class SensorAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.568162-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agentic_prompt_agent.py: Can't instantiate abstract class AgenticPromptAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.568255-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/ttl_validation_agent.py: Can't instantiate abstract class TTLValidationAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.568373-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/research_agent.py: Can't instantiate abstract class ResearchAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.568522-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_monitor.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.568639-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/supervisor_agent.py: Can't instantiate abstract class SupervisorAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.568708-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/data_processor_agent.py: Can't instantiate abstract class DataProcessorAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.569135-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../diary/diary_agent.py: OPENAI_API_KEY not found in environment variables.\n2025-06-04T22:05:22.569288-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../diary/example.py: No module named 'diary_agent'\n2025-06-04T22:05:22.569409-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/judge_agent.py: Can't instantiate abstract class JudgeAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.569487-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/diary_agent.py: Can't instantiate abstract class DiaryAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.569592-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/test_swarm_coordinator.py: Can't instantiate abstract class CodeReviewAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.569687-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/corporate_knowledge_agent.py: Can't instantiate abstract class CorporateKnowledgeAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.569758-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/vertex_email_agent.py: Can't instantiate abstract class VertexEmailAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.569946-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/code_review_agent.py: Can't instantiate abstract class CodeReviewAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.570047-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/simple_agents.py: Can't instantiate abstract class CoachingAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.570086-0400 | DEBUG | AgentRegistry initialized\n--------------------------- Captured stderr teardown ---------------------------\n2025-06-04T22:05:22.575098-0400 | INFO | Starting WorkflowNotifier cleanup\n2025-06-04T22:05:22.575195-0400 | INFO | Notification processor cancelled\n2025-06-04T22:05:22.575235-0400 | INFO | WorkflowNotifier cleanup completed\n2025-06-04T22:05:22.575253-0400 | INFO | AgentRegistry cleaned up\n2025-06-04T22:05:22.575269-0400 | INFO | Starting WorkflowNotifier cleanup\n2025-06-04T22:05:22.575282-0400 | INFO | WorkflowNotifier cleanup completed\n2025-06-04T22:05:22.575294-0400 | INFO | AgentRegistry cleaned up\n2025-06-04T22:05:22.575307-0400 | INFO | AgentRegistry shut down\n______________________________ test_role_recovery ______________________________\n\nagent_registry = <agents.core.agent_registry.AgentRegistry object at 0x3024d7b50>\n\n    @pytest.mark.asyncio\n    async def test_role_recovery(agent_registry):\n        \"\"\"Test recovery of agents with specific roles.\"\"\"\n        capabilities = {Capability(CapabilityType.TASK_EXECUTION, version=\"1.0\")}\n        agent = TestRecoveryAgent(\"test_agent\", \"recovery_test\", capabilities)\n        agent.role = \"test_role\"\n        agent.set_recovery_success(True)  # Ensure recovery succeeds\n>       await agent_registry.register_agent(agent)\nE       TypeError: AgentRegistry.register_agent() missing 1 required positional argument: 'capabilities'\n\ntests/test_agent_recovery.py:657: TypeError\n---------------------------- Captured stderr setup -----------------------------\n2025-06-04T22:05:22.578920-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_health.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.579128-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_registry.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.579310-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/scientific_swarm_agent.py: Can't instantiate abstract class ScientificSwarmAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.579395-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_transaction.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.580819-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/remote_kg_agent.py: Can't instantiate abstract class RemoteKGAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.581206-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_integrator.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.581396-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_persistence.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.581826-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/multi_agent.py: Can't instantiate abstract class MultiAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.581916-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/feature_z_agent.py: Can't instantiate abstract class FeatureZAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.582886-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_manager.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.582979-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/recovery_strategies.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.583064-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/sensor_agent.py: Can't instantiate abstract class SensorAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.583170-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agentic_prompt_agent.py: Can't instantiate abstract class AgenticPromptAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.583244-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/ttl_validation_agent.py: Can't instantiate abstract class TTLValidationAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.583337-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/research_agent.py: Can't instantiate abstract class ResearchAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.583457-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_monitor.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.583565-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/supervisor_agent.py: Can't instantiate abstract class SupervisorAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.583636-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/data_processor_agent.py: Can't instantiate abstract class DataProcessorAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.584142-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../diary/diary_agent.py: OPENAI_API_KEY not found in environment variables.\n2025-06-04T22:05:22.584298-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../diary/example.py: No module named 'diary_agent'\n2025-06-04T22:05:22.584424-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/judge_agent.py: Can't instantiate abstract class JudgeAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.584494-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/diary_agent.py: Can't instantiate abstract class DiaryAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.584607-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/test_swarm_coordinator.py: Can't instantiate abstract class CodeReviewAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.584702-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/corporate_knowledge_agent.py: Can't instantiate abstract class CorporateKnowledgeAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.584772-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/vertex_email_agent.py: Can't instantiate abstract class VertexEmailAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.584880-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/code_review_agent.py: Can't instantiate abstract class CodeReviewAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.584979-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/simple_agents.py: Can't instantiate abstract class CoachingAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.585017-0400 | DEBUG | AgentRegistry initialized\n--------------------------- Captured stderr teardown ---------------------------\n2025-06-04T22:05:22.590721-0400 | INFO | Starting WorkflowNotifier cleanup\n2025-06-04T22:05:22.590802-0400 | INFO | Notification processor cancelled\n2025-06-04T22:05:22.590842-0400 | INFO | WorkflowNotifier cleanup completed\n2025-06-04T22:05:22.590860-0400 | INFO | AgentRegistry cleaned up\n2025-06-04T22:05:22.590876-0400 | INFO | Starting WorkflowNotifier cleanup\n2025-06-04T22:05:22.590890-0400 | INFO | WorkflowNotifier cleanup completed\n2025-06-04T22:05:22.590903-0400 | INFO | AgentRegistry cleaned up\n2025-06-04T22:05:22.590916-0400 | INFO | AgentRegistry shut down\n____________________________ test_recovery_metrics _____________________________\n\nagent_registry = <agents.core.agent_registry.AgentRegistry object at 0x302385590>\n\n    @pytest.mark.asyncio\n    async def test_recovery_metrics(agent_registry):\n        \"\"\"Test recovery metrics collection.\"\"\"\n        capabilities = {Capability(CapabilityType.TASK_EXECUTION, version=\"1.0\")}\n        agent = TestRecoveryAgent(\"test_agent\", \"recovery_test\", capabilities)\n        agent.set_recovery_success(True)  # Ensure recovery succeeds\n>       await agent_registry.register_agent(agent)\nE       TypeError: AgentRegistry.register_agent() missing 1 required positional argument: 'capabilities'\n\ntests/test_agent_recovery.py:681: TypeError\n---------------------------- Captured stderr setup -----------------------------\n2025-06-04T22:05:22.594224-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_health.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.594374-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_registry.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.594506-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/scientific_swarm_agent.py: Can't instantiate abstract class ScientificSwarmAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.594568-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_transaction.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.595630-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/remote_kg_agent.py: Can't instantiate abstract class RemoteKGAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.595964-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_integrator.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.596128-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_persistence.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.596526-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/multi_agent.py: Can't instantiate abstract class MultiAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.596608-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/feature_z_agent.py: Can't instantiate abstract class FeatureZAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.597648-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_manager.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.597737-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/recovery_strategies.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.597835-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/sensor_agent.py: Can't instantiate abstract class SensorAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.597951-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agentic_prompt_agent.py: Can't instantiate abstract class AgenticPromptAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.598027-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/ttl_validation_agent.py: Can't instantiate abstract class TTLValidationAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.598124-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/research_agent.py: Can't instantiate abstract class ResearchAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.598238-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_monitor.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.598355-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/supervisor_agent.py: Can't instantiate abstract class SupervisorAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.598423-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/data_processor_agent.py: Can't instantiate abstract class DataProcessorAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.598853-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../diary/diary_agent.py: OPENAI_API_KEY not found in environment variables.\n2025-06-04T22:05:22.599001-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../diary/example.py: No module named 'diary_agent'\n2025-06-04T22:05:22.599124-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/judge_agent.py: Can't instantiate abstract class JudgeAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.599199-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/diary_agent.py: Can't instantiate abstract class DiaryAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.599359-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/test_swarm_coordinator.py: Can't instantiate abstract class CodeReviewAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.599449-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/corporate_knowledge_agent.py: Can't instantiate abstract class CorporateKnowledgeAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.599519-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/vertex_email_agent.py: Can't instantiate abstract class VertexEmailAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.599621-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/code_review_agent.py: Can't instantiate abstract class CodeReviewAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.599731-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/simple_agents.py: Can't instantiate abstract class CoachingAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.599767-0400 | DEBUG | AgentRegistry initialized\n--------------------------- Captured stderr teardown ---------------------------\n2025-06-04T22:05:22.701864-0400 | ERROR | Error in notification processor: Event loop is closed\n2025-06-04T22:05:22.703039-0400 | ERROR | Error in notification processor: Event loop is closed\n2025-06-04T22:05:22.703494-0400 | ERROR | Error in notification processor: Event loop is closed\n2025-06-04T22:05:22.703926-0400 | ERROR | Error in notification processor: Event loop is closed\n2025-06-04T22:05:22.705669-0400 | INFO | Starting WorkflowNotifier cleanup\n2025-06-04T22:05:22.705737-0400 | INFO | Notification processor cancelled\n2025-06-04T22:05:22.705885-0400 | INFO | WorkflowNotifier cleanup completed\n2025-06-04T22:05:22.705918-0400 | INFO | AgentRegistry cleaned up\n2025-06-04T22:05:22.705942-0400 | INFO | Starting WorkflowNotifier cleanup\n2025-06-04T22:05:22.705984-0400 | INFO | WorkflowNotifier cleanup completed\n2025-06-04T22:05:22.706009-0400 | INFO | AgentRegistry cleaned up\n2025-06-04T22:05:22.706025-0400 | INFO | AgentRegistry shut down\n_______________________ test_knowledge_graph_integration _______________________\n\nagent_registry = <agents.core.agent_registry.AgentRegistry object at 0x302678dd0>\n\n    @pytest.mark.asyncio\n    async def test_knowledge_graph_integration(agent_registry):\n        \"\"\"Test knowledge graph integration and SPARQL query functionality.\"\"\"\n        capabilities = {Capability(CapabilityType.TASK_EXECUTION, version=\"1.0\")}\n        agent = TestRecoveryAgent(\"test_agent\", \"recovery_test\", capabilities)\n        agent.set_recovery_success(True)  # Ensure recovery succeeds\n>       await agent_registry.register_agent(agent)\nE       TypeError: AgentRegistry.register_agent() missing 1 required positional argument: 'capabilities'\n\ntests/test_agent_recovery.py:707: TypeError\n---------------------------- Captured stderr setup -----------------------------\n2025-06-04T22:05:22.709573-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_health.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.709807-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_registry.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.709992-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/scientific_swarm_agent.py: Can't instantiate abstract class ScientificSwarmAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.710062-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_transaction.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.711182-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/remote_kg_agent.py: Can't instantiate abstract class RemoteKGAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.711523-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agent_integrator.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.711739-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_persistence.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.712080-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/multi_agent.py: Can't instantiate abstract class MultiAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.712164-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/feature_z_agent.py: Can't instantiate abstract class FeatureZAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.713092-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_manager.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.713182-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/recovery_strategies.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.713275-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/sensor_agent.py: Can't instantiate abstract class SensorAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.713381-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/agentic_prompt_agent.py: Can't instantiate abstract class AgenticPromptAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.713458-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/ttl_validation_agent.py: Can't instantiate abstract class TTLValidationAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.713556-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/research_agent.py: Can't instantiate abstract class ResearchAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.713735-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/workflow_monitor.py: attempted relative import with no known parent package\n2025-06-04T22:05:22.713901-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/supervisor_agent.py: Can't instantiate abstract class SupervisorAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.714127-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../core/data_processor_agent.py: Can't instantiate abstract class DataProcessorAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.714772-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../diary/diary_agent.py: OPENAI_API_KEY not found in environment variables.\n2025-06-04T22:05:22.715014-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../diary/example.py: No module named 'diary_agent'\n2025-06-04T22:05:22.715195-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/judge_agent.py: Can't instantiate abstract class JudgeAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.715288-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/diary_agent.py: Can't instantiate abstract class DiaryAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.715448-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/test_swarm_coordinator.py: Can't instantiate abstract class CodeReviewAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.715574-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/corporate_knowledge_agent.py: Can't instantiate abstract class CorporateKnowledgeAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.715668-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/vertex_email_agent.py: Can't instantiate abstract class VertexEmailAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.715808-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/code_review_agent.py: Can't instantiate abstract class CodeReviewAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.715947-0400 | ERROR | Error discovering agents in /Users/nicholasbaro/Python/semant/agents/core/../domain/simple_agents.py: Can't instantiate abstract class CoachingAgent with abstract method _process_message_impl\n2025-06-04T22:05:22.715999-0400 | DEBUG | AgentRegistry initialized\n--------------------------- Captured stderr teardown ---------------------------\n2025-06-04T22:05:22.721297-0400 | INFO | Starting WorkflowNotifier cleanup\n2025-06-04T22:05:22.721377-0400 | INFO | Notification processor cancelled\n2025-06-04T22:05:22.721418-0400 | INFO | WorkflowNotifier cleanup completed\n2025-06-04T22:05:22.721439-0400 | INFO | AgentRegistry cleaned up\n2025-06-04T22:05:22.721456-0400 | INFO | Starting WorkflowNotifier cleanup\n2025-06-04T22:05:22.721470-0400 | INFO | WorkflowNotifier cleanup completed\n2025-06-04T22:05:22.721483-0400 | INFO | AgentRegistry cleaned up\n2025-06-04T22:05:22.721500-0400 | INFO | AgentRegistry shut down\n_______________________ test_capability_type_conversion ________________________\n\n    @pytest.mark.asyncio\n    async def test_capability_type_conversion():\n        \"\"\"Test that capabilities are properly handled.\"\"\"\n        # Test with multiple capabilities\n        capabilities = {\n            Capability(CapabilityType.CODE_REVIEW, \"1.0\"),\n            Capability(CapabilityType.DATA_PROCESSING, \"1.0\"),\n            Capability(CapabilityType.SENSOR_READING, \"1.0\")\n        }\n        agent1 = BaseTestAgent(\n            agent_id=\"agent1\",\n            capabilities=capabilities\n        )\n        await agent1.initialize()\n        agent_capabilities = await agent1.get_capabilities()\n>       assert isinstance(agent_capabilities, set)\nE       assert False\nE        +  where False = isinstance(CapabilitySet(capabilities={Capability(type=code_review, version=1.0, parameters={}, metadata={}), Capability(type=sensor_reading, version=1.0, parameters={}, metadata={}), Capability(type=data_processing, version=1.0, parameters={}, metadata={})}), set)\n\ntests/test_capability_handling.py:46: AssertionError\n______________________ test_registry_capability_handling _______________________\n\nself = <agents.core.agent_registry.AgentRegistry object at 0x3024f2050>\nagent = <tests.utils.test_agents.BaseTestAgent object at 0x3020ae850>\ncapabilities = CapabilitySet(capabilities={Capability(type=code_review, version=1.0, parameters={}, metadata={}), Capability(type=sen..., version=1.0, parameters={}, metadata={}), Capability(type=data_processing, version=1.0, parameters={}, metadata={})})\n\n    async def register_agent(self, agent: BaseAgent, capabilities: Set[Capability]) -> None:\n        \"\"\"Register an agent with its capabilities.\n    \n        Args:\n            agent: The agent to register.\n            capabilities: The set of capabilities the agent has.\n    \n        Raises:\n            ValueError: If the agent is already registered.\n        \"\"\"\n        if agent.agent_id in self._agents:\n            raise ValueError(f\"Agent {agent.agent_id} already registered\")\n    \n        # Initialize agent lock if not exists\n        if agent.agent_id not in self._agent_locks:\n            self._agent_locks[agent.agent_id] = asyncio.Lock()\n    \n        try:\n            async with self._agent_locks[agent.agent_id]:\n                # Store agent and its capabilities\n                self._agents[agent.agent_id] = agent\n>               self._capabilities[agent.agent_id] = capabilities\nE               AttributeError: 'AgentRegistry' object has no attribute '_capabilities'\n\nagents/core/agent_registry.py:438: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\nregistry = <agents.core.agent_registry.AgentRegistry object at 0x3024f2050>\ntest_agent = <tests.utils.test_agents.BaseTestAgent object at 0x3020ae850>\n\n    @pytest.mark.asyncio\n    async def test_registry_capability_handling(registry, test_agent):\n        \"\"\"Test capability handling in the registry.\"\"\"\n        # Register agent\n>       await registry.register_agent(test_agent, await test_agent.get_capabilities())\n\ntests/test_capability_handling.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.agent_registry.AgentRegistry object at 0x3024f2050>\nagent = <tests.utils.test_agents.BaseTestAgent object at 0x3020ae850>\ncapabilities = CapabilitySet(capabilities={Capability(type=code_review, version=1.0, parameters={}, metadata={}), Capability(type=sen..., version=1.0, parameters={}, metadata={}), Capability(type=data_processing, version=1.0, parameters={}, metadata={})})\n\n    async def register_agent(self, agent: BaseAgent, capabilities: Set[Capability]) -> None:\n        \"\"\"Register an agent with its capabilities.\n    \n        Args:\n            agent: The agent to register.\n            capabilities: The set of capabilities the agent has.\n    \n        Raises:\n            ValueError: If the agent is already registered.\n        \"\"\"\n        if agent.agent_id in self._agents:\n            raise ValueError(f\"Agent {agent.agent_id} already registered\")\n    \n        # Initialize agent lock if not exists\n        if agent.agent_id not in self._agent_locks:\n            self._agent_locks[agent.agent_id] = asyncio.Lock()\n    \n        try:\n            async with self._agent_locks[agent.agent_id]:\n                # Store agent and its capabilities\n                self._agents[agent.agent_id] = agent\n                self._capabilities[agent.agent_id] = capabilities\n    \n                # Update capability map\n                for capability in capabilities:\n                    self._capability_map[capability.type].add(agent.agent_id)\n    \n                # Initialize agent\n                await agent.initialize()\n    \n                # Notify workflow system\n                await self._workflow_notifier.notify_agent_registered(agent.agent_id, capabilities)\n    \n        except Exception as e:\n            # Cleanup on failure\n            if agent.agent_id in self._agents:\n                del self._agents[agent.agent_id]\n>           if agent.agent_id in self._capabilities:\nE           AttributeError: 'AgentRegistry' object has no attribute '_capabilities'\n\nagents/core/agent_registry.py:454: AttributeError\n_________________________ test_capability_consistency __________________________\n\nself = <agents.core.agent_registry.AgentRegistry object at 0x302345050>\nagent = <tests.utils.test_agents.BaseTestAgent object at 0x302345e90>\ncapabilities = CapabilitySet(capabilities={Capability(type=code_review, version=1.0, parameters={}, metadata={}), Capability(type=data_processing, version=1.0, parameters={}, metadata={})})\n\n    async def register_agent(self, agent: BaseAgent, capabilities: Set[Capability]) -> None:\n        \"\"\"Register an agent with its capabilities.\n    \n        Args:\n            agent: The agent to register.\n            capabilities: The set of capabilities the agent has.\n    \n        Raises:\n            ValueError: If the agent is already registered.\n        \"\"\"\n        if agent.agent_id in self._agents:\n            raise ValueError(f\"Agent {agent.agent_id} already registered\")\n    \n        # Initialize agent lock if not exists\n        if agent.agent_id not in self._agent_locks:\n            self._agent_locks[agent.agent_id] = asyncio.Lock()\n    \n        try:\n            async with self._agent_locks[agent.agent_id]:\n                # Store agent and its capabilities\n                self._agents[agent.agent_id] = agent\n>               self._capabilities[agent.agent_id] = capabilities\nE               AttributeError: 'AgentRegistry' object has no attribute '_capabilities'\n\nagents/core/agent_registry.py:438: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\nregistry = <agents.core.agent_registry.AgentRegistry object at 0x302345050>\n\n    @pytest.mark.asyncio\n    async def test_capability_consistency(registry):\n        \"\"\"Test that capabilities remain consistent across operations.\"\"\"\n        # Create agents with overlapping capabilities\n        agent1 = BaseTestAgent(\n            agent_id=\"agent1\",\n            capabilities={\n                Capability(CapabilityType.CODE_REVIEW, \"1.0\"),\n                Capability(CapabilityType.DATA_PROCESSING, \"1.0\")\n            }\n        )\n        await agent1.initialize()\n    \n        agent2 = BaseTestAgent(\n            agent_id=\"agent2\",\n            capabilities={\n                Capability(CapabilityType.DATA_PROCESSING, \"1.0\"),\n                Capability(CapabilityType.SENSOR_READING, \"1.0\")\n            }\n        )\n        await agent2.initialize()\n    \n        # Register agents\n>       await registry.register_agent(agent1, await agent1.get_capabilities())\n\ntests/test_capability_handling.py:140: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.agent_registry.AgentRegistry object at 0x302345050>\nagent = <tests.utils.test_agents.BaseTestAgent object at 0x302345e90>\ncapabilities = CapabilitySet(capabilities={Capability(type=code_review, version=1.0, parameters={}, metadata={}), Capability(type=data_processing, version=1.0, parameters={}, metadata={})})\n\n    async def register_agent(self, agent: BaseAgent, capabilities: Set[Capability]) -> None:\n        \"\"\"Register an agent with its capabilities.\n    \n        Args:\n            agent: The agent to register.\n            capabilities: The set of capabilities the agent has.\n    \n        Raises:\n            ValueError: If the agent is already registered.\n        \"\"\"\n        if agent.agent_id in self._agents:\n            raise ValueError(f\"Agent {agent.agent_id} already registered\")\n    \n        # Initialize agent lock if not exists\n        if agent.agent_id not in self._agent_locks:\n            self._agent_locks[agent.agent_id] = asyncio.Lock()\n    \n        try:\n            async with self._agent_locks[agent.agent_id]:\n                # Store agent and its capabilities\n                self._agents[agent.agent_id] = agent\n                self._capabilities[agent.agent_id] = capabilities\n    \n                # Update capability map\n                for capability in capabilities:\n                    self._capability_map[capability.type].add(agent.agent_id)\n    \n                # Initialize agent\n                await agent.initialize()\n    \n                # Notify workflow system\n                await self._workflow_notifier.notify_agent_registered(agent.agent_id, capabilities)\n    \n        except Exception as e:\n            # Cleanup on failure\n            if agent.agent_id in self._agents:\n                del self._agents[agent.agent_id]\n>           if agent.agent_id in self._capabilities:\nE           AttributeError: 'AgentRegistry' object has no attribute '_capabilities'\n\nagents/core/agent_registry.py:454: AttributeError\n__________________________ test_capability_edge_cases __________________________\n\nself = <agents.core.agent_registry.AgentRegistry object at 0x302362290>\nagent = <tests.utils.test_agents.BaseTestAgent object at 0x3024d6950>\ncapabilities = CapabilitySet(capabilities={Capability(type=code_review, version=1.0, parameters={}, metadata={})})\n\n    async def register_agent(self, agent: BaseAgent, capabilities: Set[Capability]) -> None:\n        \"\"\"Register an agent with its capabilities.\n    \n        Args:\n            agent: The agent to register.\n            capabilities: The set of capabilities the agent has.\n    \n        Raises:\n            ValueError: If the agent is already registered.\n        \"\"\"\n        if agent.agent_id in self._agents:\n            raise ValueError(f\"Agent {agent.agent_id} already registered\")\n    \n        # Initialize agent lock if not exists\n        if agent.agent_id not in self._agent_locks:\n            self._agent_locks[agent.agent_id] = asyncio.Lock()\n    \n        try:\n            async with self._agent_locks[agent.agent_id]:\n                # Store agent and its capabilities\n                self._agents[agent.agent_id] = agent\n>               self._capabilities[agent.agent_id] = capabilities\nE               AttributeError: 'AgentRegistry' object has no attribute '_capabilities'\n\nagents/core/agent_registry.py:438: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\nregistry = <agents.core.agent_registry.AgentRegistry object at 0x302362290>\n\n    @pytest.mark.asyncio\n    async def test_capability_edge_cases(registry):\n        \"\"\"Test edge cases in capability handling.\"\"\"\n        agent = BaseTestAgent(\n            agent_id=\"test_agent\",\n            capabilities={\n                Capability(CapabilityType.CODE_REVIEW, \"1.0\"),\n                Capability(CapabilityType.CODE_REVIEW, \"1.0\"),  # Duplicate capability\n                Capability(CapabilityType.CODE_REVIEW, \"1.0\")   # Duplicate capability\n            }\n        )\n        await agent.initialize()\n    \n        # Register agent\n>       await registry.register_agent(agent, await agent.get_capabilities())\n\ntests/test_capability_handling.py:175: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.agent_registry.AgentRegistry object at 0x302362290>\nagent = <tests.utils.test_agents.BaseTestAgent object at 0x3024d6950>\ncapabilities = CapabilitySet(capabilities={Capability(type=code_review, version=1.0, parameters={}, metadata={})})\n\n    async def register_agent(self, agent: BaseAgent, capabilities: Set[Capability]) -> None:\n        \"\"\"Register an agent with its capabilities.\n    \n        Args:\n            agent: The agent to register.\n            capabilities: The set of capabilities the agent has.\n    \n        Raises:\n            ValueError: If the agent is already registered.\n        \"\"\"\n        if agent.agent_id in self._agents:\n            raise ValueError(f\"Agent {agent.agent_id} already registered\")\n    \n        # Initialize agent lock if not exists\n        if agent.agent_id not in self._agent_locks:\n            self._agent_locks[agent.agent_id] = asyncio.Lock()\n    \n        try:\n            async with self._agent_locks[agent.agent_id]:\n                # Store agent and its capabilities\n                self._agents[agent.agent_id] = agent\n                self._capabilities[agent.agent_id] = capabilities\n    \n                # Update capability map\n                for capability in capabilities:\n                    self._capability_map[capability.type].add(agent.agent_id)\n    \n                # Initialize agent\n                await agent.initialize()\n    \n                # Notify workflow system\n                await self._workflow_notifier.notify_agent_registered(agent.agent_id, capabilities)\n    \n        except Exception as e:\n            # Cleanup on failure\n            if agent.agent_id in self._agents:\n                del self._agents[agent.agent_id]\n>           if agent.agent_id in self._capabilities:\nE           AttributeError: 'AgentRegistry' object has no attribute '_capabilities'\n\nagents/core/agent_registry.py:454: AttributeError\n_____________________________ test_agent_creation ______________________________\n\nfactory = <agents.core.agent_factory.AgentFactory object at 0x304ee34d0>\n\n    @pytest.mark.asyncio\n    async def test_agent_creation(factory):\n        \"\"\"Test agent creation with different capability types.\"\"\"\n        # Create agent with single capability\n>       agent1 = await factory.create_agent(\"agent1\", \"test\", {CapabilityType.KNOWLEDGE_GRAPH})\n\ntests/test_dynamic_agents.py:127: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.agent_factory.AgentFactory object at 0x304ee34d0>\nagent_type = 'agent1', agent_id = 'test'\ncapabilities = {<CapabilityType.KNOWLEDGE_GRAPH: 'knowledge_graph'>}\nkwargs = {}\n\n    async def create_agent(\n        self,\n        agent_type: str,\n        agent_id: Optional[str] = None,\n        capabilities: Optional[Set[Capability]] = None,\n        **kwargs\n    ) -> BaseAgent:\n        \"\"\"Create a new agent instance.\n    \n        Args:\n            agent_type: The type of agent to create.\n            agent_id: Optional ID for the agent. If not provided, one will be generated.\n            capabilities: Optional initial capabilities. If not provided, will use defaults.\n            **kwargs: Additional arguments to pass to the agent constructor.\n    \n        Returns:\n            BaseAgent: The created agent instance.\n    \n        Raises:\n            ValueError: If the agent type is not registered.\n            RuntimeError: If agent creation fails.\n        \"\"\"\n        if agent_type not in self._agent_classes:\n>           raise ValueError(f\"Unknown agent type: {agent_type}\")\nE           ValueError: Unknown agent type: agent1\n\nagents/core/agent_factory.py:112: ValueError\n_____________________________ test_role_delegation _____________________________\n\nfactory = <agents.core.agent_factory.AgentFactory object at 0x304ee05d0>\n\n    @pytest.mark.asyncio\n    async def test_role_delegation(factory):\n        \"\"\"Test role delegation between agents.\"\"\"\n        # Create supervisor agent\n>       supervisor = await factory.create_agent(\n            \"supervisor\",\n            \"supervisor\",\n            {CapabilityType.MESSAGE_PROCESSING}\n        )\n\ntests/test_dynamic_agents.py:148: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.agent_factory.AgentFactory object at 0x304ee05d0>\nagent_type = 'supervisor', agent_id = 'supervisor'\ncapabilities = {<CapabilityType.MESSAGE_PROCESSING: 'message_processing'>}\nkwargs = {}\n\n    async def create_agent(\n        self,\n        agent_type: str,\n        agent_id: Optional[str] = None,\n        capabilities: Optional[Set[Capability]] = None,\n        **kwargs\n    ) -> BaseAgent:\n        \"\"\"Create a new agent instance.\n    \n        Args:\n            agent_type: The type of agent to create.\n            agent_id: Optional ID for the agent. If not provided, one will be generated.\n            capabilities: Optional initial capabilities. If not provided, will use defaults.\n            **kwargs: Additional arguments to pass to the agent constructor.\n    \n        Returns:\n            BaseAgent: The created agent instance.\n    \n        Raises:\n            ValueError: If the agent type is not registered.\n            RuntimeError: If agent creation fails.\n        \"\"\"\n        if agent_type not in self._agent_classes:\n>           raise ValueError(f\"Unknown agent type: {agent_type}\")\nE           ValueError: Unknown agent type: supervisor\n\nagents/core/agent_factory.py:112: ValueError\n______________________________ test_agent_scaling ______________________________\n\nfactory = <agents.core.agent_factory.AgentFactory object at 0x304df5510>\n\n    @pytest.mark.asyncio\n    async def test_agent_scaling(factory):\n        \"\"\"Test agent scaling and workload distribution.\"\"\"\n        # Create multiple worker agents\n        workers = []\n        for i in range(3):\n>           worker = await factory.create_agent(\n                f\"worker_{i}\",\n                \"worker\",\n                {CapabilityType.KNOWLEDGE_GRAPH}\n            )\n\ntests/test_dynamic_agents.py:181: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.agent_factory.AgentFactory object at 0x304df5510>\nagent_type = 'worker_0', agent_id = 'worker'\ncapabilities = {<CapabilityType.KNOWLEDGE_GRAPH: 'knowledge_graph'>}\nkwargs = {}\n\n    async def create_agent(\n        self,\n        agent_type: str,\n        agent_id: Optional[str] = None,\n        capabilities: Optional[Set[Capability]] = None,\n        **kwargs\n    ) -> BaseAgent:\n        \"\"\"Create a new agent instance.\n    \n        Args:\n            agent_type: The type of agent to create.\n            agent_id: Optional ID for the agent. If not provided, one will be generated.\n            capabilities: Optional initial capabilities. If not provided, will use defaults.\n            **kwargs: Additional arguments to pass to the agent constructor.\n    \n        Returns:\n            BaseAgent: The created agent instance.\n    \n        Raises:\n            ValueError: If the agent type is not registered.\n            RuntimeError: If agent creation fails.\n        \"\"\"\n        if agent_type not in self._agent_classes:\n>           raise ValueError(f\"Unknown agent type: {agent_type}\")\nE           ValueError: Unknown agent type: worker_0\n\nagents/core/agent_factory.py:112: ValueError\n____________________________ test_supervisor_agent _____________________________\n\nfactory = <agents.core.agent_factory.AgentFactory object at 0x302424d90>\n\n    @pytest.mark.asyncio\n    async def test_supervisor_agent(factory):\n        \"\"\"Test supervisor agent functionality.\"\"\"\n>       supervisor = await factory.create_agent(\n            \"supervisor\",\n            \"supervisor\",\n            {CapabilityType.MESSAGE_PROCESSING}\n        )\n\ntests/test_dynamic_agents.py:213: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.agent_factory.AgentFactory object at 0x302424d90>\nagent_type = 'supervisor', agent_id = 'supervisor'\ncapabilities = {<CapabilityType.MESSAGE_PROCESSING: 'message_processing'>}\nkwargs = {}\n\n    async def create_agent(\n        self,\n        agent_type: str,\n        agent_id: Optional[str] = None,\n        capabilities: Optional[Set[Capability]] = None,\n        **kwargs\n    ) -> BaseAgent:\n        \"\"\"Create a new agent instance.\n    \n        Args:\n            agent_type: The type of agent to create.\n            agent_id: Optional ID for the agent. If not provided, one will be generated.\n            capabilities: Optional initial capabilities. If not provided, will use defaults.\n            **kwargs: Additional arguments to pass to the agent constructor.\n    \n        Returns:\n            BaseAgent: The created agent instance.\n    \n        Raises:\n            ValueError: If the agent type is not registered.\n            RuntimeError: If agent creation fails.\n        \"\"\"\n        if agent_type not in self._agent_classes:\n>           raise ValueError(f\"Unknown agent type: {agent_type}\")\nE           ValueError: Unknown agent type: supervisor\n\nagents/core/agent_factory.py:112: ValueError\n___________________________ test_workload_monitoring ___________________________\n\nfactory = <agents.core.agent_factory.AgentFactory object at 0x3026a4250>\n\n    @pytest.mark.asyncio\n    async def test_workload_monitoring(factory):\n        \"\"\"Test workload monitoring and balancing.\"\"\"\n        # Create monitoring agent\n>       monitor = await factory.create_agent(\n            \"monitor\",\n            \"monitor\",\n            {CapabilityType.MESSAGE_PROCESSING}\n        )\n\ntests/test_dynamic_agents.py:236: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.agent_factory.AgentFactory object at 0x3026a4250>\nagent_type = 'monitor', agent_id = 'monitor'\ncapabilities = {<CapabilityType.MESSAGE_PROCESSING: 'message_processing'>}\nkwargs = {}\n\n    async def create_agent(\n        self,\n        agent_type: str,\n        agent_id: Optional[str] = None,\n        capabilities: Optional[Set[Capability]] = None,\n        **kwargs\n    ) -> BaseAgent:\n        \"\"\"Create a new agent instance.\n    \n        Args:\n            agent_type: The type of agent to create.\n            agent_id: Optional ID for the agent. If not provided, one will be generated.\n            capabilities: Optional initial capabilities. If not provided, will use defaults.\n            **kwargs: Additional arguments to pass to the agent constructor.\n    \n        Returns:\n            BaseAgent: The created agent instance.\n    \n        Raises:\n            ValueError: If the agent type is not registered.\n            RuntimeError: If agent creation fails.\n        \"\"\"\n        if agent_type not in self._agent_classes:\n>           raise ValueError(f\"Unknown agent type: {agent_type}\")\nE           ValueError: Unknown agent type: monitor\n\nagents/core/agent_factory.py:112: ValueError\n____________________________ test_stats_collection _____________________________\n\ngraph_manager = <kg.models.graph_manager.KnowledgeGraphManager object at 0x3024dff50>\n\n    @pytest.mark.asyncio\n    async def test_stats_collection(graph_manager):\n        \"\"\"Test collection of graph statistics.\"\"\"\n        # Add test data\n        for i in range(100):\n            subject = f\"http://example.org/core#Agent{i}\"\n            predicate = \"http://example.org/core#hasStatus\"\n            object = \"idle\"\n            await graph_manager.add_triple(subject, predicate, object)\n    \n        # Get stats\n        stats = graph_manager.get_stats()\n    \n        # Verify stats\n>       assert stats['triple_count'] == 100\nE       TypeError: 'coroutine' object is not subscriptable\n\ntests/test_graph_monitoring.py:31: TypeError\n------------------------------ Captured log call -------------------------------\nERROR    asyncio:base_events.py:1785 Task was destroyed but it is pending!\ntask: <Task pending name='Task-275' coro=<WorkflowNotifier._process_notifications() running at /Users/nicholasbaro/Python/semant/agents/core/agent_registry.py:65> wait_for=<Future pending cb=[Task.task_wakeup()]> cb=[set.discard()]>\n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1785 Task exception was never retrieved\nfuture: <Task finished name='Task-282' coro=<AgentRegistry.cleanup() done, defined at /Users/nicholasbaro/Python/semant/agents/core/agent_registry.py:392> exception=RuntimeError(\"Task <Task pending name='Task-282' coro=<AgentRegistry.cleanup() running at /Users/nicholasbaro/Python/semant/agents/core/agent_registry.py:395>> got Future <Task cancelling name='Task-275' coro=<WorkflowNotifier._process_notifications() done, defined at /Users/nicholasbaro/Python/semant/agents/core/agent_registry.py:61> wait_for=<Future cancelled> cb=[set.discard()]> attached to a different loop\")>\nTraceback (most recent call last):\n  File \"/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py\", line 395, in cleanup\n    await self._workflow_notifier.cleanup()\n  File \"/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py\", line 114, in cleanup\n    await self._processor_task\nRuntimeError: Task <Task pending name='Task-282' coro=<AgentRegistry.cleanup() running at /Users/nicholasbaro/Python/semant/agents/core/agent_registry.py:395>> got Future <Task cancelling name='Task-275' coro=<WorkflowNotifier._process_notifications() done, defined at /Users/nicholasbaro/Python/semant/agents/core/agent_registry.py:61> wait_for=<Future cancelled> cb=[set.discard()]> attached to a different loop\n_________________________ test_performance_monitoring __________________________\n\ngraph_manager = <kg.models.graph_manager.KnowledgeGraphManager object at 0x3026d43d0>\n\n    @pytest.mark.asyncio\n    async def test_performance_monitoring(graph_manager):\n        \"\"\"Test performance monitoring capabilities.\"\"\"\n        # Add test data\n        for i in range(100):\n            subject = f\"http://example.org/core#Agent{i}\"\n            predicate = \"http://example.org/core#hasStatus\"\n            object = \"idle\"\n            await graph_manager.add_triple(subject, predicate, object)\n    \n        # Test query performance\n        start_time = time.time()\n        results = await graph_manager.query_graph(\"\"\"\n            SELECT ?agent ?status WHERE {\n                ?agent <http://example.org/core#hasStatus> ?status .\n            }\n        \"\"\")\n        query_time = time.time() - start_time\n    \n        # Verify performance\n        assert len(results) == 100\n        assert query_time < 1.0  # Should complete within 1 second\n    \n        # Get stats after query\n        stats = graph_manager.get_stats()\n>       cache_stats = stats['cache_stats']\nE       TypeError: 'coroutine' object is not subscriptable\n\ntests/test_graph_monitoring.py:145: TypeError\n______________________________ test_cache_metrics ______________________________\n\ngraph_manager = <kg.models.graph_manager.KnowledgeGraphManager object at 0x3039738d0>\n\n    @pytest.mark.asyncio\n    async def test_cache_metrics(graph_manager):\n        \"\"\"Test cache hit/miss metrics.\"\"\"\n        # First query (cache miss)\n        await graph_manager.query_graph(\"\"\"\n            SELECT ?s ?p ?o WHERE {\n                ?s ?p ?o .\n            } LIMIT 1\n        \"\"\")\n    \n        # Same query again (cache hit)\n        await graph_manager.query_graph(\"\"\"\n            SELECT ?s ?p ?o WHERE {\n                ?s ?p ?o .\n            } LIMIT 1\n        \"\"\")\n    \n        # Get stats\n        stats = await graph_manager.get_stats()\n        metrics = stats['metrics']\n    \n        # Verify cache metrics\n>       assert metrics['cache_hits'] == 1\nE       assert 0 == 1\n\ntests/test_knowledge_graph.py:549: AssertionError\n____________________________ test_graph_validation _____________________________\n\ngraph_manager = <kg.models.graph_manager.KnowledgeGraphManager object at 0x30b65fb50>\n\n    @pytest.mark.asyncio\n    async def test_graph_validation(graph_manager):\n        \"\"\"Test graph validation functionality.\"\"\"\n        # Initialize test namespace\n        test_ns = Namespace('http://example.org/test/')\n        graph_manager.namespaces['test'] = test_ns\n        graph_manager.graph.bind('test', test_ns)\n    \n        # Add validation rule\n        graph_manager.add_validation_rule({\n            'type': 'sparql',\n            'query': \"\"\"\n                PREFIX test: <http://example.org/test/>\n                SELECT ?machine WHERE {\n                    ?machine rdf:type test:Machine .\n                    ?machine test:hasStatus ?status .\n                    FILTER(?status = \"Nominal\")\n                }\n            \"\"\"\n        })\n    \n        # Add data that should pass validation\n        await graph_manager.add_triple(\n            str(test_ns['machine1']),\n            str(RDF.type),\n            str(test_ns['Machine'])\n        )\n        await graph_manager.add_triple(\n            str(test_ns['machine1']),\n            str(test_ns['hasStatus']),\n            \"Nominal\"\n        )\n    \n        # Validate graph\n        validation_results = await graph_manager.validate_graph()\n        assert len(validation_results['validation_errors']) == 0\n    \n        # Add data that should fail validation\n        await graph_manager.add_triple(\n            str(test_ns['machine2']),\n            str(RDF.type),\n            str(test_ns['Machine'])\n        )\n        await graph_manager.add_triple(\n            str(test_ns['machine2']),\n            str(test_ns['hasStatus']),\n            \"Warning\"\n        )\n    \n        # Validate graph again\n        validation_results = await graph_manager.validate_graph()\n>       assert len(validation_results['validation_errors']) > 0\nE       assert 0 > 0\nE        +  where 0 = len([])\n\ntests/test_knowledge_graph.py:857: AssertionError\n______________________ test_selective_cache_invalidation _______________________\n\ngraph_manager = <kg.models.graph_manager.KnowledgeGraphManager object at 0x30b606350>\n\n    @pytest.mark.asyncio\n    async def test_selective_cache_invalidation(graph_manager):\n        \"\"\"Test selective cache invalidation.\"\"\"\n        # Initialize test namespace\n        test_ns = Namespace('http://example.org/test/')\n        graph_manager.namespaces['test'] = test_ns\n        graph_manager.graph.bind('test', test_ns)\n    \n        # Add initial data\n        await graph_manager.add_triple(\n            str(test_ns['subject1']),\n            str(test_ns['predicate1']),\n            str(test_ns['object1'])\n        )\n    \n        # Query and cache result\n        query1 = \"\"\"\n            PREFIX test: <http://example.org/test/>\n            SELECT ?object WHERE {\n                test:subject1 test:predicate1 ?object .\n            }\n        \"\"\"\n        results1 = await graph_manager.query_graph(query1)\n        assert len(results1) == 1\n    \n        # Add unrelated data\n        await graph_manager.add_triple(\n            str(test_ns['subject2']),\n            str(test_ns['predicate2']),\n            str(test_ns['object2'])\n        )\n    \n        # Query again - should use cache\n        results2 = await graph_manager.query_graph(query1)\n        assert len(results2) == 1\n        assert graph_manager.metrics['cache_hits'] > 0\n    \n        # Add related data\n        await graph_manager.add_triple(\n            str(test_ns['subject1']),\n            str(test_ns['predicate1']),\n            str(test_ns['object3'])\n        )\n    \n        # Query again - should not use cache\n        results3 = await graph_manager.query_graph(query1)\n        assert len(results3) == 1\n>       assert results3[0]['object'] == str(test_ns['object3'])\nE       AssertionError: assert 'http://examp.../test/object1' == 'http://examp.../test/object3'\nE         \nE         - http://example.org/test/object3\nE         ?                               ^\nE         + http://example.org/test/object1\nE         ?                               ^\n\ntests/test_knowledge_graph.py:906: AssertionError\n______________________ test_kg_manager_cache_invalidation ______________________\n\nkg_manager = <kg.models.graph_manager.KnowledgeGraphManager object at 0x30b488050>\n\n    @pytest.mark.asyncio\n    async def test_kg_manager_cache_invalidation(kg_manager):\n        \"\"\"Test knowledge graph manager cache invalidation.\"\"\"\n        # Add test data\n        await kg_manager.add_triple(\n            \"http://example.org/test/subject\",\n            \"http://example.org/test/predicate\",\n            \"http://example.org/test/object\"\n        )\n    \n        # Query to populate cache\n        query = \"\"\"\n            SELECT ?s ?p ?o WHERE {\n                ?s ?p ?o .\n            }\n        \"\"\"\n        await kg_manager.query_graph(query)\n        cache_hits_before = kg_manager.metrics.get('cache_hits', 0)\n    \n        # Update data\n        await kg_manager.add_triple(\n            \"http://example.org/test/subject\",\n            \"http://example.org/test/predicate\",\n            \"http://example.org/test/object2\"\n        )\n    \n        # Query again - should not hit cache due to update\n        await kg_manager.query_graph(query)\n        cache_hits_after = kg_manager.metrics.get('cache_hits', 0)\n    \n>       assert cache_hits_after == cache_hits_before\nE       assert 1 == 0\n\ntests/test_knowledge_graph.py:1143: AssertionError\n__________________________ test_kg_manager_cache_ttl ___________________________\n\nkg_manager = <kg.models.graph_manager.KnowledgeGraphManager object at 0x30b1baa90>\n\n    @pytest.mark.asyncio\n    async def test_kg_manager_cache_ttl(kg_manager):\n        \"\"\"Test knowledge graph manager cache TTL.\"\"\"\n        # Add test data\n        await kg_manager.add_triple(\n            \"http://example.org/test/subject\",\n            \"http://example.org/test/predicate\",\n            \"http://example.org/test/object\"\n        )\n    \n        # Query to populate cache\n        query = \"\"\"\n            SELECT ?s ?p ?o WHERE {\n                ?s ?p ?o .\n            }\n        \"\"\"\n        await kg_manager.query_graph(query)\n        cache_hits_before = kg_manager.metrics.get('cache_hits', 0)\n    \n        # Wait for cache to expire\n>       await asyncio.sleep(kg_manager.cache_ttl + 0.1)\nE       AttributeError: 'KnowledgeGraphManager' object has no attribute 'cache_ttl'\n\ntests/test_knowledge_graph.py:1165: AttributeError\n___________________________ test_kg_manager_metrics ____________________________\n\nkg_manager = <kg.models.graph_manager.KnowledgeGraphManager object at 0x3049013d0>\n\n    @pytest.mark.asyncio\n    async def test_kg_manager_metrics(kg_manager):\n        \"\"\"Test knowledge graph manager metrics tracking.\"\"\"\n        # Add test data\n        await kg_manager.add_triple(\n            \"http://example.org/test/subject\",\n            \"http://example.org/test/predicate\",\n            \"http://example.org/test/object\"\n        )\n    \n        # Perform some operations\n        await kg_manager.query_graph(\"\"\"\n            SELECT ?s ?p ?o WHERE {\n                ?s ?p ?o .\n            }\n        \"\"\")\n        await kg_manager.add_triple(\n            \"http://example.org/test/subject2\",\n            \"http://example.org/test/predicate\",\n            \"http://example.org/test/object\"\n        )\n    \n        # Verify metrics\n        metrics = kg_manager.metrics\n>       assert metrics.get('sparql_queries', 0) > 0\nE       AssertionError: assert 0 > 0\nE        +  where 0 = <built-in method get of dict object at 0x303f0bf40>('sparql_queries', 0)\nE        +    where <built-in method get of dict object at 0x303f0bf40> = {'cache_hits': 0, 'cache_misses': 1, 'key_conversion_time': 0.0, 'query_count': 1, ...}.get\n\ntests/test_knowledge_graph.py:1245: AssertionError\n_______________________ test_kg_manager_bulk_operations ________________________\n\nkg_manager = <kg.models.graph_manager.KnowledgeGraphManager object at 0x303a01e90>\n\n    @pytest.mark.asyncio\n    async def test_kg_manager_bulk_operations(kg_manager):\n        \"\"\"Test knowledge graph manager bulk operations.\"\"\"\n        # Add multiple triples\n        triples = [\n            (\"http://example.org/test/subject1\", \"http://example.org/test/predicate\", \"http://example.org/test/object1\"),\n            (\"http://example.org/test/subject2\", \"http://example.org/test/predicate\", \"http://example.org/test/object2\"),\n            (\"http://example.org/test/subject3\", \"http://example.org/test/predicate\", \"http://example.org/test/object3\")\n        ]\n    \n        for s, p, o in triples:\n            await kg_manager.add_triple(s, p, o)\n    \n        # Verify all triples were added\n        result = await kg_manager.query_graph(\"\"\"\n            SELECT ?s ?p ?o WHERE {\n                ?s ?p ?o .\n            }\n        \"\"\")\n        assert len(result) == len(triples)\n    \n        # Remove all triples\n        for s, p, o in triples:\n            await kg_manager.remove_triple(s, p, o)\n    \n        # Verify all triples were removed\n        result = await kg_manager.query_graph(\"\"\"\n            SELECT ?s ?p ?o WHERE {\n                ?s ?p ?o .\n            }\n        \"\"\")\n>       assert len(result) == 0\nE       AssertionError: assert 3 == 0\nE        +  where 3 = len([{'o': 'http://example.org/test/object2', 'p': 'http://example.org/test/predicate', 's': 'http://example.org/test/subject2'}, {'o': 'http://example.org/test/object1', 'p': 'http://example.org/test/predicate', 's': 'http://example.org/test/subject1'}, {'o': 'http://example.org/test/object3', 'p': 'http://example.org/test/predicate', 's': 'http://example.org/test/subject3'}])\n\ntests/test_knowledge_graph.py:1281: AssertionError\n_______________________ test_investigate_research_topic ________________________\n\nreasoner = <agents.core.reasoner.KnowledgeGraphReasoner object at 0x304901790>\n\n    @pytest.mark.asyncio\n    async def test_investigate_research_topic(reasoner):\n        \"\"\"Test investigating a research topic.\"\"\"\n>       findings = await reasoner.investigate_research_topic(\"AI healthcare\")\n\ntests/test_reasoner.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nagents/core/reasoner.py:52: in investigate_research_topic\n    topic_entries = await self._find_topic_entries(topic_lc)\nagents/core/reasoner.py:83: in _find_topic_entries\n    for row in self._query(query):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.reasoner.KnowledgeGraphReasoner object at 0x304901790>\nsparql_query = '\\n            PREFIX dm: <http://example.org/dMaster/>\\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPR...mestamp ?timestamp .\\n                FILTER(CONTAINS(LCASE(STR(?message)), \"ai healthcare\"))\\n            }\\n        '\n\n    def _query(self, sparql_query: str) -> List[Dict[str, str]]:\n        \"\"\"Execute a SPARQL query and return results.\"\"\"\n        if self.graphdb:\n            return self.graphdb.query(sparql_query)\n        else:\n            # For rdflib, convert ResultRow to dict with string keys and values\n            results = []\n            qres = self.graph.query(sparql_query)\n            for row in qres:\n                # row.labels gives the variable names\n                result = {}\n                for var in row.labels:\n                    # Convert variable name to string\n                    key = str(var)\n                    # Convert value to string, handling None and URIRef/Literal objects\n                    value = row[var]\n                    if value is None:\n                        result[key] = \"\"\n>                   elif isinstance(value, (URIRef, Literal)):\nE                   NameError: name 'URIRef' is not defined\n\nagents/core/reasoner.py:245: NameError\n---------------------------- Captured stdout setup -----------------------------\nDEBUG: Triples in sample_graph:\n  http://example.org/dMaster/paper1 http://example.org/dMaster/year 2024\n  http://example.org/dMaster/entry1 http://example.org/dMaster/message ai healthcare research\n  http://example.org/dMaster/paper1 http://example.org/dMaster/author dr. smith\n  http://example.org/dMaster/paper1 http://example.org/dMaster/hasInsight ai can improve diagnosis accuracy\n  http://example.org/dMaster/entry1 http://example.org/dMaster/timestamp 2024-05-30\n  http://example.org/dMaster/paper1 http://example.org/dMaster/hasTopic ai healthcare\n  http://example.org/dMaster/agent1 http://example.org/dMaster/hasDiaryEntry http://example.org/dMaster/entry1\n  http://example.org/dMaster/paper1 http://example.org/dMaster/title ai in healthcare: a review\n----------------------------- Captured stdout call -----------------------------\nDebug - Topic entries query:\n\n            PREFIX dm: <http://example.org/dMaster/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dc: <http://purl.org/dc/elements/1.1/>\nPREFIX dct: <http://purl.org/dc/terms/>\n            SELECT ?agent ?entry ?message ?timestamp\n            WHERE {\n                ?agent dm:hasDiaryEntry ?entry .\n                ?entry dm:message ?message ;\n                       dm:timestamp ?timestamp .\n                FILTER(CONTAINS(LCASE(STR(?message)), \"ai healthcare\"))\n            }\n        \n___________________________ test_find_topic_entries ____________________________\n\nreasoner = <agents.core.reasoner.KnowledgeGraphReasoner object at 0x304911250>\n\n    @pytest.mark.asyncio\n    async def test_find_topic_entries(reasoner):\n        \"\"\"Test finding diary entries related to a topic.\"\"\"\n>       entries = await reasoner._find_topic_entries(\"ai healthcare\")\n\ntests/test_reasoner.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nagents/core/reasoner.py:83: in _find_topic_entries\n    for row in self._query(query):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.reasoner.KnowledgeGraphReasoner object at 0x304911250>\nsparql_query = '\\n            PREFIX dm: <http://example.org/dMaster/>\\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPR...mestamp ?timestamp .\\n                FILTER(CONTAINS(LCASE(STR(?message)), \"ai healthcare\"))\\n            }\\n        '\n\n    def _query(self, sparql_query: str) -> List[Dict[str, str]]:\n        \"\"\"Execute a SPARQL query and return results.\"\"\"\n        if self.graphdb:\n            return self.graphdb.query(sparql_query)\n        else:\n            # For rdflib, convert ResultRow to dict with string keys and values\n            results = []\n            qres = self.graph.query(sparql_query)\n            for row in qres:\n                # row.labels gives the variable names\n                result = {}\n                for var in row.labels:\n                    # Convert variable name to string\n                    key = str(var)\n                    # Convert value to string, handling None and URIRef/Literal objects\n                    value = row[var]\n                    if value is None:\n                        result[key] = \"\"\n>                   elif isinstance(value, (URIRef, Literal)):\nE                   NameError: name 'URIRef' is not defined\n\nagents/core/reasoner.py:245: NameError\n---------------------------- Captured stdout setup -----------------------------\nDEBUG: Triples in sample_graph:\n  http://example.org/dMaster/paper1 http://example.org/dMaster/year 2024\n  http://example.org/dMaster/entry1 http://example.org/dMaster/message ai healthcare research\n  http://example.org/dMaster/paper1 http://example.org/dMaster/author dr. smith\n  http://example.org/dMaster/paper1 http://example.org/dMaster/hasInsight ai can improve diagnosis accuracy\n  http://example.org/dMaster/entry1 http://example.org/dMaster/timestamp 2024-05-30\n  http://example.org/dMaster/paper1 http://example.org/dMaster/hasTopic ai healthcare\n  http://example.org/dMaster/agent1 http://example.org/dMaster/hasDiaryEntry http://example.org/dMaster/entry1\n  http://example.org/dMaster/paper1 http://example.org/dMaster/title ai in healthcare: a review\n----------------------------- Captured stdout call -----------------------------\nDebug - Topic entries query:\n\n            PREFIX dm: <http://example.org/dMaster/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dc: <http://purl.org/dc/elements/1.1/>\nPREFIX dct: <http://purl.org/dc/terms/>\n            SELECT ?agent ?entry ?message ?timestamp\n            WHERE {\n                ?agent dm:hasDiaryEntry ?entry .\n                ?entry dm:message ?message ;\n                       dm:timestamp ?timestamp .\n                FILTER(CONTAINS(LCASE(STR(?message)), \"ai healthcare\"))\n            }\n        \n___________________________ test_find_related_papers ___________________________\n\nreasoner = <agents.core.reasoner.KnowledgeGraphReasoner object at 0x304ba2b10>\n\n    @pytest.mark.asyncio\n    async def test_find_related_papers(reasoner):\n        \"\"\"Test finding research papers related to a topic.\"\"\"\n>       papers = await reasoner._find_related_papers(\"ai healthcare\")\n\ntests/test_reasoner.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nagents/core/reasoner.py:105: in _find_related_papers\n    for row in self._query(query):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.reasoner.KnowledgeGraphReasoner object at 0x304ba2b10>\nsparql_query = '\\n            PREFIX dm: <http://example.org/dMaster/>\\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPR...:hasInsight ?insight .\\n                FILTER(CONTAINS(LCASE(STR(?topic)), \"ai healthcare\"))\\n            }\\n        '\n\n    def _query(self, sparql_query: str) -> List[Dict[str, str]]:\n        \"\"\"Execute a SPARQL query and return results.\"\"\"\n        if self.graphdb:\n            return self.graphdb.query(sparql_query)\n        else:\n            # For rdflib, convert ResultRow to dict with string keys and values\n            results = []\n            qres = self.graph.query(sparql_query)\n            for row in qres:\n                # row.labels gives the variable names\n                result = {}\n                for var in row.labels:\n                    # Convert variable name to string\n                    key = str(var)\n                    # Convert value to string, handling None and URIRef/Literal objects\n                    value = row[var]\n                    if value is None:\n                        result[key] = \"\"\n>                   elif isinstance(value, (URIRef, Literal)):\nE                   NameError: name 'URIRef' is not defined\n\nagents/core/reasoner.py:245: NameError\n---------------------------- Captured stdout setup -----------------------------\nDEBUG: Triples in sample_graph:\n  http://example.org/dMaster/paper1 http://example.org/dMaster/year 2024\n  http://example.org/dMaster/entry1 http://example.org/dMaster/message ai healthcare research\n  http://example.org/dMaster/paper1 http://example.org/dMaster/author dr. smith\n  http://example.org/dMaster/paper1 http://example.org/dMaster/hasInsight ai can improve diagnosis accuracy\n  http://example.org/dMaster/entry1 http://example.org/dMaster/timestamp 2024-05-30\n  http://example.org/dMaster/paper1 http://example.org/dMaster/hasTopic ai healthcare\n  http://example.org/dMaster/agent1 http://example.org/dMaster/hasDiaryEntry http://example.org/dMaster/entry1\n  http://example.org/dMaster/paper1 http://example.org/dMaster/title ai in healthcare: a review\n----------------------------- Captured stdout call -----------------------------\nDebug - Related papers query:\n\n            PREFIX dm: <http://example.org/dMaster/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dc: <http://purl.org/dc/elements/1.1/>\nPREFIX dct: <http://purl.org/dc/terms/>\n            SELECT ?paper ?topic ?insight\n            WHERE {\n                ?paper dm:hasTopic ?topic ;\n                       dm:hasInsight ?insight .\n                FILTER(CONTAINS(LCASE(STR(?topic)), \"ai healthcare\"))\n            }\n        \n__________________________ test_extract_key_insights ___________________________\n\nreasoner = <agents.core.reasoner.KnowledgeGraphReasoner object at 0x30b31d9d0>\n\n    @pytest.mark.asyncio\n    async def test_extract_key_insights(reasoner):\n        \"\"\"Test extracting key insights from research.\"\"\"\n>       insights = await reasoner._extract_key_insights(\"ai healthcare\")\n\ntests/test_reasoner.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nagents/core/reasoner.py:132: in _extract_key_insights\n    for row in self._query(query):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.reasoner.KnowledgeGraphReasoner object at 0x30b31d9d0>\nsparql_query = '\\n            PREFIX dm: <http://example.org/dMaster/>\\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPR...                   FILTER(CONTAINS(LCASE(STR(?message)), \"ai healthcare\"))\\n                }\\n            }\\n        '\n\n    def _query(self, sparql_query: str) -> List[Dict[str, str]]:\n        \"\"\"Execute a SPARQL query and return results.\"\"\"\n        if self.graphdb:\n            return self.graphdb.query(sparql_query)\n        else:\n            # For rdflib, convert ResultRow to dict with string keys and values\n            results = []\n            qres = self.graph.query(sparql_query)\n            for row in qres:\n                # row.labels gives the variable names\n                result = {}\n                for var in row.labels:\n                    # Convert variable name to string\n                    key = str(var)\n                    # Convert value to string, handling None and URIRef/Literal objects\n                    value = row[var]\n                    if value is None:\n                        result[key] = \"\"\n>                   elif isinstance(value, (URIRef, Literal)):\nE                   NameError: name 'URIRef' is not defined\n\nagents/core/reasoner.py:245: NameError\n---------------------------- Captured stdout setup -----------------------------\nDEBUG: Triples in sample_graph:\n  http://example.org/dMaster/paper1 http://example.org/dMaster/year 2024\n  http://example.org/dMaster/entry1 http://example.org/dMaster/message ai healthcare research\n  http://example.org/dMaster/paper1 http://example.org/dMaster/author dr. smith\n  http://example.org/dMaster/paper1 http://example.org/dMaster/hasInsight ai can improve diagnosis accuracy\n  http://example.org/dMaster/entry1 http://example.org/dMaster/timestamp 2024-05-30\n  http://example.org/dMaster/paper1 http://example.org/dMaster/hasTopic ai healthcare\n  http://example.org/dMaster/agent1 http://example.org/dMaster/hasDiaryEntry http://example.org/dMaster/entry1\n  http://example.org/dMaster/paper1 http://example.org/dMaster/title ai in healthcare: a review\n________________________ test_traverse_knowledge_graph _________________________\n\nreasoner = <agents.core.reasoner.KnowledgeGraphReasoner object at 0x303a7e210>\n\n    @pytest.mark.asyncio\n    async def test_traverse_knowledge_graph(reasoner):\n        \"\"\"Test traversing the knowledge graph.\"\"\"\n>       traversal = await reasoner.traverse_knowledge_graph(\n            \"http://example.org/dMaster/agent1\",\n            max_depth=2\n        )\n\ntests/test_reasoner.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nagents/core/reasoner.py:190: in traverse_knowledge_graph\n    for row in self._query(query):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.reasoner.KnowledgeGraphReasoner object at 0x303a7e210>\nsparql_query = '\\n            PREFIX dm: <http://example.org/dMaster/>\\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPR...WHERE {\\n                <http://example.org/dMaster/agent1> ?rel ?target .\\n                \\n            }\\n        '\n\n    def _query(self, sparql_query: str) -> List[Dict[str, str]]:\n        \"\"\"Execute a SPARQL query and return results.\"\"\"\n        if self.graphdb:\n            return self.graphdb.query(sparql_query)\n        else:\n            # For rdflib, convert ResultRow to dict with string keys and values\n            results = []\n            qres = self.graph.query(sparql_query)\n            for row in qres:\n                # row.labels gives the variable names\n                result = {}\n                for var in row.labels:\n                    # Convert variable name to string\n                    key = str(var)\n                    # Convert value to string, handling None and URIRef/Literal objects\n                    value = row[var]\n                    if value is None:\n                        result[key] = \"\"\n>                   elif isinstance(value, (URIRef, Literal)):\nE                   NameError: name 'URIRef' is not defined\n\nagents/core/reasoner.py:245: NameError\n---------------------------- Captured stdout setup -----------------------------\nDEBUG: Triples in sample_graph:\n  http://example.org/dMaster/paper1 http://example.org/dMaster/year 2024\n  http://example.org/dMaster/entry1 http://example.org/dMaster/message ai healthcare research\n  http://example.org/dMaster/paper1 http://example.org/dMaster/author dr. smith\n  http://example.org/dMaster/paper1 http://example.org/dMaster/hasInsight ai can improve diagnosis accuracy\n  http://example.org/dMaster/entry1 http://example.org/dMaster/timestamp 2024-05-30\n  http://example.org/dMaster/paper1 http://example.org/dMaster/hasTopic ai healthcare\n  http://example.org/dMaster/agent1 http://example.org/dMaster/hasDiaryEntry http://example.org/dMaster/entry1\n  http://example.org/dMaster/paper1 http://example.org/dMaster/title ai in healthcare: a review\n----------------------------- Captured stdout call -----------------------------\nDebug - Traversal query:\n\n            PREFIX dm: <http://example.org/dMaster/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX dc: <http://purl.org/dc/elements/1.1/>\nPREFIX dct: <http://purl.org/dc/terms/>\n            SELECT ?rel ?target\n            WHERE {\n                <http://example.org/dMaster/agent1> ?rel ?target .\n                \n            }\n        \n____________________________ test_workflow_creation ____________________________\n\nworkflow_manager = <agents.core.workflow_manager.WorkflowManager object at 0x1021a0750>\n\n    @pytest.mark.asyncio\n    async def test_workflow_creation(workflow_manager):\n        # Create a test workflow\n        workflow = Workflow(\n            workflow_id=\"test_workflow\",\n            name=\"Test Workflow\",\n            description=\"Test workflow for unit tests\",\n            required_capabilities={\n                Capability(CapabilityType.TASK_EXECUTION, \"1.0\"),\n>               Capability(CapabilityType.MONITORING, \"1.0\")\n            }\n        )\n\ntests/test_workflow_manager.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <enum 'CapabilityType'>, name = 'MONITORING'\n\n    def __getattr__(cls, name):\n        \"\"\"\n        Return the enum member matching `name`\n    \n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n>           raise AttributeError(name) from None\nE           AttributeError: MONITORING\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/enum.py:784: AttributeError\n____________________________ test_workflow_assembly ____________________________\n\nworkflow_manager = <agents.core.workflow_manager.WorkflowManager object at 0x303ff1050>\nregistry = <agents.core.agent_registry.AgentRegistry object at 0x303b5c150>\n\n    @pytest.mark.asyncio\n    async def test_workflow_assembly(workflow_manager, registry):\n        \"\"\"Test workflow assembly.\"\"\"\n        # Create agent with required capability\n>       agent = TestAgent(\"agent1\", capabilities={Capability(CapabilityType.RESEARCH, \"1.0\")})\n\ntests/test_workflow_manager.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/test_agents.py:116: in __init__\n    Capability(CapabilityType.GENERIC, \"1.0\"),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <enum 'CapabilityType'>, name = 'GENERIC'\n\n    def __getattr__(cls, name):\n        \"\"\"\n        Return the enum member matching `name`\n    \n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n>           raise AttributeError(name) from None\nE           AttributeError: GENERIC\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/enum.py:784: AttributeError\n___________________________ test_workflow_validation ___________________________\n\nworkflow_manager = <agents.core.workflow_manager.WorkflowManager object at 0x303d15e50>\n\n    @pytest.mark.asyncio\n    async def test_workflow_validation(workflow_manager):\n        \"\"\"Test workflow validation.\"\"\"\n        workflow_id = await workflow_manager.create_workflow(\n            name=\"Invalid Workflow\",\n            description=\"Workflow with missing capabilities\",\n            required_capabilities=[\"nonexistent_capability\"]\n        )\n    \n>       validation = await workflow_manager.validate_workflow(workflow_id)\n\ntests/test_workflow_manager.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nagents/core/workflow_manager.py:369: in validate_workflow\n    if self._has_cycles(workflow):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.workflow_manager.WorkflowManager object at 0x303d15e50>\nworkflow = {'created_at': 1749089195.0397272, 'description': 'Workflow with missing capabilities', 'id': '0170d817-dbe2-41e4-8101-0984752f557b', 'load_balancing_strategy': 'round_robin', ...}\n\n    def _has_cycles(self, workflow: Dict) -> bool:\n        \"\"\"Check if a workflow has cycles.\"\"\"\n        visited = set()\n        path = set()\n    \n        def visit(node):\n            if node in path:\n                return True\n            if node in visited:\n                return False\n    \n            path.add(node)\n            visited.add(node)\n    \n            for step in workflow.steps:\n                if step.id == node:\n                    for next_step in step.next_steps:\n                        if visit(next_step):\n                            return True\n    \n            path.remove(node)\n            return False\n    \n>       for step in workflow.steps:\nE       AttributeError: 'dict' object has no attribute 'steps'\n\nagents/core/workflow_manager.py:414: AttributeError\n_____________________________ test_load_balancing ______________________________\n\nworkflow_manager = <agents.core.workflow_manager.WorkflowManager object at 0x30b059890>\nregistry = <agents.core.agent_registry.AgentRegistry object at 0x30b059b10>\ntest_capabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={}), Capability(type=sensor_data, version=1.0, ...h, version=1.0, parameters={}, metadata={}), Capability(type=data_processing, version=1.0, parameters={}, metadata={})}\n\n    @pytest.mark.asyncio\n    async def test_load_balancing(workflow_manager, registry, test_capabilities):\n        # Create multiple agents with same capability\n>       agent1 = TestAgent(\"agent1\", capabilities={next(iter(test_capabilities))})\n\ntests/test_workflow_manager.py:225: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/test_agents.py:116: in __init__\n    Capability(CapabilityType.GENERIC, \"1.0\"),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <enum 'CapabilityType'>, name = 'GENERIC'\n\n    def __getattr__(cls, name):\n        \"\"\"\n        Return the enum member matching `name`\n    \n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n>           raise AttributeError(name) from None\nE           AttributeError: GENERIC\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/enum.py:784: AttributeError\n____________________________ test_workflow_metrics _____________________________\n\nworkflow_manager = <agents.core.workflow_manager.WorkflowManager object at 0x30493a190>\nregistry = <agents.core.agent_registry.AgentRegistry object at 0x304939310>\ntest_capabilities = {Capability(type=knowledge_graph, version=1.0, parameters={}, metadata={}), Capability(type=sensor_data, version=1.0, ...h, version=1.0, parameters={}, metadata={}), Capability(type=data_processing, version=1.0, parameters={}, metadata={})}\n\n    @pytest.mark.asyncio\n    async def test_workflow_metrics(workflow_manager, registry, test_capabilities):\n        # Create agent and workflow\n>       agent = TestAgent(\"agent1\", capabilities=test_capabilities)\n\ntests/test_workflow_manager.py:262: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/test_agents.py:116: in __init__\n    Capability(CapabilityType.GENERIC, \"1.0\"),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <enum 'CapabilityType'>, name = 'GENERIC'\n\n    def __getattr__(cls, name):\n        \"\"\"\n        Return the enum member matching `name`\n    \n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n>           raise AttributeError(name) from None\nE           AttributeError: GENERIC\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/enum.py:784: AttributeError\n_______________________ test_registry_state_consistency ________________________\n\nworkflow_manager = <agents.core.workflow_manager.WorkflowManager object at 0x303b3b710>\nregistry = <agents.core.agent_registry.AgentRegistry object at 0x303fe4550>\n\n    @pytest.mark.asyncio\n    async def test_registry_state_consistency(workflow_manager, registry):\n        \"\"\"Test that registry state remains consistent across workflow operations.\"\"\"\n        # Register initial agents\n>       agent1 = ResearchTestAgent(agent_id=\"research_1\")\n\ntests/test_workflow_manager.py:291: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/test_agents.py:366: in __init__\n    Capability(CapabilityType.GENERIC, \"1.0\"),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <enum 'CapabilityType'>, name = 'GENERIC'\n\n    def __getattr__(cls, name):\n        \"\"\"\n        Return the enum member matching `name`\n    \n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n>           raise AttributeError(name) from None\nE           AttributeError: GENERIC\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/enum.py:784: AttributeError\n__________________ test_concurrent_registration_and_assembly ___________________\n\nworkflow_manager = <agents.core.workflow_manager.WorkflowManager object at 0x303f2bcd0>\nregistry = <agents.core.agent_registry.AgentRegistry object at 0x304d1d190>\n\n    @pytest.mark.asyncio\n    async def test_concurrent_registration_and_assembly(workflow_manager, registry):\n        \"\"\"Test handling of concurrent agent registration and workflow assembly.\"\"\"\n        # Create workflow first\n        workflow_id = await workflow_manager.create_workflow(\n            name=\"Concurrent Test\",\n            description=\"Test concurrent registration and assembly\",\n            required_capabilities={Capability(CapabilityType.RESEARCH, \"1.0\")}\n        )\n    \n        # Start assembly\n        assembly_task = asyncio.create_task(workflow_manager.assemble_workflow(workflow_id))\n    \n        # Register agents during assembly\n>       agent1 = ResearchTestAgent(agent_id=\"research_1\")\n\ntests/test_workflow_manager.py:331: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/test_agents.py:366: in __init__\n    Capability(CapabilityType.GENERIC, \"1.0\"),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <enum 'CapabilityType'>, name = 'GENERIC'\n\n    def __getattr__(cls, name):\n        \"\"\"\n        Return the enum member matching `name`\n    \n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n>           raise AttributeError(name) from None\nE           AttributeError: GENERIC\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/enum.py:784: AttributeError\n____________________________ test_registry_recovery ____________________________\n\nworkflow_manager = <agents.core.workflow_manager.WorkflowManager object at 0x304d36850>\nregistry = <agents.core.agent_registry.AgentRegistry object at 0x304d36e10>\n\n    @pytest.mark.asyncio\n    async def test_registry_recovery(workflow_manager, registry):\n        \"\"\"Test registry recovery after agent failures.\"\"\"\n        # Register agents\n>       agent1 = ResearchTestAgent(agent_id=\"research_1\")\n\ntests/test_workflow_manager.py:347: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/test_agents.py:366: in __init__\n    Capability(CapabilityType.GENERIC, \"1.0\"),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <enum 'CapabilityType'>, name = 'GENERIC'\n\n    def __getattr__(cls, name):\n        \"\"\"\n        Return the enum member matching `name`\n    \n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n>           raise AttributeError(name) from None\nE           AttributeError: GENERIC\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/enum.py:784: AttributeError\n__________________________ test_capability_conflicts ___________________________\n\nworkflow_manager = <agents.core.workflow_manager.WorkflowManager object at 0x304983190>\nregistry = <agents.core.agent_registry.AgentRegistry object at 0x304981810>\n\n    @pytest.mark.asyncio\n    async def test_capability_conflicts(workflow_manager, registry):\n        \"\"\"Test handling of conflicting capabilities between agents.\"\"\"\n        # Create agents with overlapping capabilities\n>       agent1 = TestAgent(\n            agent_id=\"agent_1\",\n            agent_type=\"multi_capability\",\n            capabilities={\n                Capability(CapabilityType.CAP_A, \"1.0\"),\n                Capability(CapabilityType.CAP_B, \"1.0\")\n            }\n        )\n\ntests/test_workflow_manager.py:377: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/test_agents.py:116: in __init__\n    Capability(CapabilityType.GENERIC, \"1.0\"),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <enum 'CapabilityType'>, name = 'GENERIC'\n\n    def __getattr__(cls, name):\n        \"\"\"\n        Return the enum member matching `name`\n    \n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n>           raise AttributeError(name) from None\nE           AttributeError: GENERIC\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/enum.py:784: AttributeError\n__________________________ test_registry_persistence ___________________________\n\nworkflow_manager = <agents.core.workflow_manager.WorkflowManager object at 0x303a84690>\nregistry = <agents.core.agent_registry.AgentRegistry object at 0x30b015d50>\n\n    @pytest.mark.asyncio\n    async def test_registry_persistence(workflow_manager, registry):\n        \"\"\"Test registry persistence across workflow operations.\"\"\"\n        # Register agents\n>       agent1 = ResearchTestAgent(agent_id=\"research_1\")\n\ntests/test_workflow_manager.py:426: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/test_agents.py:366: in __init__\n    Capability(CapabilityType.GENERIC, \"1.0\"),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <enum 'CapabilityType'>, name = 'GENERIC'\n\n    def __getattr__(cls, name):\n        \"\"\"\n        Return the enum member matching `name`\n    \n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n>           raise AttributeError(name) from None\nE           AttributeError: GENERIC\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/enum.py:784: AttributeError\n_____________________ test_workflow_persistence_versioning _____________________\n\npersistence = <agents.core.workflow_persistence.WorkflowPersistence object at 0x302646250>\n\n    @pytest.mark.asyncio\n    async def test_workflow_persistence_versioning(persistence):\n        \"\"\"Test workflow versioning functionality.\"\"\"\n        # Create initial workflow\n        workflow = {\n            \"id\": \"test-workflow-2\",\n            \"name\": \"Test Workflow\",\n            \"description\": \"Test workflow for versioning\",\n            \"required_capabilities\": [\"test_capability\"],\n            \"state\": \"created\",\n            \"created_at\": time.time(),\n            \"updated_at\": time.time(),\n            \"agents\": [],\n            \"results\": [],\n            \"version\": \"1.0\"\n        }\n    \n        # Save initial version\n        await persistence.save_workflow(workflow)\n    \n        # Update workflow\n        workflow[\"state\"] = \"updated\"\n        workflow[\"version\"] = \"1.1\"\n        workflow[\"updated_at\"] = time.time()\n    \n        # Save updated version\n        await persistence.save_workflow(workflow)\n    \n        # Get version history\n        history = await persistence.get_workflow_history(\"test-workflow-2\")\n    \n        # Verify version history (oldest first)\n>       assert len(history) == 2\nE       AssertionError: assert 7 == 2\nE        +  where 7 = len([{'agents': [], 'created_at': 1749088463.0225291, 'description': 'Test workflow for versioning', 'id': 'test-workflow-2', ...}, {'agents': [], 'created_at': 1749089015.6142159, 'description': 'Test workflow for versioning', 'id': 'test-workflow-2', ...}, {'agents': [], 'created_at': 1749089195.924303, 'description': 'Test workflow for versioning', 'id': 'test-workflow-2', ...}, {'agents': [], 'created_at': 1749088463.0225291, 'description': 'Test workflow for versioning', 'id': 'test-workflow-2', ...}, {'agents': [], 'created_at': 1749087144.126687, 'description': 'Test workflow for versioning', 'id': 'test-workflow-2', ...}, {'agents': [], 'created_at': 1749089195.924303, 'description': 'Test workflow for versioning', 'id': 'test-workflow-2', ...}, ...])\n\ntests/test_workflow_persistence.py:103: AssertionError\n______________________ test_workflow_persistence_recovery ______________________\n\npersistence = <agents.core.workflow_persistence.WorkflowPersistence object at 0x303ab6210>\n\n    @pytest.mark.asyncio\n    async def test_workflow_persistence_recovery(persistence):\n        \"\"\"Test workflow recovery functionality.\"\"\"\n        # Create test workflow\n        workflow = {\n            \"id\": \"test-workflow-3\",\n            \"name\": \"Test Workflow\",\n            \"description\": \"Test workflow for recovery\",\n            \"required_capabilities\": [\"test_capability\"],\n            \"state\": \"created\",\n            \"created_at\": time.time(),\n            \"updated_at\": time.time(),\n            \"agents\": [],\n            \"results\": [],\n            \"version\": \"1.0\"\n        }\n    \n        # Save initial version\n        await persistence.save_workflow(workflow)\n    \n        # Update workflow\n        workflow[\"state\"] = \"updated\"\n        workflow[\"version\"] = \"1.1\"\n        workflow[\"updated_at\"] = time.time()\n    \n        # Save updated version\n        await persistence.save_workflow(workflow)\n    \n        # Recover to initial version\n        recovered_workflow = await persistence.recover_workflow(\"test-workflow-3\", \"1.0\")\n    \n        # Verify recovered workflow\n>       assert recovered_workflow[\"version\"] == \"1.0\"\nE       AssertionError: assert '1.1' == '1.0'\nE         \nE         - 1.0\nE         + 1.1\n\ntests/test_workflow_persistence.py:139: AssertionError\n___________________________ test_workflow_monitoring ___________________________\n\nmonitor = <agents.core.workflow_monitor.WorkflowMonitor object at 0x303aa8e90>\n\n    @pytest.mark.asyncio\n    async def test_workflow_monitoring(monitor):\n        \"\"\"Test workflow monitoring functionality.\"\"\"\n        workflow_id = \"test-workflow-4\"\n    \n        # Track initial metrics\n>       await monitor.track_workflow_metrics(workflow_id, {\n            \"state\": \"created\",\n            \"response_time\": 0.0\n        })\n\ntests/test_workflow_persistence.py:148: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nagents/core/workflow_monitor.py:200: in track_workflow_metrics\n    self.workflow_latency.labels(workflow_id=workflow_id).observe(metrics[\"response_time\"])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = prometheus_client.metrics.Histogram(workflow_latency_seconds)\nlabelvalues = (), labelkwargs = {'workflow_id': 'test-workflow-4'}\n\n    def labels(self: T, *labelvalues: Any, **labelkwargs: Any) -> T:\n        \"\"\"Return the child for the given labelset.\n    \n        All metrics can have labels, allowing grouping of related time series.\n        Taking a counter as an example:\n    \n            from prometheus_client import Counter\n    \n            c = Counter('my_requests_total', 'HTTP Failures', ['method', 'endpoint'])\n            c.labels('get', '/').inc()\n            c.labels('post', '/submit').inc()\n    \n        Labels can also be provided as keyword arguments:\n    \n            from prometheus_client import Counter\n    \n            c = Counter('my_requests_total', 'HTTP Failures', ['method', 'endpoint'])\n            c.labels(method='get', endpoint='/').inc()\n            c.labels(method='post', endpoint='/submit').inc()\n    \n        See the best practices on [naming](http://prometheus.io/docs/practices/naming/)\n        and [labels](http://prometheus.io/docs/practices/instrumentation/#use-labels).\n        \"\"\"\n        if not self._labelnames:\n            raise ValueError('No label names were set when constructing %s' % self)\n    \n        if self._labelvalues:\n            raise ValueError('{} already has labels set ({}); can not chain calls to .labels()'.format(\n                self,\n                dict(zip(self._labelnames, self._labelvalues))\n            ))\n    \n        if labelvalues and labelkwargs:\n            raise ValueError(\"Can't pass both *args and **kwargs\")\n    \n        if labelkwargs:\n            if sorted(labelkwargs) != sorted(self._labelnames):\n>               raise ValueError('Incorrect label names')\nE               ValueError: Incorrect label names\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/prometheus_client/metrics.py:195: ValueError\n_____________________________ test_workflow_alerts _____________________________\n\nmonitor = <agents.core.workflow_monitor.WorkflowMonitor object at 0x303b7bad0>\n\n    @pytest.mark.asyncio\n    async def test_workflow_alerts(monitor):\n        \"\"\"Test workflow alerting functionality.\"\"\"\n        workflow_id = \"test-workflow-5\"\n    \n        # Track metrics that should trigger alerts\n>       await monitor.track_workflow_metrics(workflow_id, {\n            \"state\": \"executing\",\n            \"response_time\": 10.0,  # Exceeds threshold\n            \"resource_usage\": {\n                \"cpu\": 0.9,  # Exceeds threshold\n                \"memory\": 0.8\n            }\n        })\n\ntests/test_workflow_persistence.py:178: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.workflow_monitor.WorkflowMonitor object at 0x303b7bad0>\nworkflow_id = 'test-workflow-5'\nmetrics = {'resource_usage': {'cpu': 0.9, 'memory': 0.8}, 'response_time': 10.0, 'state': 'executing', 'timestamp': '2025-06-04T22:06:35.950545'}\n\n    async def track_workflow_metrics(\n        self,\n        workflow_id: str,\n        metrics: Dict[str, Any]\n    ) -> None:\n        \"\"\"Track workflow execution metrics.\"\"\"\n        if workflow_id not in self.metrics:\n            self.metrics[workflow_id] = {\n                \"state_changes\": [],\n                \"agent_metrics\": {},\n                \"error_counts\": defaultdict(int),\n                \"response_times\": []  # Initialize response_times list\n            }\n    \n        workflow_metrics = self.metrics[workflow_id]\n    \n        # Add timestamp to metrics\n        metrics[\"timestamp\"] = datetime.now().isoformat()\n    \n        # Track state changes if status is provided\n        if \"state\" in metrics:\n            workflow_metrics[\"state_changes\"].append({\n                \"state\": metrics[\"state\"],\n                \"timestamp\": metrics[\"timestamp\"]\n            })\n    \n        # Track response time if provided\n        if \"response_time\" in metrics:\n            workflow_metrics[\"response_times\"].append(metrics[\"response_time\"])\n    \n        # Track resource usage if provided\n        if \"resource_usage\" in metrics:\n            for resource, value in metrics[\"resource_usage\"].items():\n>               workflow_metrics[\"resource_usage\"][resource].append(value)\nE               KeyError: 'resource_usage'\n\nagents/core/workflow_monitor.py:187: KeyError\n______________________ test_workflow_manager_integration _______________________\n\nworkflow_manager = <agents.core.workflow_manager.WorkflowManager object at 0x303bb5910>\n\n    @pytest.mark.asyncio\n    async def test_workflow_manager_integration(workflow_manager):\n        \"\"\"Test integration of persistence and monitoring in WorkflowManager.\"\"\"\n        # Create workflow\n        workflow_id = await workflow_manager.create_workflow(\n            name=\"Test Workflow\",\n            description=\"Test workflow for integration\",\n            required_capabilities=[\"test_capability\"]\n        )\n    \n        # Assemble workflow\n>       assembly_result = await workflow_manager.assemble_workflow(workflow_id)\n\ntests/test_workflow_persistence.py:206: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nagents/core/workflow_manager.py:427: in assemble_workflow\n    validation = await self.validate_workflow(workflow_id)\nagents/core/workflow_manager.py:369: in validate_workflow\n    if self._has_cycles(workflow):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <agents.core.workflow_manager.WorkflowManager object at 0x303bb5910>\nworkflow = {'created_at': 1749089195.956244, 'description': 'Test workflow for integration', 'id': '47ded02a-7ca8-4357-91e8-022014c463d0', 'load_balancing_strategy': 'round_robin', ...}\n\n    def _has_cycles(self, workflow: Dict) -> bool:\n        \"\"\"Check if a workflow has cycles.\"\"\"\n        visited = set()\n        path = set()\n    \n        def visit(node):\n            if node in path:\n                return True\n            if node in visited:\n                return False\n    \n            path.add(node)\n            visited.add(node)\n    \n            for step in workflow.steps:\n                if step.id == node:\n                    for next_step in step.next_steps:\n                        if visit(next_step):\n                            return True\n    \n            path.remove(node)\n            return False\n    \n>       for step in workflow.steps:\nE       AttributeError: 'dict' object has no attribute 'steps'\n\nagents/core/workflow_manager.py:414: AttributeError\n________________________ test_test_agent_initialization ________________________\n\n    @pytest.mark.asyncio\n    async def test_test_agent_initialization():\n>       agent = TestAgent(agent_id=\"test_agent\", agent_type=\"test\", capabilities=[], default_response={})\n\ntests/unit/test_test_agents.py:7: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/test_agents.py:116: in __init__\n    Capability(CapabilityType.GENERIC, \"1.0\"),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <enum 'CapabilityType'>, name = 'GENERIC'\n\n    def __getattr__(cls, name):\n        \"\"\"\n        Return the enum member matching `name`\n    \n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n>           raise AttributeError(name) from None\nE           AttributeError: GENERIC\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/enum.py:784: AttributeError\n_______________________ test_test_agent_process_message ________________________\n\n    @pytest.mark.asyncio\n    async def test_test_agent_process_message():\n>       agent = TestAgent(agent_id=\"test_agent\", agent_type=\"test\", capabilities=[], default_response={\"status\": \"success\"})\n\ntests/unit/test_test_agents.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/test_agents.py:116: in __init__\n    Capability(CapabilityType.GENERIC, \"1.0\"),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <enum 'CapabilityType'>, name = 'GENERIC'\n\n    def __getattr__(cls, name):\n        \"\"\"\n        Return the enum member matching `name`\n    \n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n>           raise AttributeError(name) from None\nE           AttributeError: GENERIC\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/enum.py:784: AttributeError\n____________________ test_test_agent_update_knowledge_graph ____________________\n\n    @pytest.mark.asyncio\n    async def test_test_agent_update_knowledge_graph():\n>       agent = TestAgent(agent_id=\"test_agent\", agent_type=\"test\", capabilities=[], default_response={})\n\ntests/unit/test_test_agents.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/utils/test_agents.py:116: in __init__\n    Capability(CapabilityType.GENERIC, \"1.0\"),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <enum 'CapabilityType'>, name = 'GENERIC'\n\n    def __getattr__(cls, name):\n        \"\"\"\n        Return the enum member matching `name`\n    \n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n>           raise AttributeError(name) from None\nE           AttributeError: GENERIC\n\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/enum.py:784: AttributeError\n=============================== warnings summary ===============================\ntests/utils/test_agents.py:103\n  /Users/nicholasbaro/Python/semant/tests/utils/test_agents.py:103: PytestCollectionWarning: cannot collect test class 'TestAgent' because it has a __init__ constructor (from: tests/test_agent_factory.py)\n    class TestAgent(BaseTestAgent):\n\ntests/utils/test_agents.py:196\n  /Users/nicholasbaro/Python/semant/tests/utils/test_agents.py:196: PytestCollectionWarning: cannot collect test class 'TestCapabilityAgent' because it has a __init__ constructor (from: tests/test_agent_factory.py)\n    class TestCapabilityAgent(TestAgent):\n\ntests/test_agent_recovery.py:41\n  /Users/nicholasbaro/Python/semant/tests/test_agent_recovery.py:41: PytestCollectionWarning: cannot collect test class 'TestRecoveryAgent' because it has a __init__ constructor (from: tests/test_agent_recovery.py)\n    class TestRecoveryAgent(EnhancedMockAgent):\n\ntests/utils/test_agents.py:196\n  /Users/nicholasbaro/Python/semant/tests/utils/test_agents.py:196: PytestCollectionWarning: cannot collect test class 'TestCapabilityAgent' because it has a __init__ constructor (from: tests/test_dynamic_agents.py)\n    class TestCapabilityAgent(TestAgent):\n\ntests/utils/test_agents.py:103\n  /Users/nicholasbaro/Python/semant/tests/utils/test_agents.py:103: PytestCollectionWarning: cannot collect test class 'TestAgent' because it has a __init__ constructor (from: tests/test_knowledge_graph.py)\n    class TestAgent(BaseTestAgent):\n\ntests/utils/test_agents.py:103\n  /Users/nicholasbaro/Python/semant/tests/utils/test_agents.py:103: PytestCollectionWarning: cannot collect test class 'TestAgent' because it has a __init__ constructor (from: tests/test_workflow_manager.py)\n    class TestAgent(BaseTestAgent):\n\ntests/utils/test_agents.py:103\n  /Users/nicholasbaro/Python/semant/tests/utils/test_agents.py:103: PytestCollectionWarning: cannot collect test class 'TestAgent' because it has a __init__ constructor (from: tests/unit/test_additional_agents.py)\n    class TestAgent(BaseTestAgent):\n\ntests/utils/test_agents.py:103\n  /Users/nicholasbaro/Python/semant/tests/utils/test_agents.py:103: PytestCollectionWarning: cannot collect test class 'TestAgent' because it has a __init__ constructor (from: tests/unit/test_test_agents.py)\n    class TestAgent(BaseTestAgent):\n\ntests/utils/test_agents.py:103\n  /Users/nicholasbaro/Python/semant/tests/utils/test_agents.py:103: PytestCollectionWarning: cannot collect test class 'TestAgent' because it has a __init__ constructor (from: tests/utils/test_agents.py)\n    class TestAgent(BaseTestAgent):\n\ntests/utils/test_agents.py:196\n  /Users/nicholasbaro/Python/semant/tests/utils/test_agents.py:196: PytestCollectionWarning: cannot collect test class 'TestCapabilityAgent' because it has a __init__ constructor (from: tests/utils/test_agents.py)\n    class TestCapabilityAgent(TestAgent):\n\ntests/utils/test_helpers.py:14\n  /Users/nicholasbaro/Python/semant/tests/utils/test_helpers.py:14: PytestCollectionWarning: cannot collect test class 'TestResourceManager' because it has a __init__ constructor (from: tests/utils/test_helpers.py)\n    class TestResourceManager:\n\ntests/test_graph_monitoring.py::test_stats_collection\n  /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/_pytest/unraisableexception.py:85: PytestUnraisableExceptionWarning: Exception ignored in: <coroutine object WorkflowNotifier._process_notifications at 0x3023573d0>\n  \n  Traceback (most recent call last):\n    File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py\", line 158, in get\n      await getter\n  GeneratorExit\n  \n  During handling of the above exception, another exception occurred:\n  \n  Traceback (most recent call last):\n    File \"/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py\", line 65, in _process_notifications\n      notification = await self._notification_queue.get()\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py\", line 160, in get\n      getter.cancel()  # Just in case getter is not done yet.\n      ^^^^^^^^^^^^^^^\n    File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py\", line 762, in call_soon\n      self._check_closed()\n    File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py\", line 520, in _check_closed\n      raise RuntimeError('Event loop is closed')\n  RuntimeError: Event loop is closed\n  \n    warnings.warn(pytest.PytestUnraisableExceptionWarning(msg))\n\ntests/test_graph_optimizations.py::test_cache_invalidation\n  /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/pyparsing/core.py:4710: RuntimeWarning: coroutine 'KnowledgeGraphManager.get_stats' was never awaited\n    if not isinstance(self, Forward) and self.customName is not None:\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/test_vertex_auth.py::test_credentials\n  /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/_pytest/python.py:163: PytestReturnNotNoneWarning: Expected None, but tests/test_vertex_auth.py::test_credentials returned False, which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?\n    warnings.warn(\n\ntests/test_vertex_auth.py::test_vertex_initialization\n  /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/_pytest/python.py:163: PytestReturnNotNoneWarning: Expected None, but tests/test_vertex_auth.py::test_vertex_initialization returned False, which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?\n    warnings.warn(\n\ntests/test_vertex_auth.py::test_model_access\n  /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/_pytest/python.py:163: PytestReturnNotNoneWarning: Expected None, but tests/test_vertex_auth.py::test_model_access returned False, which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?\n    warnings.warn(\n\ntests/test_vertex_integration.py::test_vertex_initialization\n  /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/_pytest/python.py:163: PytestReturnNotNoneWarning: Expected None, but tests/test_vertex_integration.py::test_vertex_initialization returned False, which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?\n    warnings.warn(\n\ntests/test_vertex_integration.py::test_credentials\n  /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/_pytest/python.py:163: PytestReturnNotNoneWarning: Expected None, but tests/test_vertex_integration.py::test_credentials returned False, which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?\n    warnings.warn(\n\ntests/test_vertex_integration.py::test_model_access\n  /Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/_pytest/python.py:163: PytestReturnNotNoneWarning: Expected None, but tests/test_vertex_integration.py::test_model_access returned False, which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?\n    warnings.warn(\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_agent_factory.py::test_create_agent - ValueError: Unknown a...\nFAILED tests/test_agent_factory.py::test_create_capability_agent - ValueError...\nFAILED tests/test_agent_factory.py::test_agent_initialization - ValueError: U...\nFAILED tests/test_agent_factory.py::test_agent_capability_management - ValueE...\nFAILED tests/test_agent_recovery.py::test_agent_recovery_timeout - TypeError:...\nFAILED tests/test_agent_recovery.py::test_agent_recovery - TypeError: AgentRe...\nFAILED tests/test_agent_recovery.py::test_max_recovery_attempts - TypeError: ...\nFAILED tests/test_agent_recovery.py::test_role_recovery - TypeError: AgentReg...\nFAILED tests/test_agent_recovery.py::test_recovery_metrics - TypeError: Agent...\nFAILED tests/test_agent_recovery.py::test_knowledge_graph_integration - TypeE...\nFAILED tests/test_capability_handling.py::test_capability_type_conversion - a...\nFAILED tests/test_capability_handling.py::test_registry_capability_handling\nFAILED tests/test_capability_handling.py::test_capability_consistency - Attri...\nFAILED tests/test_capability_handling.py::test_capability_edge_cases - Attrib...\nFAILED tests/test_dynamic_agents.py::test_agent_creation - ValueError: Unknow...\nFAILED tests/test_dynamic_agents.py::test_role_delegation - ValueError: Unkno...\nFAILED tests/test_dynamic_agents.py::test_agent_scaling - ValueError: Unknown...\nFAILED tests/test_dynamic_agents.py::test_supervisor_agent - ValueError: Unkn...\nFAILED tests/test_dynamic_agents.py::test_workload_monitoring - ValueError: U...\nFAILED tests/test_graph_monitoring.py::test_stats_collection - TypeError: 'co...\nFAILED tests/test_graph_monitoring.py::test_performance_monitoring - TypeErro...\nFAILED tests/test_knowledge_graph.py::test_cache_metrics - assert 0 == 1\nFAILED tests/test_knowledge_graph.py::test_graph_validation - assert 0 > 0\nFAILED tests/test_knowledge_graph.py::test_selective_cache_invalidation - Ass...\nFAILED tests/test_knowledge_graph.py::test_kg_manager_cache_invalidation - as...\nFAILED tests/test_knowledge_graph.py::test_kg_manager_cache_ttl - AttributeEr...\nFAILED tests/test_knowledge_graph.py::test_kg_manager_metrics - AssertionErro...\nFAILED tests/test_knowledge_graph.py::test_kg_manager_bulk_operations - Asser...\nFAILED tests/test_reasoner.py::test_investigate_research_topic - NameError: n...\nFAILED tests/test_reasoner.py::test_find_topic_entries - NameError: name 'URI...\nFAILED tests/test_reasoner.py::test_find_related_papers - NameError: name 'UR...\nFAILED tests/test_reasoner.py::test_extract_key_insights - NameError: name 'U...\nFAILED tests/test_reasoner.py::test_traverse_knowledge_graph - NameError: nam...\nFAILED tests/test_workflow_manager.py::test_workflow_creation - AttributeErro...\nFAILED tests/test_workflow_manager.py::test_workflow_assembly - AttributeErro...\nFAILED tests/test_workflow_manager.py::test_workflow_validation - AttributeEr...\nFAILED tests/test_workflow_manager.py::test_load_balancing - AttributeError: ...\nFAILED tests/test_workflow_manager.py::test_workflow_metrics - AttributeError...\nFAILED tests/test_workflow_manager.py::test_registry_state_consistency - Attr...\nFAILED tests/test_workflow_manager.py::test_concurrent_registration_and_assembly\nFAILED tests/test_workflow_manager.py::test_registry_recovery - AttributeErro...\nFAILED tests/test_workflow_manager.py::test_capability_conflicts - AttributeE...\nFAILED tests/test_workflow_manager.py::test_registry_persistence - AttributeE...\nFAILED tests/test_workflow_persistence.py::test_workflow_persistence_versioning\nFAILED tests/test_workflow_persistence.py::test_workflow_persistence_recovery\nFAILED tests/test_workflow_persistence.py::test_workflow_monitoring - ValueEr...\nFAILED tests/test_workflow_persistence.py::test_workflow_alerts - KeyError: '...\nFAILED tests/test_workflow_persistence.py::test_workflow_manager_integration\nFAILED tests/unit/test_test_agents.py::test_test_agent_initialization - Attri...\nFAILED tests/unit/test_test_agents.py::test_test_agent_process_message - Attr...\nFAILED tests/unit/test_test_agents.py::test_test_agent_update_knowledge_graph\nERROR tests/agents/test_code_review_agent.py::test_agent_initialization - Typ...\nERROR tests/agents/test_code_review_agent.py::test_code_review_simple_function\nERROR tests/agents/test_code_review_agent.py::test_code_review_complex_function\nERROR tests/agents/test_code_review_agent.py::test_code_review_with_syntax_error\nERROR tests/agents/test_code_review_agent.py::test_complexity_analysis - Type...\nERROR tests/agents/test_code_review_agent.py::test_code_quality_analysis - Ty...\nERROR tests/agents/test_code_review_agent.py::test_pattern_analysis - TypeErr...\nERROR tests/agents/test_code_review_agent.py::test_recommendation_generation\nERROR tests/agents/test_code_review_agent.py::test_scoring_functions - TypeEr...\nERROR tests/test_agent_integrator.py::test_register_agent - AttributeError: '...\nERROR tests/test_agent_integrator.py::test_route_message - AttributeError: 'A...\nERROR tests/test_agent_integrator.py::test_broadcast_message - AttributeError...\nERROR tests/test_agent_integrator.py::test_get_agent_status - AttributeError:...\nERROR tests/test_agent_integrator.py::test_get_all_agent_statuses - Attribute...\nERROR tests/test_agent_integrator.py::test_knowledge_graph_updates - Attribut...\nERROR tests/test_agent_integrator.py::test_knowledge_graph_queries - Attribut...\nERROR tests/test_agent_integrator.py::test_process_message_called_during_routing\nERROR tests/test_agent_recovery.py::test_agent_recovery_success - AttributeEr...\nERROR tests/test_agent_recovery.py::test_agent_recovery_failure - AttributeEr...\nERROR tests/test_agent_recovery.py::test_agent_recovery_max_attempts - Attrib...\nERROR tests/test_agent_recovery.py::test_concurrent_agent_recovery - Attribut...\nERROR tests/test_agent_recovery.py::test_agent_recovery_metrics - AttributeEr...\nERROR tests/test_agent_recovery.py::test_agent_recovery_error_handling - Attr...\nERROR tests/test_agent_recovery.py::test_recovery_strategies - AttributeError...\nERROR tests/test_agent_recovery.py::test_recovery_strategy_metrics - Attribut...\nERROR tests/test_agent_recovery.py::test_recovery_strategy_failure - Attribut...\nERROR tests/test_agents.py::TestBaseAgent::test_initialization - TypeError: C...\nERROR tests/test_agents.py::TestBaseAgent::test_state_transitions - TypeError...\nERROR tests/test_agents.py::TestBaseAgent::test_message_handling - TypeError:...\nERROR tests/test_agents.py::TestSensorAgent::test_process_message - TypeError...\nERROR tests/test_agents.py::TestDataProcessorAgent::test_process_message - Ty...\nERROR tests/test_agents.py::TestPromptAgent::test_prompt_generation - TypeErr...\nERROR tests/test_agents.py::TestPromptAgent::test_code_review - TypeError: Ca...\nERROR tests/test_agents.py::TestPromptAgent::test_template_management - TypeE...\nERROR tests/test_agents.py::TestPromptAgent::test_error_handling - TypeError:...\nERROR tests/test_capability_management.py::TestCapabilityManagement::test_add_capability\nERROR tests/test_capability_management.py::TestCapabilityManagement::test_remove_capability\nERROR tests/test_capability_management.py::TestCapabilityManagement::test_remove_nonexistent_capability\nERROR tests/test_capability_management.py::TestCapabilityManagement::test_knowledge_graph_updates\nERROR tests/test_capability_management.py::TestCapabilityManagement::test_capability_conflicts\nERROR tests/test_capability_management.py::TestCapabilityManagement::test_capability_dependencies\nERROR tests/test_consulting_agents.py::test_engagement_initialization - TypeE...\nERROR tests/test_consulting_agents.py::test_strategy_development - TypeError:...\nERROR tests/test_consulting_agents.py::test_implementation_planning - TypeErr...\nERROR tests/test_consulting_agents.py::test_value_framework_development - Typ...\nERROR tests/test_consulting_agents.py::test_end_to_end_engagement - TypeError...\nERROR tests/test_consulting_agents.py::test_knowledge_graph_consistency - Typ...\nERROR tests/test_consulting_agents.py::test_agent_diary_functionality - TypeE...\nERROR tests/test_consulting_agents.py::test_agent_diary_in_knowledge_graph - ...\nERROR tests/test_dynamic_agents.py::test_agent_initialization - ValueError: U...\nERROR tests/test_dynamic_agents.py::test_capability_tracking - ValueError: Un...\nERROR tests/test_dynamic_agents.py::test_knowledge_graph_operations - ValueEr...\nERROR tests/test_integration_management.py::test_integration_management - Att...\nERROR tests/test_integration_management.py::test_module_management - Attribut...\nERROR tests/test_integration_management.py::test_integration_metrics - Attrib...\nERROR tests/test_knowledge_graph.py::test_knowledge_graph_initialization - At...\nERROR tests/test_knowledge_graph.py::test_agent_knowledge_graph_access - Attr...\nERROR tests/test_knowledge_graph.py::test_knowledge_graph_updates - Attribute...\nERROR tests/test_knowledge_graph.py::test_knowledge_graph_validation - Attrib...\nERROR tests/test_knowledge_graph.py::test_triple_addition - AttributeError: '...\nERROR tests/test_knowledge_graph.py::test_graph_update - AttributeError: 'Kno...\nERROR tests/test_knowledge_graph.py::test_graph_query - AttributeError: 'Know...\nERROR tests/test_knowledge_graph.py::test_semantic_relationships - AttributeE...\nERROR tests/test_knowledge_graph.py::test_complex_query_patterns - AttributeE...\nERROR tests/test_performance.py::TestPerformance::test_message_processing_performance\nERROR tests/test_performance.py::TestPerformance::test_concurrent_operations\nERROR tests/test_performance.py::TestPerformance::test_resource_usage - TypeE...\nERROR tests/test_performance.py::TestPerformance::test_recovery_performance\nERROR tests/test_prompt_agent.py::TestPromptAgent::test_prompt_generation - T...\nERROR tests/test_prompt_agent.py::TestPromptAgent::test_knowledge_graph_integration\nERROR tests/test_prompt_agent.py::TestPromptAgent::test_prompt_validation - T...\nERROR tests/test_prompt_agent.py::TestPromptAgent::test_prompt_metrics - Type...\nERROR tests/test_research_agent.py::test_initialize - TypeError: Can't instan...\nERROR tests/test_research_agent.py::test_process_message - TypeError: Can't i...\nERROR tests/test_research_agent.py::test_test_agent_initialization - TypeErro...\nERROR tests/test_research_agent.py::test_test_agent_message_history - TypeErr...\nERROR tests/test_research_agent.py::test_test_agent_knowledge_graph - TypeErr...\nERROR tests/test_research_agent.py::test_process_message_without_topic - Type...\nERROR tests/test_research_agent.py::test_process_message_with_topic - TypeErr...\nERROR tests/test_research_agent.py::test_query_knowledge_graph_without_topic\nERROR tests/test_research_agent.py::test_query_knowledge_graph_with_topic - T...\nERROR tests/test_research_agent.py::test_update_knowledge_graph - TypeError: ...\nERROR tests/test_research_agent.py::test_confidence_scoring - TypeError: Can'...\nERROR tests/test_research_agent.py::test_evidence_tracking - TypeError: Can't...\nERROR tests/test_research_agent.py::test_multiple_research_paths - TypeError:...\nERROR tests/test_research_agent.py::test_error_handling - TypeError: Can't in...\nERROR tests/test_research_agent.py::test_reasoner_integration - TypeError: Ca...\nERROR tests/test_research_agent.py::test_research_findings_persistence - Type...\nERROR tests/test_security_audit.py::test_security_levels - AttributeError: SE...\nERROR tests/test_security_audit.py::test_audit_logging - AttributeError: SECU...\nERROR tests/test_security_audit.py::test_security_metrics - AttributeError: S...\nERROR tests/test_vertex_integration.py::test_email_enhancement - TypeError: C...\nERROR tests/test_vertex_integration.py::test_message_processing - TypeError: ...\nERROR tests/test_vertex_integration.py::test_invalid_message_type - TypeError...\nERROR tests/test_vertex_integration.py::test_knowledge_graph_integration - Ty...\nERROR tests/test_vertex_integration.py::test_error_handling - TypeError: Can'...\nERROR tests/test_vertex_integration.py::test_empty_subject_and_body - TypeErr...\nERROR tests/test_workflow_manager.py::test_agent_registration - TypeError: Re...\nERROR tests/test_workflow_manager.py::test_workflow_execution\nERROR tests/test_workflow_manager.py::test_workflow_supervision\nERROR tests/test_workflow_manager.py::test_workflow_validation - AttributeErr...\nERROR tests/test_workflow_manager.py::test_concurrent_registration_and_assembly\nERROR tests/test_workflow_manager.py::test_anomaly_detection_workflow - TypeE...\nERROR tests/test_workflow_manager.py::test_workflow_dependency_execution - Ty...\nERROR tests/test_workflow_manager.py::test_workflow_timeout_handling - TypeEr...\nERROR tests/test_workflow_manager.py::test_workflow_error_recovery - TypeErro...\nERROR tests/test_workflow_manager.py::test_transaction_atomicity - AttributeE...\nERROR tests/test_workflow_manager.py::test_retry_logic - AttributeError: 'Kno...\nERROR tests/test_workflow_manager.py::test_concurrent_transactions - Attribut...\nERROR tests/test_workflow_manager.py::test_transaction_timeout - AttributeErr...\nERROR tests/test_workflow_persistence.py::test_workflow_persistence_save_load\nERROR tests/test_workflow_persistence.py::test_workflow_persistence_versioning\nERROR tests/test_workflow_persistence.py::test_workflow_persistence_recovery\nERROR tests/test_workflow_persistence.py::test_workflow_manager_integration\nERROR tests/unit/test_additional_agents.py::test_diary_write_and_query - Type...\nERROR tests/unit/test_additional_agents.py::test_diary_agent - TypeError: Can...\nERROR tests/unit/test_additional_agents.py::test_simple_agents_response - Att...\nERROR tests/unit/test_additional_agents.py::test_simple_agents_knowledge_graph\nERROR tests/unit/test_corporate_knowledge_agent.py::test_agent_initialization\nERROR tests/unit/test_corporate_knowledge_agent.py::test_document_ingest - Ty...\nERROR tests/unit/test_corporate_knowledge_agent.py::test_knowledge_query - Ty...\nERROR tests/unit/test_corporate_knowledge_agent.py::test_document_update - Ty...\nERROR tests/unit/test_corporate_knowledge_agent.py::test_unknown_message_type\nERROR tests/unit/test_judge_agent.py::test_judge_evaluates_email - TypeError:...\nERROR tests/unit/test_vertex_email_agent.py::test_send_email - TypeError: Can...\n====== 51 failed, 76 passed, 19 warnings, 125 errors in 76.57s (0:01:16) =======\n",
    "errors": "Exception ignored in: <function AgentRegistry.__del__ at 0x1107b1300>\nTraceback (most recent call last):\n  File \"/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py\", line 410, in __del__\n    asyncio.create_task(self.cleanup())\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py\", line 381, in create_task\n    loop = events.get_running_loop()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\nRuntimeError: no running event loop\nException ignored in: <function AgentRegistry.__del__ at 0x1107b1300>\nTraceback (most recent call last):\n  File \"/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py\", line 410, in __del__\n    asyncio.create_task(self.cleanup())\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py\", line 381, in create_task\n    loop = events.get_running_loop()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\nRuntimeError: no running event loop\nException ignored in: <coroutine object WorkflowNotifier._process_notifications at 0x125a427a0>\nTraceback (most recent call last):\n  File \"/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py\", line 65, in _process_notifications\n    notification = await self._notification_queue.get()\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py\", line 160, in get\n    getter.cancel()  # Just in case getter is not done yet.\n    ^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py\", line 762, in call_soon\n    self._check_closed()\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py\", line 520, in _check_closed\n    raise RuntimeError('Event loop is closed')\nRuntimeError: Event loop is closed\nException ignored in: <coroutine object WorkflowNotifier._process_notifications at 0x302277c40>\nTraceback (most recent call last):\n  File \"/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py\", line 65, in _process_notifications\n    notification = await self._notification_queue.get()\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py\", line 160, in get\n    getter.cancel()  # Just in case getter is not done yet.\n    ^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py\", line 762, in call_soon\n    self._check_closed()\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py\", line 520, in _check_closed\n    raise RuntimeError('Event loop is closed')\nRuntimeError: Event loop is closed\nException ignored in: <function AgentRegistry.__del__ at 0x1107b1300>\nTraceback (most recent call last):\n  File \"/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py\", line 410, in __del__\n    asyncio.create_task(self.cleanup())\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py\", line 381, in create_task\n    loop = events.get_running_loop()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\nRuntimeError: no running event loop\nException ignored in: <coroutine object WorkflowNotifier._process_notifications at 0x302355030>\nTraceback (most recent call last):\n  File \"/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py\", line 65, in _process_notifications\n    notification = await self._notification_queue.get()\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py\", line 160, in get\n    getter.cancel()  # Just in case getter is not done yet.\n    ^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py\", line 762, in call_soon\n    self._check_closed()\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py\", line 520, in _check_closed\n    raise RuntimeError('Event loop is closed')\nRuntimeError: Event loop is closed\nException ignored in: <function AgentRegistry.__del__ at 0x1107b1300>\nTraceback (most recent call last):\n  File \"/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py\", line 410, in __del__\n    asyncio.create_task(self.cleanup())\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py\", line 381, in create_task\n    loop = events.get_running_loop()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\nRuntimeError: no running event loop\nException ignored in: <coroutine object WorkflowNotifier._process_notifications at 0x3023563e0>\nTraceback (most recent call last):\n  File \"/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py\", line 65, in _process_notifications\n    notification = await self._notification_queue.get()\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py\", line 160, in get\n    getter.cancel()  # Just in case getter is not done yet.\n    ^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py\", line 762, in call_soon\n    self._check_closed()\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py\", line 520, in _check_closed\n    raise RuntimeError('Event loop is closed')\nRuntimeError: Event loop is closed\nException ignored in: <function AgentRegistry.__del__ at 0x1107b1300>\nTraceback (most recent call last):\n  File \"/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py\", line 410, in __del__\n    asyncio.create_task(self.cleanup())\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py\", line 381, in create_task\n    loop = events.get_running_loop()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\nRuntimeError: no running event loop\nException ignored in: <coroutine object WorkflowNotifier._process_notifications at 0x304dbf2e0>\nTraceback (most recent call last):\n  File \"/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py\", line 65, in _process_notifications\n    notification = await self._notification_queue.get()\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py\", line 160, in get\n    getter.cancel()  # Just in case getter is not done yet.\n    ^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py\", line 762, in call_soon\n    self._check_closed()\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py\", line 520, in _check_closed\n    raise RuntimeError('Event loop is closed')\nRuntimeError: Event loop is closed\nException ignored in: <function AgentRegistry.__del__ at 0x1107b1300>\nTraceback (most recent call last):\n  File \"/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py\", line 410, in __del__\n    asyncio.create_task(self.cleanup())\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py\", line 381, in create_task\n    loop = events.get_running_loop()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\nRuntimeError: no running event loop\nException ignored in: <coroutine object WorkflowNotifier._process_notifications at 0x3025a75b0>\nTraceback (most recent call last):\n  File \"/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py\", line 65, in _process_notifications\n    notification = await self._notification_queue.get()\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py\", line 160, in get\n    getter.cancel()  # Just in case getter is not done yet.\n    ^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py\", line 762, in call_soon\n    self._check_closed()\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py\", line 520, in _check_closed\n    raise RuntimeError('Event loop is closed')\nRuntimeError: Event loop is closed\nException ignored in: <function AgentRegistry.__del__ at 0x1107b1300>\nTraceback (most recent call last):\n  File \"/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py\", line 410, in __del__\n    asyncio.create_task(self.cleanup())\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py\", line 381, in create_task\n    loop = events.get_running_loop()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\nRuntimeError: no running event loop\nException ignored in: <coroutine object WorkflowNotifier._process_notifications at 0x30236cc70>\nTraceback (most recent call last):\n  File \"/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py\", line 65, in _process_notifications\n    notification = await self._notification_queue.get()\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py\", line 160, in get\n    getter.cancel()  # Just in case getter is not done yet.\n    ^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py\", line 762, in call_soon\n    self._check_closed()\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py\", line 520, in _check_closed\n    raise RuntimeError('Event loop is closed')\nRuntimeError: Event loop is closed\nException ignored in: <function AgentRegistry.__del__ at 0x1107b1300>\nTraceback (most recent call last):\n  File \"/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py\", line 410, in __del__\n    asyncio.create_task(self.cleanup())\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py\", line 381, in create_task\n    loop = events.get_running_loop()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\nRuntimeError: no running event loop\nException ignored in: <coroutine object WorkflowNotifier._process_notifications at 0x30236e5c0>\nTraceback (most recent call last):\n  File \"/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py\", line 65, in _process_notifications\n    notification = await self._notification_queue.get()\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py\", line 160, in get\n    getter.cancel()  # Just in case getter is not done yet.\n    ^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py\", line 762, in call_soon\n    self._check_closed()\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py\", line 520, in _check_closed\n    raise RuntimeError('Event loop is closed')\nRuntimeError: Event loop is closed\nException ignored in: <function AgentRegistry.__del__ at 0x1107b1300>\nTraceback (most recent call last):\n  File \"/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py\", line 410, in __del__\n    asyncio.create_task(self.cleanup())\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py\", line 381, in create_task\n    loop = events.get_running_loop()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\nRuntimeError: no running event loop\nException ignored in: <coroutine object WorkflowNotifier._process_notifications at 0x30236f5b0>\nTraceback (most recent call last):\n  File \"/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py\", line 65, in _process_notifications\n    notification = await self._notification_queue.get()\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py\", line 160, in get\n    getter.cancel()  # Just in case getter is not done yet.\n    ^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py\", line 762, in call_soon\n    self._check_closed()\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py\", line 520, in _check_closed\n    raise RuntimeError('Event loop is closed')\nRuntimeError: Event loop is closed\nException ignored in: <function AgentRegistry.__del__ at 0x1107b1300>\nTraceback (most recent call last):\n  File \"/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py\", line 410, in __del__\n    asyncio.create_task(self.cleanup())\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py\", line 381, in create_task\n    loop = events.get_running_loop()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\nRuntimeError: no running event loop\nException ignored in: <coroutine object WorkflowNotifier._process_notifications at 0x3022774c0>\nTraceback (most recent call last):\n  File \"/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py\", line 65, in _process_notifications\n    notification = await self._notification_queue.get()\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py\", line 160, in get\n    getter.cancel()  # Just in case getter is not done yet.\n    ^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py\", line 762, in call_soon\n    self._check_closed()\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py\", line 520, in _check_closed\n    raise RuntimeError('Event loop is closed')\nRuntimeError: Event loop is closed\nException ignored in: <function AgentRegistry.__del__ at 0x1107b1300>\nTraceback (most recent call last):\n  File \"/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py\", line 410, in __del__\n    asyncio.create_task(self.cleanup())\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/tasks.py\", line 381, in create_task\n    loop = events.get_running_loop()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\nRuntimeError: no running event loop\nException ignored in: <coroutine object WorkflowNotifier._process_notifications at 0x3023575b0>\nTraceback (most recent call last):\n  File \"/Users/nicholasbaro/Python/semant/agents/core/agent_registry.py\", line 65, in _process_notifications\n    notification = await self._notification_queue.get()\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/queues.py\", line 160, in get\n    getter.cancel()  # Just in case getter is not done yet.\n    ^^^^^^^^^^^^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py\", line 762, in call_soon\n    self._check_closed()\n  File \"/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/asyncio/base_events.py\", line 520, in _check_closed\n    raise RuntimeError('Event loop is closed')\nRuntimeError: Event loop is closed\n"
  },
  "code_quality": {
    "flake8": {
      "success": false,
      "output": "agents/core/agent_factory.py:1:1: F401 'typing.Any' imported but unused\nagents/core/agent_factory.py:1:1: F401 'typing.Union' imported but unused\nagents/core/agent_factory.py:3:1: F401 'agents.core.base_agent.AgentStatus' imported but unused\nagents/core/agent_factory.py:4:1: F401 'agents.core.capability_types.CapabilitySet' imported but unused\nagents/core/agent_factory.py:4:80: E501 line too long (82 > 79 characters)\nagents/core/agent_factory.py:9:1: F401 'rdflib.BNode' imported but unused\nagents/core/agent_factory.py:10:1: F401 'rdflib.namespace.RDFS' imported but unused\nagents/core/agent_factory.py:14:1: E302 expected 2 blank lines, found 1\nagents/core/agent_factory.py:16:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:17:80: E501 line too long (106 > 79 characters)\nagents/core/agent_factory.py:24:80: E501 line too long (94 > 79 characters)\nagents/core/agent_factory.py:37:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:41:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:46:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:48:80: E501 line too long (88 > 79 characters)\nagents/core/agent_factory.py:50:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:54:80: E501 line too long (81 > 79 characters)\nagents/core/agent_factory.py:60:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:63:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:66:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:72:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:75:53: W291 trailing whitespace\nagents/core/agent_factory.py:76:13: E129 visually indented line with same indent as next logical line\nagents/core/agent_factory.py:76:80: E501 line too long (106 > 79 characters)\nagents/core/agent_factory.py:78:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:81:80: E501 line too long (87 > 79 characters)\nagents/core/agent_factory.py:86:80: E501 line too long (91 > 79 characters)\nagents/core/agent_factory.py:97:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:100:80: E501 line too long (88 > 79 characters)\nagents/core/agent_factory.py:101:80: E501 line too long (92 > 79 characters)\nagents/core/agent_factory.py:103:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:106:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:113:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:117:80: E501 line too long (84 > 79 characters)\nagents/core/agent_factory.py:120:80: E501 line too long (99 > 79 characters)\nagents/core/agent_factory.py:128:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:131:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:134:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:139:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:143:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:147:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:148:80: E501 line too long (124 > 79 characters)\nagents/core/agent_factory.py:150:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:152:80: E501 line too long (87 > 79 characters)\nagents/core/agent_factory.py:161:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:165:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:171:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:176:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:183:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:188:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:194:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:198:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:201:80: E501 line too long (93 > 79 characters)\nagents/core/agent_factory.py:202:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:203:80: E501 line too long (98 > 79 characters)\nagents/core/agent_factory.py:205:80: E501 line too long (94 > 79 characters)\nagents/core/agent_factory.py:219:80: E501 line too long (83 > 79 characters)\nagents/core/agent_factory.py:231:80: E501 line too long (101 > 79 characters)\nagents/core/agent_factory.py:232:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:237:80: E501 line too long (121 > 79 characters)\nagents/core/agent_factory.py:239:80: E501 line too long (95 > 79 characters)\nagents/core/agent_factory.py:240:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:253:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:256:80: E501 line too long (83 > 79 characters)\nagents/core/agent_factory.py:257:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:260:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:265:80: E501 line too long (117 > 79 characters)\nagents/core/agent_factory.py:266:80: E501 line too long (101 > 79 characters)\nagents/core/agent_factory.py:267:80: E501 line too long (91 > 79 characters)\nagents/core/agent_factory.py:269:80: E501 line too long (117 > 79 characters)\nagents/core/agent_factory.py:270:80: E501 line too long (114 > 79 characters)\nagents/core/agent_factory.py:271:80: E501 line too long (104 > 79 characters)\nagents/core/agent_factory.py:272:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:274:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:284:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:285:80: E501 line too long (108 > 79 characters)\nagents/core/agent_factory.py:286:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:288:80: E501 line too long (104 > 79 characters)\nagents/core/agent_factory.py:289:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:292:80: E501 line too long (90 > 79 characters)\nagents/core/agent_factory.py:294:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:296:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:304:1: W293 blank line contains whitespace\nagents/core/agent_factory.py:310:80: E501 line too long (84 > 79 characters)\nagents/core/agent_factory.py:310:85: W291 trailing whitespace\nagents/core/agent_factory.py:310:86: W292 no newline at end of file\nagents/core/agent_health.py:6:1: F401 'datetime.datetime' imported but unused\nagents/core/agent_health.py:6:1: F401 'datetime.timedelta' imported but unused\nagents/core/agent_health.py:7:1: F401 '.base_agent.AgentStatus' imported but unused\nagents/core/agent_health.py:9:1: E302 expected 2 blank lines, found 1\nagents/core/agent_health.py:21:1: E302 expected 2 blank lines, found 1\nagents/core/agent_health.py:23:1: W293 blank line contains whitespace\nagents/core/agent_health.py:30:1: W293 blank line contains whitespace\nagents/core/agent_health.py:37:1: W293 blank line contains whitespace\nagents/core/agent_health.py:40:1: W293 blank line contains whitespace\nagents/core/agent_health.py:52:1: W293 blank line contains whitespace\nagents/core/agent_health.py:55:1: W293 blank line contains whitespace\nagents/core/agent_health.py:57:1: W293 blank line contains whitespace\nagents/core/agent_health.py:59:80: E501 line too long (85 > 79 characters)\nagents/core/agent_health.py:70:1: W293 blank line contains whitespace\nagents/core/agent_health.py:73:1: W293 blank line contains whitespace\nagents/core/agent_health.py:75:1: W293 blank line contains whitespace\nagents/core/agent_health.py:80:1: W293 blank line contains whitespace\nagents/core/agent_health.py:85:1: W293 blank line contains whitespace\nagents/core/agent_health.py:94:5: E129 visually indented line with same indent as next logical line\nagents/core/agent_health.py:94:80: E501 line too long (95 > 79 characters)\nagents/core/agent_health.py:96:1: W293 blank line contains whitespace\nagents/core/agent_health.py:98:1: W293 blank line contains whitespace\nagents/core/agent_health.py:106:1: W293 blank line contains whitespace\nagents/core/agent_health.py:112:22: E127 continuation line over-indented for visual indent\nagents/core/agent_health.py:113:22: E127 continuation line over-indented for visual indent\nagents/core/agent_health.py:114:22: E127 continuation line over-indented for visual indent\nagents/core/agent_health.py:115:22: E127 continuation line over-indented for visual indent\nagents/core/agent_health.py:116:22: E127 continuation line over-indented for visual indent\nagents/core/agent_health.py:116:80: E501 line too long (81 > 79 characters)\nagents/core/agent_health.py:120:1: W293 blank line contains whitespace\nagents/core/agent_health.py:127:10: W291 trailing whitespace\nagents/core/agent_health.py:127:11: W292 no newline at end of file\nagents/core/agent_integrator.py:7:1: E302 expected 2 blank lines, found 1\nagents/core/agent_integrator.py:9:1: W293 blank line contains whitespace\nagents/core/agent_integrator.py:15:1: W293 blank line contains whitespace\nagents/core/agent_integrator.py:24:1: W293 blank line contains whitespace\nagents/core/agent_integrator.py:33:1: W293 blank line contains whitespace\nagents/core/agent_integrator.py:37:80: E501 line too long (90 > 79 characters)\nagents/core/agent_integrator.py:48:80: E501 line too long (108 > 79 characters)\nagents/core/agent_integrator.py:49:80: E501 line too long (97 > 79 characters)\nagents/core/agent_integrator.py:50:80: E501 line too long (122 > 79 characters)\nagents/core/agent_integrator.py:54:1: W293 blank line contains whitespace\nagents/core/agent_integrator.py:69:1: W293 blank line contains whitespace\nagents/core/agent_integrator.py:70:80: E501 line too long (83 > 79 characters)\nagents/core/agent_integrator.py:84:1: W293 blank line contains whitespace\nagents/core/agent_integrator.py:88:1: W293 blank line contains whitespace\nagents/core/agent_integrator.py:92:1: W293 blank line contains whitespace\nagents/core/agent_integrator.py:96:1: W293 blank line contains whitespace\nagents/core/agent_integrator.py:97:80: E501 line too long (87 > 79 characters)\nagents/core/agent_integrator.py:109:18: W291 trailing whitespace\nagents/core/agent_integrator.py:109:19: W292 no newline at end of file\nagents/core/agent_message.py:5:1: E302 expected 2 blank lines, found 1\nagents/core/agent_message.py:36:10: W291 trailing whitespace\nagents/core/agent_message.py:36:11: W292 no newline at end of file\nagents/core/agent_registry.py:1:1: F401 'typing.Type' imported but unused\nagents/core/agent_registry.py:1:1: F401 'typing.Union' imported but unused\nagents/core/agent_registry.py:4:1: F401 'agents.core.capability_types.CapabilitySet' imported but unused\nagents/core/agent_registry.py:4:80: E501 line too long (82 > 79 characters)\nagents/core/agent_registry.py:5:1: F401 'agents.core.recovery_strategies.TimeoutRecoveryStrategy' imported but unused\nagents/core/agent_registry.py:5:80: E501 line too long (92 > 79 characters)\nagents/core/agent_registry.py:9:1: F401 'yaml' imported but unused\nagents/core/agent_registry.py:10:1: F401 'pathlib.Path' imported but unused\nagents/core/agent_registry.py:11:1: F401 'sys' imported but unused\nagents/core/agent_registry.py:16:1: F401 'time' imported but unused\nagents/core/agent_registry.py:20:1: E302 expected 2 blank lines, found 1\nagents/core/agent_registry.py:22:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:27:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:32:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:34:80: E501 line too long (96 > 79 characters)\nagents/core/agent_registry.py:38:1: E302 expected 2 blank lines, found 1\nagents/core/agent_registry.py:40:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:47:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:53:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:57:80: E501 line too long (85 > 79 characters)\nagents/core/agent_registry.py:60:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:70:80: E501 line too long (80 > 79 characters)\nagents/core/agent_registry.py:83:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:88:9: F841 local variable 'timestamp' is assigned to but never used\nagents/core/agent_registry.py:89:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:91:80: E501 line too long (91 > 79 characters)\nagents/core/agent_registry.py:93:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:98:80: E501 line too long (88 > 79 characters)\nagents/core/agent_registry.py:105:80: E501 line too long (85 > 79 characters)\nagents/core/agent_registry.py:107:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:118:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:127:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:128:80: E501 line too long (80 > 79 characters)\nagents/core/agent_registry.py:132:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:135:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:143:80: E501 line too long (83 > 79 characters)\nagents/core/agent_registry.py:144:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:159:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:174:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:182:80: E501 line too long (81 > 79 characters)\nagents/core/agent_registry.py:183:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:188:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:190:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:191:80: E501 line too long (97 > 79 characters)\nagents/core/agent_registry.py:195:80: E501 line too long (97 > 79 characters)\nagents/core/agent_registry.py:196:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:203:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:214:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:217:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:224:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:229:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:235:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:236:80: E501 line too long (94 > 79 characters)\nagents/core/agent_registry.py:237:80: E501 line too long (94 > 79 characters)\nagents/core/agent_registry.py:238:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:242:80: E501 line too long (84 > 79 characters)\nagents/core/agent_registry.py:244:80: E501 line too long (92 > 79 characters)\nagents/core/agent_registry.py:245:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:246:80: E501 line too long (92 > 79 characters)\nagents/core/agent_registry.py:249:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:250:80: E501 line too long (100 > 79 characters)\nagents/core/agent_registry.py:257:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:262:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:264:80: E501 line too long (80 > 79 characters)\nagents/core/agent_registry.py:267:80: E501 line too long (104 > 79 characters)\nagents/core/agent_registry.py:269:80: E501 line too long (110 > 79 characters)\nagents/core/agent_registry.py:280:80: E501 line too long (83 > 79 characters)\nagents/core/agent_registry.py:293:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:298:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:314:1: E302 expected 2 blank lines, found 1\nagents/core/agent_registry.py:316:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:322:80: E501 line too long (84 > 79 characters)\nagents/core/agent_registry.py:328:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:338:80: E501 line too long (88 > 79 characters)\nagents/core/agent_registry.py:339:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:342:80: E501 line too long (99 > 79 characters)\nagents/core/agent_registry.py:346:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:349:65: W291 trailing whitespace\nagents/core/agent_registry.py:350:71: W291 trailing whitespace\nagents/core/agent_registry.py:351:5: E129 visually indented line with same indent as next logical line\nagents/core/agent_registry.py:353:80: E501 line too long (91 > 79 characters)\nagents/core/agent_registry.py:356:80: E501 line too long (85 > 79 characters)\nagents/core/agent_registry.py:357:80: E501 line too long (86 > 79 characters)\nagents/core/agent_registry.py:358:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:360:80: E501 line too long (101 > 79 characters)\nagents/core/agent_registry.py:361:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:365:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:370:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:374:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:378:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:381:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:384:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:388:80: E501 line too long (82 > 79 characters)\nagents/core/agent_registry.py:391:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:406:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:411:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:416:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:417:80: E501 line too long (92 > 79 characters)\nagents/core/agent_registry.py:419:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:423:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:448:80: E501 line too long (99 > 79 characters)\nagents/core/agent_registry.py:458:80: E501 line too long (80 > 79 characters)\nagents/core/agent_registry.py:459:80: E501 line too long (86 > 79 characters)\nagents/core/agent_registry.py:460:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:463:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:466:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:472:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:476:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:484:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:487:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:493:80: E501 line too long (99 > 79 characters)\nagents/core/agent_registry.py:494:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:497:80: E501 line too long (81 > 79 characters)\nagents/core/agent_registry.py:499:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:500:80: E501 line too long (97 > 79 characters)\nagents/core/agent_registry.py:502:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:505:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:511:80: E501 line too long (97 > 79 characters)\nagents/core/agent_registry.py:512:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:515:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:518:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:521:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:527:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:530:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:537:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:541:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:547:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:552:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:559:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:564:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:570:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:574:80: E501 line too long (88 > 79 characters)\nagents/core/agent_registry.py:576:80: E501 line too long (96 > 79 characters)\nagents/core/agent_registry.py:577:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:578:80: E501 line too long (98 > 79 characters)\nagents/core/agent_registry.py:580:80: E501 line too long (94 > 79 characters)\nagents/core/agent_registry.py:582:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:583:80: E501 line too long (100 > 79 characters)\nagents/core/agent_registry.py:585:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:588:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:593:80: E501 line too long (96 > 79 characters)\nagents/core/agent_registry.py:600:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:607:80: E501 line too long (92 > 79 characters)\nagents/core/agent_registry.py:608:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:610:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:617:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:621:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:626:80: E501 line too long (81 > 79 characters)\nagents/core/agent_registry.py:627:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:634:80: E501 line too long (99 > 79 characters)\nagents/core/agent_registry.py:635:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:637:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:640:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:643:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:653:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:660:80: E501 line too long (107 > 79 characters)\nagents/core/agent_registry.py:662:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:665:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:673:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:676:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:679:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:684:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:687:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:690:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:693:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:699:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:705:80: E501 line too long (88 > 79 characters)\nagents/core/agent_registry.py:707:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:708:80: E501 line too long (83 > 79 characters)\nagents/core/agent_registry.py:710:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:713:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:725:80: E501 line too long (92 > 79 characters)\nagents/core/agent_registry.py:726:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:728:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:731:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:737:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:740:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:746:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:757:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:765:80: E501 line too long (88 > 79 characters)\nagents/core/agent_registry.py:766:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:772:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:773:80: E501 line too long (86 > 79 characters)\nagents/core/agent_registry.py:775:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:779:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:784:80: E501 line too long (80 > 79 characters)\nagents/core/agent_registry.py:786:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:790:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:794:80: E501 line too long (92 > 79 characters)\nagents/core/agent_registry.py:796:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:799:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:801:80: E501 line too long (86 > 79 characters)\nagents/core/agent_registry.py:802:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:804:80: E501 line too long (80 > 79 characters)\nagents/core/agent_registry.py:807:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:812:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:815:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:819:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:825:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:831:80: E501 line too long (82 > 79 characters)\nagents/core/agent_registry.py:835:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:838:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:843:80: E501 line too long (99 > 79 characters)\nagents/core/agent_registry.py:844:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:845:80: E501 line too long (80 > 79 characters)\nagents/core/agent_registry.py:847:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:853:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:856:1: W293 blank line contains whitespace\nagents/core/agent_registry.py:863:80: E501 line too long (80 > 79 characters)\nagents/core/agent_registry.py:865:80: E501 line too long (82 > 79 characters)\nagents/core/agent_registry.py:872:73: W291 trailing whitespace\nagents/core/agent_registry.py:872:74: W292 no newline at end of file\nagents/core/agentic_prompt_agent.py:4:1: F401 'loguru.logger' imported but unused\nagents/core/agentic_prompt_agent.py:5:1: F401 'asyncio' imported but unused\nagents/core/agentic_prompt_agent.py:11:1: E302 expected 2 blank lines, found 1\nagents/core/agentic_prompt_agent.py:14:80: E501 line too long (90 > 79 characters)\nagents/core/agentic_prompt_agent.py:16:1: W293 blank line contains whitespace\nagents/core/agentic_prompt_agent.py:36:80: E501 line too long (89 > 79 characters)\nagents/core/agentic_prompt_agent.py:40:80: E501 line too long (94 > 79 characters)\nagents/core/agentic_prompt_agent.py:41:1: W293 blank line contains whitespace\nagents/core/agentic_prompt_agent.py:46:1: W293 blank line contains whitespace\nagents/core/agentic_prompt_agent.py:56:1: W293 blank line contains whitespace\nagents/core/agentic_prompt_agent.py:77:1: W293 blank line contains whitespace\nagents/core/agentic_prompt_agent.py:78:80: E501 line too long (82 > 79 characters)\nagents/core/agentic_prompt_agent.py:84:1: W293 blank line contains whitespace\nagents/core/agentic_prompt_agent.py:87:1: W293 blank line contains whitespace\nagents/core/agentic_prompt_agent.py:89:80: E501 line too long (81 > 79 characters)\nagents/core/agentic_prompt_agent.py:90:1: W293 blank line contains whitespace\nagents/core/agentic_prompt_agent.py:99:1: W293 blank line contains whitespace\nagents/core/agentic_prompt_agent.py:111:80: E501 line too long (86 > 79 characters)\nagents/core/agentic_prompt_agent.py:120:1: W293 blank line contains whitespace\nagents/core/agentic_prompt_agent.py:131:1: W293 blank line contains whitespace\nagents/core/agentic_prompt_agent.py:132:80: E501 line too long (82 > 79 characters)\nagents/core/agentic_prompt_agent.py:137:1: W293 blank line contains whitespace\nagents/core/agentic_prompt_agent.py:140:1: W293 blank line contains whitespace\nagents/core/agentic_prompt_agent.py:147:1: W293 blank line contains whitespace\nagents/core/agentic_prompt_agent.py:149:80: E501 line too long (84 > 79 characters)\nagents/core/agentic_prompt_agent.py:150:1: W293 blank line contains whitespace\nagents/core/agentic_prompt_agent.py:159:1: W293 blank line contains whitespace\nagents/core/agentic_prompt_agent.py:170:1: W293 blank line contains whitespace\nagents/core/agentic_prompt_agent.py:171:80: E501 line too long (84 > 79 characters)\nagents/core/agentic_prompt_agent.py:177:1: W293 blank line contains whitespace\nagents/core/agentic_prompt_agent.py:181:1: W293 blank line contains whitespace\nagents/core/agentic_prompt_agent.py:192:1: W293 blank line contains whitespace\nagents/core/agentic_prompt_agent.py:207:1: W293 blank line contains whitespace\nagents/core/agentic_prompt_agent.py:224:80: E501 line too long (82 > 79 characters)\nagents/core/agentic_prompt_agent.py:227:1: W293 blank line contains whitespace\nagents/core/agentic_prompt_agent.py:229:1: W293 blank line contains whitespace\nagents/core/agentic_prompt_agent.py:241:1: W293 blank line contains whitespace\nagents/core/agentic_prompt_agent.py:246:1: W293 blank line contains whitespace\nagents/core/agentic_prompt_agent.py:250:1: W293 blank line contains whitespace\nagents/core/agentic_prompt_agent.py:252:1: W293 blank line contains whitespace\nagents/core/agentic_prompt_agent.py:253:80: E501 line too long (80 > 79 characters)\nagents/core/agentic_prompt_agent.py:257:1: W293 blank line contains whitespace\nagents/core/agentic_prompt_agent.py:258:80: E501 line too long (83 > 79 characters)\nagents/core/agentic_prompt_agent.py:262:79: W291 trailing whitespace\nagents/core/agentic_prompt_agent.py:262:80: W292 no newline at end of file\nagents/core/base_agent.py:3:1: F401 'pydantic.BaseModel' imported but unused\nagents/core/base_agent.py:6:1: F401 'rdflib.BNode' imported but unused\nagents/core/base_agent.py:7:1: F401 'rdflib.namespace.RDF' imported but unused\nagents/core/base_agent.py:10:1: F401 'datetime.datetime' imported but unused\nagents/core/base_agent.py:11:1: F401 'dataclasses.dataclass' imported but unused\nagents/core/base_agent.py:14:80: E501 line too long (82 > 79 characters)\nagents/core/base_agent.py:18:1: E302 expected 2 blank lines, found 1\nagents/core/base_agent.py:25:1: E302 expected 2 blank lines, found 1\nagents/core/base_agent.py:27:1: W293 blank line contains whitespace\nagents/core/base_agent.py:43:1: E302 expected 2 blank lines, found 1\nagents/core/base_agent.py:45:1: W293 blank line contains whitespace\nagents/core/base_agent.py:56:1: W293 blank line contains whitespace\nagents/core/base_agent.py:69:1: W293 blank line contains whitespace\nagents/core/base_agent.py:74:1: W293 blank line contains whitespace\nagents/core/base_agent.py:78:1: W293 blank line contains whitespace\nagents/core/base_agent.py:82:1: W293 blank line contains whitespace\nagents/core/base_agent.py:86:80: E501 line too long (101 > 79 characters)\nagents/core/base_agent.py:87:1: W293 blank line contains whitespace\nagents/core/base_agent.py:89:80: E501 line too long (88 > 79 characters)\nagents/core/base_agent.py:91:1: W293 blank line contains whitespace\nagents/core/base_agent.py:93:80: E501 line too long (122 > 79 characters)\nagents/core/base_agent.py:95:80: E501 line too long (90 > 79 characters)\nagents/core/base_agent.py:98:1: W293 blank line contains whitespace\nagents/core/base_agent.py:101:1: W293 blank line contains whitespace\nagents/core/base_agent.py:104:1: W293 blank line contains whitespace\nagents/core/base_agent.py:109:80: E501 line too long (81 > 79 characters)\nagents/core/base_agent.py:110:1: W293 blank line contains whitespace\nagents/core/base_agent.py:115:80: E501 line too long (96 > 79 characters)\nagents/core/base_agent.py:117:1: W293 blank line contains whitespace\nagents/core/base_agent.py:120:1: W293 blank line contains whitespace\nagents/core/base_agent.py:123:1: W293 blank line contains whitespace\nagents/core/base_agent.py:128:80: E501 line too long (81 > 79 characters)\nagents/core/base_agent.py:129:1: W293 blank line contains whitespace\nagents/core/base_agent.py:133:80: E501 line too long (92 > 79 characters)\nagents/core/base_agent.py:135:80: E501 line too long (106 > 79 characters)\nagents/core/base_agent.py:137:1: W293 blank line contains whitespace\nagents/core/base_agent.py:140:1: W293 blank line contains whitespace\nagents/core/base_agent.py:143:1: W293 blank line contains whitespace\nagents/core/base_agent.py:148:80: E501 line too long (81 > 79 characters)\nagents/core/base_agent.py:149:1: W293 blank line contains whitespace\nagents/core/base_agent.py:153:80: E501 line too long (96 > 79 characters)\nagents/core/base_agent.py:155:80: E501 line too long (111 > 79 characters)\nagents/core/base_agent.py:157:1: W293 blank line contains whitespace\nagents/core/base_agent.py:158:80: E501 line too long (90 > 79 characters)\nagents/core/base_agent.py:160:1: W293 blank line contains whitespace\nagents/core/base_agent.py:162:80: E501 line too long (82 > 79 characters)\nagents/core/base_agent.py:163:1: W293 blank line contains whitespace\nagents/core/base_agent.py:166:1: W293 blank line contains whitespace\nagents/core/base_agent.py:169:80: E501 line too long (88 > 79 characters)\nagents/core/base_agent.py:172:80: E501 line too long (81 > 79 characters)\nagents/core/base_agent.py:173:1: W293 blank line contains whitespace\nagents/core/base_agent.py:180:80: E501 line too long (101 > 79 characters)\nagents/core/base_agent.py:181:1: W293 blank line contains whitespace\nagents/core/base_agent.py:184:80: E501 line too long (109 > 79 characters)\nagents/core/base_agent.py:186:1: W293 blank line contains whitespace\nagents/core/base_agent.py:187:80: E501 line too long (92 > 79 characters)\nagents/core/base_agent.py:189:1: W293 blank line contains whitespace\nagents/core/base_agent.py:192:1: W293 blank line contains whitespace\nagents/core/base_agent.py:195:1: W293 blank line contains whitespace\nagents/core/base_agent.py:201:80: E501 line too long (81 > 79 characters)\nagents/core/base_agent.py:202:1: W293 blank line contains whitespace\nagents/core/base_agent.py:207:80: E501 line too long (120 > 79 characters)\nagents/core/base_agent.py:209:1: W293 blank line contains whitespace\nagents/core/base_agent.py:210:80: E501 line too long (97 > 79 characters)\nagents/core/base_agent.py:212:1: W293 blank line contains whitespace\nagents/core/base_agent.py:215:1: W293 blank line contains whitespace\nagents/core/base_agent.py:218:1: W293 blank line contains whitespace\nagents/core/base_agent.py:224:80: E501 line too long (81 > 79 characters)\nagents/core/base_agent.py:225:1: W293 blank line contains whitespace\nagents/core/base_agent.py:228:80: E501 line too long (89 > 79 characters)\nagents/core/base_agent.py:230:80: E501 line too long (122 > 79 characters)\nagents/core/base_agent.py:232:1: W293 blank line contains whitespace\nagents/core/base_agent.py:236:1: W293 blank line contains whitespace\nagents/core/base_agent.py:239:1: W293 blank line contains whitespace\nagents/core/base_agent.py:242:1: W293 blank line contains whitespace\nagents/core/base_agent.py:247:80: E501 line too long (81 > 79 characters)\nagents/core/base_agent.py:248:1: W293 blank line contains whitespace\nagents/core/base_agent.py:253:1: W293 blank line contains whitespace\nagents/core/base_agent.py:256:1: W293 blank line contains whitespace\nagents/core/base_agent.py:259:1: W293 blank line contains whitespace\nagents/core/base_agent.py:262:1: W293 blank line contains whitespace\nagents/core/base_agent.py:265:80: E501 line too long (95 > 79 characters)\nagents/core/base_agent.py:268:1: W293 blank line contains whitespace\nagents/core/base_agent.py:270:80: E501 line too long (81 > 79 characters)\nagents/core/base_agent.py:272:1: W293 blank line contains whitespace\nagents/core/base_agent.py:275:1: W293 blank line contains whitespace\nagents/core/base_agent.py:280:1: W293 blank line contains whitespace\nagents/core/base_agent.py:281:80: E501 line too long (80 > 79 characters)\nagents/core/base_agent.py:283:1: W293 blank line contains whitespace\nagents/core/base_agent.py:286:1: W293 blank line contains whitespace\nagents/core/base_agent.py:288:80: E501 line too long (94 > 79 characters)\nagents/core/base_agent.py:291:80: E501 line too long (81 > 79 characters)\nagents/core/base_agent.py:292:1: W293 blank line contains whitespace\nagents/core/base_agent.py:295:1: W293 blank line contains whitespace\nagents/core/base_agent.py:302:80: E501 line too long (95 > 79 characters)\nagents/core/base_agent.py:313:80: E501 line too long (91 > 79 characters)\nagents/core/base_agent.py:314:1: W293 blank line contains whitespace\nagents/core/base_agent.py:315:80: E501 line too long (87 > 79 characters)\nagents/core/base_agent.py:317:80: E501 line too long (102 > 79 characters)\nagents/core/base_agent.py:319:1: W293 blank line contains whitespace\nagents/core/base_agent.py:320:80: E501 line too long (83 > 79 characters)\nagents/core/base_agent.py:322:1: W293 blank line contains whitespace\nagents/core/base_agent.py:325:1: W293 blank line contains whitespace\nagents/core/base_agent.py:328:1: W293 blank line contains whitespace\nagents/core/base_agent.py:330:80: E501 line too long (94 > 79 characters)\nagents/core/base_agent.py:333:80: E501 line too long (81 > 79 characters)\nagents/core/base_agent.py:334:1: W293 blank line contains whitespace\nagents/core/base_agent.py:337:1: W293 blank line contains whitespace\nagents/core/base_agent.py:343:80: E501 line too long (83 > 79 characters)\nagents/core/base_agent.py:355:80: E501 line too long (103 > 79 characters)\nagents/core/base_agent.py:357:80: E501 line too long (104 > 79 characters)\nagents/core/base_agent.py:359:80: E501 line too long (95 > 79 characters)\nagents/core/base_agent.py:361:80: E501 line too long (85 > 79 characters)\nagents/core/base_agent.py:362:1: W293 blank line contains whitespace\nagents/core/base_agent.py:363:80: E501 line too long (89 > 79 characters)\nagents/core/base_agent.py:365:80: E501 line too long (101 > 79 characters)\nagents/core/base_agent.py:367:1: W293 blank line contains whitespace\nagents/core/base_agent.py:370:1: W293 blank line contains whitespace\nagents/core/base_agent.py:379:80: E501 line too long (81 > 79 characters)\nagents/core/base_agent.py:380:1: W293 blank line contains whitespace\nagents/core/base_agent.py:387:80: E501 line too long (109 > 79 characters)\nagents/core/base_agent.py:390:80: E501 line too long (90 > 79 characters)\nagents/core/base_agent.py:392:1: W293 blank line contains whitespace\nagents/core/base_agent.py:399:80: E501 line too long (89 > 79 characters)\nagents/core/base_agent.py:401:1: W293 blank line contains whitespace\nagents/core/base_agent.py:404:1: W293 blank line contains whitespace\nagents/core/base_agent.py:407:1: W293 blank line contains whitespace\nagents/core/base_agent.py:411:80: E501 line too long (84 > 79 characters)\nagents/core/base_agent.py:413:1: W293 blank line contains whitespace\nagents/core/base_agent.py:420:80: E501 line too long (85 > 79 characters)\nagents/core/base_agent.py:422:1: W293 blank line contains whitespace\nagents/core/base_agent.py:425:1: W293 blank line contains whitespace\nagents/core/base_agent.py:429:40: W291 trailing whitespace\nagents/core/base_agent.py:429:41: W292 no newline at end of file\nagents/core/capability_types.py:1:1: F401 'typing.List' imported but unused\nagents/core/capability_types.py:5:1: F401 'collections.defaultdict' imported but unused\nagents/core/capability_types.py:8:1: E302 expected 2 blank lines, found 1\nagents/core/capability_types.py:10:1: W293 blank line contains whitespace\nagents/core/capability_types.py:17:1: W293 blank line contains whitespace\nagents/core/capability_types.py:24:1: W293 blank line contains whitespace\nagents/core/capability_types.py:29:1: W293 blank line contains whitespace\nagents/core/capability_types.py:38:1: W293 blank line contains whitespace\nagents/core/capability_types.py:49:1: W293 blank line contains whitespace\nagents/core/capability_types.py:59:1: W293 blank line contains whitespace\nagents/core/capability_types.py:62:1: W293 blank line contains whitespace\nagents/core/capability_types.py:65:1: W293 blank line contains whitespace\nagents/core/capability_types.py:76:1: W293 blank line contains whitespace\nagents/core/capability_types.py:89:1: E302 expected 2 blank lines, found 1\nagents/core/capability_types.py:113:80: E501 line too long (132 > 79 characters)\nagents/core/capability_types.py:115:1: E302 expected 2 blank lines, found 1\nagents/core/capability_types.py:117:1: W293 blank line contains whitespace\nagents/core/capability_types.py:123:1: W293 blank line contains whitespace\nagents/core/capability_types.py:129:1: W293 blank line contains whitespace\nagents/core/capability_types.py:132:1: W293 blank line contains whitespace\nagents/core/capability_types.py:133:80: E501 line too long (88 > 79 characters)\nagents/core/capability_types.py:137:80: E501 line too long (89 > 79 characters)\nagents/core/capability_types.py:139:1: W293 blank line contains whitespace\nagents/core/capability_types.py:143:80: E501 line too long (89 > 79 characters)\nagents/core/capability_types.py:146:1: W293 blank line contains whitespace\nagents/core/capability_types.py:150:80: E501 line too long (89 > 79 characters)\nagents/core/capability_types.py:151:1: W293 blank line contains whitespace\nagents/core/capability_types.py:154:1: W293 blank line contains whitespace\nagents/core/capability_types.py:157:80: E501 line too long (85 > 79 characters)\nagents/core/capability_types.py:158:1: W293 blank line contains whitespace\nagents/core/capability_types.py:162:80: E501 line too long (89 > 79 characters)\nagents/core/capability_types.py:163:1: W293 blank line contains whitespace\nagents/core/capability_types.py:166:1: W293 blank line contains whitespace\nagents/core/capability_types.py:170:80: E501 line too long (89 > 79 characters)\nagents/core/capability_types.py:171:1: W293 blank line contains whitespace\nagents/core/capability_types.py:174:1: W293 blank line contains whitespace\nagents/core/capability_types.py:178:80: E501 line too long (89 > 79 characters)\nagents/core/capability_types.py:179:1: W293 blank line contains whitespace\nagents/core/capability_types.py:182:1: W293 blank line contains whitespace\nagents/core/capability_types.py:186:1: W293 blank line contains whitespace\nagents/core/capability_types.py:191:80: E501 line too long (97 > 79 characters)\nagents/core/capability_types.py:194:80: E501 line too long (89 > 79 characters)\nagents/core/capability_types.py:195:1: W293 blank line contains whitespace\nagents/core/capability_types.py:197:80: E501 line too long (84 > 79 characters)\nagents/core/capability_types.py:198:1: W293 blank line contains whitespace\nagents/core/capability_types.py:201:80: E501 line too long (89 > 79 characters)\nagents/core/capability_types.py:203:80: E501 line too long (91 > 79 characters)\nagents/core/capability_types.py:205:1: W293 blank line contains whitespace\nagents/core/capability_types.py:206:80: E501 line too long (92 > 79 characters)\nagents/core/capability_types.py:209:80: E501 line too long (89 > 79 characters)\nagents/core/capability_types.py:210:1: W293 blank line contains whitespace\nagents/core/capability_types.py:212:80: E501 line too long (84 > 79 characters)\nagents/core/capability_types.py:213:1: W293 blank line contains whitespace\nagents/core/capability_types.py:221:80: E501 line too long (89 > 79 characters)\nagents/core/capability_types.py:223:1: W293 blank line contains whitespace\nagents/core/capability_types.py:224:80: E501 line too long (107 > 79 characters)\nagents/core/capability_types.py:227:80: E501 line too long (89 > 79 characters)\nagents/core/capability_types.py:228:1: W293 blank line contains whitespace\nagents/core/capability_types.py:230:80: E501 line too long (84 > 79 characters)\nagents/core/capability_types.py:231:1: W293 blank line contains whitespace\nagents/core/capability_types.py:237:80: E501 line too long (92 > 79 characters)\nagents/core/capability_types.py:239:80: E501 line too long (80 > 79 characters)\nagents/core/capability_types.py:241:80: E501 line too long (104 > 79 characters)\nagents/core/capability_types.py:243:1: W293 blank line contains whitespace\nagents/core/capability_types.py:244:80: E501 line too long (103 > 79 characters)\nagents/core/capability_types.py:247:80: E501 line too long (89 > 79 characters)\nagents/core/capability_types.py:248:1: W293 blank line contains whitespace\nagents/core/capability_types.py:250:80: E501 line too long (84 > 79 characters)\nagents/core/capability_types.py:251:1: W293 blank line contains whitespace\nagents/core/capability_types.py:257:80: E501 line too long (90 > 79 characters)\nagents/core/capability_types.py:259:80: E501 line too long (80 > 79 characters)\nagents/core/capability_types.py:261:80: E501 line too long (102 > 79 characters)\nagents/core/capability_types.py:263:1: W293 blank line contains whitespace\nagents/core/capability_types.py:267:80: E501 line too long (89 > 79 characters)\nagents/core/capability_types.py:268:1: W293 blank line contains whitespace\nagents/core/capability_types.py:276:1: W293 blank line contains whitespace\nagents/core/capability_types.py:286:1: W293 blank line contains whitespace\nagents/core/capability_types.py:289:67: W291 trailing whitespace\nagents/core/capability_types.py:289:68: W292 no newline at end of file\nagents/core/data_processor_agent.py:4:1: E302 expected 2 blank lines, found 1\nagents/core/data_processor_agent.py:9:80: E501 line too long (146 > 79 characters)\nagents/core/data_processor_agent.py:49:80: E501 line too long (82 > 79 characters)\nagents/core/data_processor_agent.py:58:18: W291 trailing whitespace\nagents/core/data_processor_agent.py:58:19: W292 no newline at end of file\nagents/core/feature_z_agent.py:4:1: E302 expected 2 blank lines, found 1\nagents/core/feature_z_agent.py:9:80: E501 line too long (141 > 79 characters)\nagents/core/feature_z_agent.py:48:13: W291 trailing whitespace\nagents/core/feature_z_agent.py:48:14: W292 no newline at end of file\nagents/core/multi_agent.py:7:1: E302 expected 2 blank lines, found 1\nagents/core/multi_agent.py:8:80: E501 line too long (82 > 79 characters)\nagents/core/multi_agent.py:9:1: W293 blank line contains whitespace\nagents/core/multi_agent.py:20:1: W293 blank line contains whitespace\nagents/core/multi_agent.py:26:1: W293 blank line contains whitespace\nagents/core/multi_agent.py:30:80: E501 line too long (83 > 79 characters)\nagents/core/multi_agent.py:32:1: W293 blank line contains whitespace\nagents/core/multi_agent.py:40:1: W293 blank line contains whitespace\nagents/core/multi_agent.py:42:80: E501 line too long (91 > 79 characters)\nagents/core/multi_agent.py:43:1: W293 blank line contains whitespace\nagents/core/multi_agent.py:52:1: W293 blank line contains whitespace\nagents/core/multi_agent.py:60:80: E501 line too long (100 > 79 characters)\nagents/core/multi_agent.py:62:1: W293 blank line contains whitespace\nagents/core/multi_agent.py:63:24: W291 trailing whitespace\nagents/core/multi_agent.py:63:25: W292 no newline at end of file\nagents/core/reasoner.py:2:1: F401 'rdflib.Graph' imported but unused\nagents/core/reasoner.py:2:1: F401 'rdflib.RDF' imported but unused\nagents/core/reasoner.py:2:1: F401 'rdflib.RDFS' imported but unused\nagents/core/reasoner.py:2:1: F401 'rdflib.OWL' imported but unused\nagents/core/reasoner.py:3:1: F401 'SPARQLWrapper.SPARQLWrapper' imported but unused\nagents/core/reasoner.py:3:1: F401 'SPARQLWrapper.JSON' imported but unused\nagents/core/reasoner.py:10:1: E302 expected 2 blank lines, found 1\nagents/core/reasoner.py:11:80: E501 line too long (95 > 79 characters)\nagents/core/reasoner.py:12:1: W293 blank line contains whitespace\nagents/core/reasoner.py:23:1: W293 blank line contains whitespace\nagents/core/reasoner.py:30:1: W293 blank line contains whitespace\nagents/core/reasoner.py:31:80: E501 line too long (93 > 79 characters)\nagents/core/reasoner.py:34:1: W293 blank line contains whitespace\nagents/core/reasoner.py:38:1: W293 blank line contains whitespace\nagents/core/reasoner.py:50:1: W293 blank line contains whitespace\nagents/core/reasoner.py:54:1: W293 blank line contains whitespace\nagents/core/reasoner.py:58:1: W293 blank line contains whitespace\nagents/core/reasoner.py:62:1: W293 blank line contains whitespace\nagents/core/reasoner.py:65:1: W293 blank line contains whitespace\nagents/core/reasoner.py:67:1: W293 blank line contains whitespace\nagents/core/reasoner.py:90:1: W293 blank line contains whitespace\nagents/core/reasoner.py:91:80: E501 line too long (80 > 79 characters)\nagents/core/reasoner.py:112:1: W293 blank line contains whitespace\nagents/core/reasoner.py:135:1: W293 blank line contains whitespace\nagents/core/reasoner.py:142:1: W293 blank line contains whitespace\nagents/core/reasoner.py:147:1: W293 blank line contains whitespace\nagents/core/reasoner.py:154:1: W293 blank line contains whitespace\nagents/core/reasoner.py:156:1: W293 blank line contains whitespace\nagents/core/reasoner.py:157:45: W291 trailing whitespace\nagents/core/reasoner.py:158:38: E128 continuation line under-indented for visual indent\nagents/core/reasoner.py:158:54: W291 trailing whitespace\nagents/core/reasoner.py:159:38: E128 continuation line under-indented for visual indent\nagents/core/reasoner.py:160:38: E128 continuation line under-indented for visual indent\nagents/core/reasoner.py:160:80: E501 line too long (103 > 79 characters)\nagents/core/reasoner.py:169:1: W293 blank line contains whitespace\nagents/core/reasoner.py:173:80: E501 line too long (85 > 79 characters)\nagents/core/reasoner.py:175:1: W293 blank line contains whitespace\nagents/core/reasoner.py:188:1: W293 blank line contains whitespace\nagents/core/reasoner.py:198:1: W293 blank line contains whitespace\nagents/core/reasoner.py:202:1: W293 blank line contains whitespace\nagents/core/reasoner.py:204:1: W293 blank line contains whitespace\nagents/core/reasoner.py:205:80: E501 line too long (115 > 79 characters)\nagents/core/reasoner.py:219:80: E501 line too long (90 > 79 characters)\nagents/core/reasoner.py:226:1: W293 blank line contains whitespace\nagents/core/reasoner.py:241:80: E501 line too long (87 > 79 characters)\nagents/core/reasoner.py:245:45: F821 undefined name 'URIRef'\nagents/core/reasoner.py:245:53: F821 undefined name 'Literal'\nagents/core/reasoner.py:250:27: W291 trailing whitespace\nagents/core/reasoner.py:250:28: W292 no newline at end of file\nagents/core/recovery_strategies.py:2:1: F401 'typing.Dict' imported but unused\nagents/core/recovery_strategies.py:2:1: F401 'typing.Any' imported but unused\nagents/core/recovery_strategies.py:4:1: F401 '.base_agent.AgentStatus' imported but unused\nagents/core/recovery_strategies.py:6:1: E302 expected 2 blank lines, found 1\nagents/core/recovery_strategies.py:8:1: W293 blank line contains whitespace\nagents/core/recovery_strategies.py:13:1: W293 blank line contains whitespace\nagents/core/recovery_strategies.py:19:1: E302 expected 2 blank lines, found 1\nagents/core/recovery_strategies.py:21:1: W293 blank line contains whitespace\nagents/core/recovery_strategies.py:33:1: W293 blank line contains whitespace\nagents/core/recovery_strategies.py:35:80: E501 line too long (81 > 79 characters)\nagents/core/recovery_strategies.py:37:1: E302 expected 2 blank lines, found 1\nagents/core/recovery_strategies.py:39:1: W293 blank line contains whitespace\nagents/core/recovery_strategies.py:51:1: W293 blank line contains whitespace\nagents/core/recovery_strategies.py:53:80: E501 line too long (91 > 79 characters)\nagents/core/recovery_strategies.py:55:1: E302 expected 2 blank lines, found 1\nagents/core/recovery_strategies.py:57:1: W293 blank line contains whitespace\nagents/core/recovery_strategies.py:69:1: W293 blank line contains whitespace\nagents/core/recovery_strategies.py:71:80: E501 line too long (89 > 79 characters)\nagents/core/recovery_strategies.py:73:1: E302 expected 2 blank lines, found 1\nagents/core/recovery_strategies.py:75:1: W293 blank line contains whitespace\nagents/core/recovery_strategies.py:87:1: W293 blank line contains whitespace\nagents/core/recovery_strategies.py:89:80: E501 line too long (90 > 79 characters)\nagents/core/recovery_strategies.py:91:1: E302 expected 2 blank lines, found 1\nagents/core/recovery_strategies.py:93:1: W293 blank line contains whitespace\nagents/core/recovery_strategies.py:101:1: W293 blank line contains whitespace\nagents/core/recovery_strategies.py:102:80: E501 line too long (80 > 79 characters)\nagents/core/recovery_strategies.py:107:20: W291 trailing whitespace\nagents/core/recovery_strategies.py:107:21: W292 no newline at end of file\nagents/core/remote_kg_agent.py:4:1: E302 expected 2 blank lines, found 1\nagents/core/remote_kg_agent.py:9:80: E501 line too long (115 > 79 characters)\nagents/core/remote_kg_agent.py:78:13: W291 trailing whitespace\nagents/core/remote_kg_agent.py:78:14: W292 no newline at end of file\nagents/core/research_agent.py:4:1: F401 'time' imported but unused\nagents/core/research_agent.py:6:1: E302 expected 2 blank lines, found 1\nagents/core/research_agent.py:8:80: E501 line too long (97 > 79 characters)\nagents/core/research_agent.py:9:80: E501 line too long (92 > 79 characters)\nagents/core/research_agent.py:16:80: E501 line too long (140 > 79 characters)\nagents/core/research_agent.py:24:80: E501 line too long (84 > 79 characters)\nagents/core/research_agent.py:30:1: W293 blank line contains whitespace\nagents/core/research_agent.py:39:1: W293 blank line contains whitespace\nagents/core/research_agent.py:50:1: W293 blank line contains whitespace\nagents/core/research_agent.py:59:1: W293 blank line contains whitespace\nagents/core/research_agent.py:69:1: W293 blank line contains whitespace\nagents/core/research_agent.py:76:1: W293 blank line contains whitespace\nagents/core/research_agent.py:108:1: W293 blank line contains whitespace\nagents/core/research_agent.py:111:80: E501 line too long (102 > 79 characters)\nagents/core/research_agent.py:112:1: W293 blank line contains whitespace\nagents/core/research_agent.py:115:80: E501 line too long (89 > 79 characters)\nagents/core/research_agent.py:116:1: W293 blank line contains whitespace\nagents/core/research_agent.py:119:80: E501 line too long (80 > 79 characters)\nagents/core/research_agent.py:120:1: W293 blank line contains whitespace\nagents/core/research_agent.py:126:1: W293 blank line contains whitespace\nagents/core/research_agent.py:129:80: E501 line too long (92 > 79 characters)\nagents/core/research_agent.py:138:80: E501 line too long (93 > 79 characters)\nagents/core/research_agent.py:152:80: E501 line too long (87 > 79 characters)\nagents/core/research_agent.py:164:1: W293 blank line contains whitespace\nagents/core/research_agent.py:168:80: E501 line too long (80 > 79 characters)\nagents/core/research_agent.py:169:1: W293 blank line contains whitespace\nagents/core/research_agent.py:173:1: W293 blank line contains whitespace\nagents/core/research_agent.py:177:1: W293 blank line contains whitespace\nagents/core/research_agent.py:183:1: W293 blank line contains whitespace\nagents/core/research_agent.py:193:1: W293 blank line contains whitespace\nagents/core/research_agent.py:198:1: W293 blank line contains whitespace\nagents/core/research_agent.py:201:1: W293 blank line contains whitespace\nagents/core/research_agent.py:208:1: W293 blank line contains whitespace\nagents/core/research_agent.py:213:1: W293 blank line contains whitespace\nagents/core/research_agent.py:216:80: E501 line too long (82 > 79 characters)\nagents/core/research_agent.py:217:1: W293 blank line contains whitespace\nagents/core/research_agent.py:236:80: E501 line too long (95 > 79 characters)\nagents/core/research_agent.py:245:18: W291 trailing whitespace\nagents/core/research_agent.py:245:19: W292 no newline at end of file\nagents/core/scientific_swarm_agent.py:4:1: F401 'loguru.logger' imported but unused\nagents/core/scientific_swarm_agent.py:5:1: F401 'asyncio' imported but unused\nagents/core/scientific_swarm_agent.py:8:1: E302 expected 2 blank lines, found 1\nagents/core/scientific_swarm_agent.py:11:80: E501 line too long (81 > 79 characters)\nagents/core/scientific_swarm_agent.py:14:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:28:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:33:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:44:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:46:80: E501 line too long (80 > 79 characters)\nagents/core/scientific_swarm_agent.py:65:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:66:80: E501 line too long (82 > 79 characters)\nagents/core/scientific_swarm_agent.py:72:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:75:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:82:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:93:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:104:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:105:80: E501 line too long (83 > 79 characters)\nagents/core/scientific_swarm_agent.py:111:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:123:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:126:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:137:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:138:80: E501 line too long (81 > 79 characters)\nagents/core/scientific_swarm_agent.py:145:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:148:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:159:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:170:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:171:80: E501 line too long (85 > 79 characters)\nagents/core/scientific_swarm_agent.py:178:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:183:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:187:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:191:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:193:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:194:80: E501 line too long (90 > 79 characters)\nagents/core/scientific_swarm_agent.py:198:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:200:80: E501 line too long (94 > 79 characters)\nagents/core/scientific_swarm_agent.py:202:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:210:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:212:80: E501 line too long (91 > 79 characters)\nagents/core/scientific_swarm_agent.py:214:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:216:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:217:80: E501 line too long (87 > 79 characters)\nagents/core/scientific_swarm_agent.py:224:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:230:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:235:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:240:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:242:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:243:80: E501 line too long (80 > 79 characters)\nagents/core/scientific_swarm_agent.py:247:1: W293 blank line contains whitespace\nagents/core/scientific_swarm_agent.py:248:80: E501 line too long (83 > 79 characters)\nagents/core/scientific_swarm_agent.py:252:79: W291 trailing whitespace\nagents/core/scientific_swarm_agent.py:252:80: W292 no newline at end of file\nagents/core/sensor_agent.py:4:1: E302 expected 2 blank lines, found 1\nagents/core/sensor_agent.py:9:80: E501 line too long (138 > 79 characters)\nagents/core/sensor_agent.py:27:80: E501 line too long (91 > 79 characters)\nagents/core/sensor_agent.py:50:80: E501 line too long (89 > 79 characters)\nagents/core/sensor_agent.py:59:18: W291 trailing whitespace\nagents/core/sensor_agent.py:59:19: W292 no newline at end of file\nagents/core/supervisor_agent.py:1:1: F401 'typing.List' imported but unused\nagents/core/supervisor_agent.py:1:1: F401 'typing.Set' imported but unused\nagents/core/supervisor_agent.py:3:1: F401 'agents.core.base_agent.AgentStatus' imported but unused\nagents/core/supervisor_agent.py:4:1: F401 'agents.core.capability_types.CapabilitySet' imported but unused\nagents/core/supervisor_agent.py:4:80: E501 line too long (82 > 79 characters)\nagents/core/supervisor_agent.py:8:1: F401 'time' imported but unused\nagents/core/supervisor_agent.py:9:1: F401 'datetime.datetime' imported but unused\nagents/core/supervisor_agent.py:10:1: F401 'rdflib.BNode' imported but unused\nagents/core/supervisor_agent.py:11:1: F401 'rdflib.namespace.RDF' imported but unused\nagents/core/supervisor_agent.py:11:1: F401 'rdflib.namespace.RDFS' imported but unused\nagents/core/supervisor_agent.py:13:1: E302 expected 2 blank lines, found 1\nagents/core/supervisor_agent.py:14:80: E501 line too long (88 > 79 characters)\nagents/core/supervisor_agent.py:15:1: W293 blank line contains whitespace\nagents/core/supervisor_agent.py:40:80: E501 line too long (84 > 79 characters)\nagents/core/supervisor_agent.py:41:1: W293 blank line contains whitespace\nagents/core/supervisor_agent.py:48:1: W293 blank line contains whitespace\nagents/core/supervisor_agent.py:58:1: W293 blank line contains whitespace\nagents/core/supervisor_agent.py:72:1: W293 blank line contains whitespace\nagents/core/supervisor_agent.py:73:80: E501 line too long (81 > 79 characters)\nagents/core/supervisor_agent.py:78:1: W293 blank line contains whitespace\nagents/core/supervisor_agent.py:81:1: W293 blank line contains whitespace\nagents/core/supervisor_agent.py:87:1: W293 blank line contains whitespace\nagents/core/supervisor_agent.py:105:1: W293 blank line contains whitespace\nagents/core/supervisor_agent.py:106:80: E501 line too long (87 > 79 characters)\nagents/core/supervisor_agent.py:111:1: W293 blank line contains whitespace\nagents/core/supervisor_agent.py:114:1: W293 blank line contains whitespace\nagents/core/supervisor_agent.py:120:1: W293 blank line contains whitespace\nagents/core/supervisor_agent.py:135:1: W293 blank line contains whitespace\nagents/core/supervisor_agent.py:136:80: E501 line too long (80 > 79 characters)\nagents/core/supervisor_agent.py:139:1: W293 blank line contains whitespace\nagents/core/supervisor_agent.py:148:1: W293 blank line contains whitespace\nagents/core/supervisor_agent.py:157:1: W293 blank line contains whitespace\nagents/core/supervisor_agent.py:158:80: E501 line too long (83 > 79 characters)\nagents/core/supervisor_agent.py:161:1: W293 blank line contains whitespace\nagents/core/supervisor_agent.py:175:1: W293 blank line contains whitespace\nagents/core/supervisor_agent.py:185:56: W291 trailing whitespace\nagents/core/supervisor_agent.py:185:57: W292 no newline at end of file\nagents/core/ttl_validation_agent.py:4:1: E302 expected 2 blank lines, found 1\nagents/core/ttl_validation_agent.py:38:13: W291 trailing whitespace\nagents/core/ttl_validation_agent.py:38:14: W292 no newline at end of file\nagents/core/workflow_manager.py:1:1: F401 'typing.Union' imported but unused\nagents/core/workflow_manager.py:4:1: F401 '.base_agent.AgentMessage' imported but unused\nagents/core/workflow_manager.py:4:1: F401 '.base_agent.AgentStatus' imported but unused\nagents/core/workflow_manager.py:7:1: F401 '.capability_types.CapabilityType' imported but unused\nagents/core/workflow_manager.py:7:1: F401 '.capability_types.CapabilitySet' imported but unused\nagents/core/workflow_manager.py:9:1: F401 '.agent_health.AgentHealth' imported but unused\nagents/core/workflow_manager.py:9:1: F401 '.agent_health.HealthCheck' imported but unused\nagents/core/workflow_manager.py:12:1: F401 'random' imported but unused\nagents/core/workflow_manager.py:13:1: F401 'collections.defaultdict' imported but unused\nagents/core/workflow_manager.py:14:1: F401 'datetime.datetime' imported but unused\nagents/core/workflow_manager.py:17:1: F401 'contextlib.asynccontextmanager' imported but unused\nagents/core/workflow_manager.py:21:1: F401 'functools.lru_cache' imported but unused\nagents/core/workflow_manager.py:22:1: F401 'prometheus_client.CollectorRegistry' imported but unused\nagents/core/workflow_manager.py:24:1: F811 redefinition of unused 'WorkflowStatus' from line 20\nagents/core/workflow_manager.py:24:1: E302 expected 2 blank lines, found 1\nagents/core/workflow_manager.py:33:1: E302 expected 2 blank lines, found 1\nagents/core/workflow_manager.py:34:1: F811 redefinition of unused 'WorkflowStep' from line 20\nagents/core/workflow_manager.py:45:1: E302 expected 2 blank lines, found 1\nagents/core/workflow_manager.py:46:1: F811 redefinition of unused 'Workflow' from line 20\nagents/core/workflow_manager.py:56:1: E302 expected 2 blank lines, found 1\nagents/core/workflow_manager.py:58:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:80:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:92:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:97:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:122:80: E501 line too long (106 > 79 characters)\nagents/core/workflow_manager.py:124:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:130:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:135:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:139:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:144:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:146:80: E501 line too long (81 > 79 characters)\nagents/core/workflow_manager.py:153:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:158:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:166:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:170:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:174:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:176:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:184:80: E501 line too long (82 > 79 characters)\nagents/core/workflow_manager.py:189:80: E501 line too long (85 > 79 characters)\nagents/core/workflow_manager.py:190:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:193:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:200:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:203:13: F841 local variable 'result' is assigned to but never used\nagents/core/workflow_manager.py:209:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:215:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:224:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:230:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:234:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:238:80: E501 line too long (90 > 79 characters)\nagents/core/workflow_manager.py:240:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:243:80: E501 line too long (87 > 79 characters)\nagents/core/workflow_manager.py:245:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:248:80: E501 line too long (87 > 79 characters)\nagents/core/workflow_manager.py:250:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:251:80: E501 line too long (89 > 79 characters)\nagents/core/workflow_manager.py:253:80: E501 line too long (82 > 79 characters)\nagents/core/workflow_manager.py:255:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:264:80: E501 line too long (101 > 79 characters)\nagents/core/workflow_manager.py:265:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:275:80: E501 line too long (81 > 79 characters)\nagents/core/workflow_manager.py:276:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:282:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:302:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:312:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:316:80: E501 line too long (108 > 79 characters)\nagents/core/workflow_manager.py:317:80: E501 line too long (102 > 79 characters)\nagents/core/workflow_manager.py:318:80: E501 line too long (103 > 79 characters)\nagents/core/workflow_manager.py:320:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:324:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:335:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:343:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:353:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:355:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:361:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:367:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:372:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:378:80: E501 line too long (100 > 79 characters)\nagents/core/workflow_manager.py:381:80: E501 line too long (93 > 79 characters)\nagents/core/workflow_manager.py:384:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:386:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:390:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:395:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:401:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:404:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:410:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:413:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:417:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:419:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:425:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:430:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:435:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:438:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:444:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:449:80: E501 line too long (111 > 79 characters)\nagents/core/workflow_manager.py:455:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:462:80: E501 line too long (80 > 79 characters)\nagents/core/workflow_manager.py:465:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:471:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:474:1: W293 blank line contains whitespace\nagents/core/workflow_manager.py:479:59: W291 trailing whitespace\nagents/core/workflow_manager.py:479:60: W292 no newline at end of file\nagents/core/workflow_monitor.py:1:1: F401 'typing.Set' imported but unused\nagents/core/workflow_monitor.py:7:1: F401 '.base_agent.AgentMessage' imported but unused\nagents/core/workflow_monitor.py:13:1: E302 expected 2 blank lines, found 1\nagents/core/workflow_monitor.py:21:1: E302 expected 2 blank lines, found 1\nagents/core/workflow_monitor.py:28:1: E302 expected 2 blank lines, found 1\nagents/core/workflow_monitor.py:30:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:64:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:65:80: E501 line too long (86 > 79 characters)\nagents/core/workflow_monitor.py:68:80: E501 line too long (85 > 79 characters)\nagents/core/workflow_monitor.py:69:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:70:80: E501 line too long (89 > 79 characters)\nagents/core/workflow_monitor.py:73:80: E501 line too long (87 > 79 characters)\nagents/core/workflow_monitor.py:74:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:77:80: E501 line too long (83 > 79 characters)\nagents/core/workflow_monitor.py:78:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:81:80: E501 line too long (86 > 79 characters)\nagents/core/workflow_monitor.py:82:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:83:80: E501 line too long (99 > 79 characters)\nagents/core/workflow_monitor.py:85:80: E501 line too long (93 > 79 characters)\nagents/core/workflow_monitor.py:86:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:90:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:94:80: E501 line too long (92 > 79 characters)\nagents/core/workflow_monitor.py:95:80: E501 line too long (86 > 79 characters)\nagents/core/workflow_monitor.py:96:80: E501 line too long (87 > 79 characters)\nagents/core/workflow_monitor.py:98:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:105:5: F811 redefinition of unused '__init__' from line 31\nagents/core/workflow_monitor.py:126:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:153:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:167:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:169:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:172:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:179:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:183:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:188:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:192:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:195:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:197:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:200:80: E501 line too long (99 > 79 characters)\nagents/core/workflow_monitor.py:201:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:203:80: E501 line too long (99 > 79 characters)\nagents/core/workflow_monitor.py:204:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:205:80: E501 line too long (82 > 79 characters)\nagents/core/workflow_monitor.py:206:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:214:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:221:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:230:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:231:80: E501 line too long (108 > 79 characters)\nagents/core/workflow_monitor.py:233:5: F811 redefinition of unused 'track_workflow_error' from line 75\nagents/core/workflow_monitor.py:240:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:247:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:250:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:257:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:258:80: E501 line too long (87 > 79 characters)\nagents/core/workflow_monitor.py:259:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:267:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:269:80: E501 line too long (102 > 79 characters)\nagents/core/workflow_monitor.py:273:80: E501 line too long (114 > 79 characters)\nagents/core/workflow_monitor.py:275:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:279:80: E501 line too long (88 > 79 characters)\nagents/core/workflow_monitor.py:284:80: E501 line too long (104 > 79 characters)\nagents/core/workflow_monitor.py:286:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:294:80: E501 line too long (124 > 79 characters)\nagents/core/workflow_monitor.py:296:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:300:80: E501 line too long (122 > 79 characters)\nagents/core/workflow_monitor.py:304:80: E501 line too long (113 > 79 characters)\nagents/core/workflow_monitor.py:306:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:324:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:325:5: F811 redefinition of unused 'get_workflow_metrics' from line 91\nagents/core/workflow_monitor.py:332:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:335:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:342:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:352:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:361:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:365:80: E501 line too long (80 > 79 characters)\nagents/core/workflow_monitor.py:366:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:371:80: E501 line too long (113 > 79 characters)\nagents/core/workflow_monitor.py:372:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:378:80: E501 line too long (97 > 79 characters)\nagents/core/workflow_monitor.py:379:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:394:80: E501 line too long (80 > 79 characters)\nagents/core/workflow_monitor.py:396:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:406:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:414:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:415:80: E501 line too long (86 > 79 characters)\nagents/core/workflow_monitor.py:425:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:426:80: E501 line too long (84 > 79 characters)\nagents/core/workflow_monitor.py:436:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:446:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:447:80: E501 line too long (103 > 79 characters)\nagents/core/workflow_monitor.py:460:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:469:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:475:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:490:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:494:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:498:80: E501 line too long (95 > 79 characters)\nagents/core/workflow_monitor.py:500:80: E501 line too long (93 > 79 characters)\nagents/core/workflow_monitor.py:501:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:504:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:506:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:510:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:520:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:525:80: E501 line too long (84 > 79 characters)\nagents/core/workflow_monitor.py:528:80: E501 line too long (83 > 79 characters)\nagents/core/workflow_monitor.py:532:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:534:80: E501 line too long (88 > 79 characters)\nagents/core/workflow_monitor.py:536:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:537:80: E501 line too long (85 > 79 characters)\nagents/core/workflow_monitor.py:538:1: W293 blank line contains whitespace\nagents/core/workflow_monitor.py:539:23: W291 trailing whitespace\nagents/core/workflow_monitor.py:539:24: W292 no newline at end of file\nagents/core/workflow_notifier.py:3:1: F401 'typing.Optional' imported but unused\nagents/core/workflow_notifier.py:5:1: E302 expected 2 blank lines, found 1\nagents/core/workflow_notifier.py:7:1: W293 blank line contains whitespace\nagents/core/workflow_notifier.py:14:1: W293 blank line contains whitespace\nagents/core/workflow_notifier.py:20:1: W293 blank line contains whitespace\nagents/core/workflow_notifier.py:26:1: W293 blank line contains whitespace\nagents/core/workflow_notifier.py:30:1: W293 blank line contains whitespace\nagents/core/workflow_notifier.py:35:1: W293 blank line contains whitespace\nagents/core/workflow_notifier.py:42:1: W293 blank line contains whitespace\nagents/core/workflow_notifier.py:45:1: W293 blank line contains whitespace\nagents/core/workflow_notifier.py:49:1: W293 blank line contains whitespace\nagents/core/workflow_notifier.py:58:1: W293 blank line contains whitespace\nagents/core/workflow_notifier.py:67:80: E501 line too long (93 > 79 characters)\nagents/core/workflow_notifier.py:69:80: E501 line too long (82 > 79 characters)\nagents/core/workflow_notifier.py:73:80: E501 line too long (82 > 79 characters)\nagents/core/workflow_notifier.py:75:80: E501 line too long (80 > 79 characters)\nagents/core/workflow_notifier.py:79:80: E501 line too long (83 > 79 characters)\nagents/core/workflow_notifier.py:89:80: E501 line too long (80 > 79 characters)\nagents/core/workflow_notifier.py:103:11: W291 trailing whitespace\nagents/core/workflow_notifier.py:103:12: W292 no newline at end of file\nagents/core/workflow_persistence.py:7:1: F401 '.base_agent.AgentMessage' imported but unused\nagents/core/workflow_persistence.py:12:1: E302 expected 2 blank lines, found 1\nagents/core/workflow_persistence.py:14:1: W293 blank line contains whitespace\nagents/core/workflow_persistence.py:17:80: E501 line too long (90 > 79 characters)\nagents/core/workflow_persistence.py:21:1: W293 blank line contains whitespace\nagents/core/workflow_persistence.py:26:1: W293 blank line contains whitespace\nagents/core/workflow_persistence.py:39:1: W293 blank line contains whitespace\nagents/core/workflow_persistence.py:47:1: W293 blank line contains whitespace\nagents/core/workflow_persistence.py:51:1: W293 blank line contains whitespace\nagents/core/workflow_persistence.py:59:1: W293 blank line contains whitespace\nagents/core/workflow_persistence.py:60:80: E501 line too long (104 > 79 characters)\nagents/core/workflow_persistence.py:61:1: W293 blank line contains whitespace\nagents/core/workflow_persistence.py:68:1: W293 blank line contains whitespace\nagents/core/workflow_persistence.py:72:1: W293 blank line contains whitespace\nagents/core/workflow_persistence.py:73:80: E501 line too long (83 > 79 characters)\nagents/core/workflow_persistence.py:78:1: W293 blank line contains whitespace\nagents/core/workflow_persistence.py:87:1: W293 blank line contains whitespace\nagents/core/workflow_persistence.py:88:80: E501 line too long (90 > 79 characters)\nagents/core/workflow_persistence.py:89:1: W293 blank line contains whitespace\nagents/core/workflow_persistence.py:96:1: W293 blank line contains whitespace\nagents/core/workflow_persistence.py:101:1: W293 blank line contains whitespace\nagents/core/workflow_persistence.py:110:1: W293 blank line contains whitespace\nagents/core/workflow_persistence.py:122:1: W293 blank line contains whitespace\nagents/core/workflow_persistence.py:124:1: W293 blank line contains whitespace\nagents/core/workflow_persistence.py:125:80: E501 line too long (104 > 79 characters)\nagents/core/workflow_persistence.py:130:1: W293 blank line contains whitespace\nagents/core/workflow_persistence.py:135:1: W293 blank line contains whitespace\nagents/core/workflow_persistence.py:138:1: W293 blank line contains whitespace\nagents/core/workflow_persistence.py:139:80: E501 line too long (94 > 79 characters)\nagents/core/workflow_persistence.py:147:24: W291 trailing whitespace\nagents/core/workflow_persistence.py:147:25: W292 no newline at end of file\nagents/core/workflow_transaction.py:1:1: F401 'typing.List' imported but unused\nagents/core/workflow_transaction.py:1:1: F401 'typing.Optional' imported but unused\nagents/core/workflow_transaction.py:5:1: F401 '.workflow_types.WorkflowStep' imported but unused\nagents/core/workflow_transaction.py:5:1: F401 '.workflow_types.WorkflowStatus' imported but unused\nagents/core/workflow_transaction.py:7:1: E302 expected 2 blank lines, found 1\nagents/core/workflow_transaction.py:9:1: W293 blank line contains whitespace\nagents/core/workflow_transaction.py:15:1: W293 blank line contains whitespace\nagents/core/workflow_transaction.py:34:1: W293 blank line contains whitespace\nagents/core/workflow_transaction.py:39:80: E501 line too long (86 > 79 characters)\nagents/core/workflow_transaction.py:40:1: W293 blank line contains whitespace\nagents/core/workflow_transaction.py:48:1: W293 blank line contains whitespace\nagents/core/workflow_transaction.py:50:80: E501 line too long (95 > 79 characters)\nagents/core/workflow_transaction.py:56:1: W293 blank line contains whitespace\nagents/core/workflow_transaction.py:57:80: E501 line too long (90 > 79 characters)\nagents/core/workflow_transaction.py:58:1: W293 blank line contains whitespace\nagents/core/workflow_transaction.py:66:80: E501 line too long (89 > 79 characters)\nagents/core/workflow_transaction.py:68:18: W291 trailing whitespace\nagents/core/workflow_transaction.py:68:19: W292 no newline at end of file\nagents/core/workflow_types.py:5:1: E302 expected 2 blank lines, found 1\nagents/core/workflow_types.py:13:1: E302 expected 2 blank lines, found 1\nagents/core/workflow_types.py:25:1: E302 expected 2 blank lines, found 1\nagents/core/workflow_types.py:34:26: W291 trailing whitespace\nagents/core/workflow_types.py:34:27: W292 no newline at end of file\nagents/diary/__init__.py:3:41: W291 trailing whitespace\nagents/diary/__init__.py:3:42: W292 no newline at end of file\nagents/diary/diary_agent.py:1:1: F401 'typing.Callable' imported but unused\nagents/diary/diary_agent.py:6:1: F401 'pydantic.Field' imported but unused\nagents/diary/diary_agent.py:8:1: F401 'json' imported but unused\nagents/diary/diary_agent.py:10:1: F401 'logging' imported but unused\nagents/diary/diary_agent.py:33:1: E302 expected 2 blank lines, found 1\nagents/diary/diary_agent.py:42:1: E302 expected 2 blank lines, found 1\nagents/diary/diary_agent.py:43:80: E501 line too long (84 > 79 characters)\nagents/diary/diary_agent.py:44:1: W293 blank line contains whitespace\nagents/diary/diary_agent.py:59:80: E501 line too long (84 > 79 characters)\nagents/diary/diary_agent.py:62:1: W293 blank line contains whitespace\nagents/diary/diary_agent.py:65:1: W293 blank line contains whitespace\nagents/diary/diary_agent.py:68:1: W293 blank line contains whitespace\nagents/diary/diary_agent.py:84:80: E501 line too long (84 > 79 characters)\nagents/diary/diary_agent.py:100:1: W293 blank line contains whitespace\nagents/diary/diary_agent.py:103:1: W293 blank line contains whitespace\nagents/diary/diary_agent.py:115:1: W293 blank line contains whitespace\nagents/diary/diary_agent.py:118:1: W293 blank line contains whitespace\nagents/diary/diary_agent.py:126:1: W293 blank line contains whitespace\nagents/diary/diary_agent.py:128:1: W293 blank line contains whitespace\nagents/diary/diary_agent.py:138:1: W293 blank line contains whitespace\nagents/diary/diary_agent.py:145:1: W293 blank line contains whitespace\nagents/diary/diary_agent.py:150:1: W293 blank line contains whitespace\nagents/diary/diary_agent.py:161:1: W293 blank line contains whitespace\nagents/diary/diary_agent.py:167:1: W293 blank line contains whitespace\nagents/diary/diary_agent.py:175:1: W293 blank line contains whitespace\nagents/diary/diary_agent.py:195:80: E501 line too long (106 > 79 characters)\nagents/diary/diary_agent.py:196:10: W291 trailing whitespace\nagents/diary/diary_agent.py:196:11: W292 no newline at end of file\nagents/diary/example.py:4:1: E302 expected 2 blank lines, found 1\nagents/diary/example.py:8:80: E501 line too long (107 > 79 characters)\nagents/diary/example.py:12:1: W293 blank line contains whitespace\nagents/diary/example.py:19:1: W293 blank line contains whitespace\nagents/diary/example.py:24:1: W293 blank line contains whitespace\nagents/diary/example.py:31:1: W293 blank line contains whitespace\nagents/diary/example.py:37:80: E501 line too long (84 > 79 characters)\nagents/diary/example.py:41:1: W293 blank line contains whitespace\nagents/diary/example.py:44:1: W293 blank line contains whitespace\nagents/diary/example.py:52:1: E305 expected 2 blank lines after class or function definition, found 1\nagents/diary/example.py:53:11: W291 trailing whitespace\nagents/diary/example.py:53:12: W292 no newline at end of file\nagents/domain/code_review_agent.py:1:1: F401 'typing.Set' imported but unused\nagents/domain/code_review_agent.py:4:1: F401 'loguru.logger' imported but unused\nagents/domain/code_review_agent.py:9:1: E302 expected 2 blank lines, found 1\nagents/domain/code_review_agent.py:19:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:42:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:47:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:63:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:64:80: E501 line too long (85 > 79 characters)\nagents/domain/code_review_agent.py:71:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:80:80: E501 line too long (90 > 79 characters)\nagents/domain/code_review_agent.py:94:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:98:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:102:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:106:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:110:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:113:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:120:80: E501 line too long (85 > 79 characters)\nagents/domain/code_review_agent.py:121:80: E501 line too long (83 > 79 characters)\nagents/domain/code_review_agent.py:122:80: E501 line too long (98 > 79 characters)\nagents/domain/code_review_agent.py:125:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:134:80: E501 line too long (100 > 79 characters)\nagents/domain/code_review_agent.py:135:80: E501 line too long (94 > 79 characters)\nagents/domain/code_review_agent.py:136:80: E501 line too long (109 > 79 characters)\nagents/domain/code_review_agent.py:139:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:141:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:156:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:160:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:170:80: E501 line too long (91 > 79 characters)\nagents/domain/code_review_agent.py:171:80: E501 line too long (89 > 79 characters)\nagents/domain/code_review_agent.py:173:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:175:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:211:80: E501 line too long (91 > 79 characters)\nagents/domain/code_review_agent.py:213:80: E501 line too long (96 > 79 characters)\nagents/domain/code_review_agent.py:219:80: E501 line too long (85 > 79 characters)\nagents/domain/code_review_agent.py:220:80: E501 line too long (86 > 79 characters)\nagents/domain/code_review_agent.py:228:80: E501 line too long (84 > 79 characters)\nagents/domain/code_review_agent.py:236:80: E501 line too long (80 > 79 characters)\nagents/domain/code_review_agent.py:239:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:254:80: E501 line too long (84 > 79 characters)\nagents/domain/code_review_agent.py:256:80: E501 line too long (82 > 79 characters)\nagents/domain/code_review_agent.py:266:80: E501 line too long (108 > 79 characters)\nagents/domain/code_review_agent.py:278:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:279:80: E501 line too long (91 > 79 characters)\nagents/domain/code_review_agent.py:282:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:286:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:288:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:289:80: E501 line too long (81 > 79 characters)\nagents/domain/code_review_agent.py:292:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:294:80: E501 line too long (91 > 79 characters)\nagents/domain/code_review_agent.py:296:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:298:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:303:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:306:80: E501 line too long (83 > 79 characters)\nagents/domain/code_review_agent.py:308:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:310:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:311:80: E501 line too long (86 > 79 characters)\nagents/domain/code_review_agent.py:318:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:321:80: E501 line too long (84 > 79 characters)\nagents/domain/code_review_agent.py:322:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:325:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:326:80: E501 line too long (94 > 79 characters)\nagents/domain/code_review_agent.py:334:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:337:80: E501 line too long (84 > 79 characters)\nagents/domain/code_review_agent.py:338:1: W293 blank line contains whitespace\nagents/domain/code_review_agent.py:340:48: W291 trailing whitespace\nagents/domain/code_review_agent.py:340:49: W292 no newline at end of file\nagents/domain/corporate_knowledge_agent.py:1:1: F401 'typing.List' imported but unused\nagents/domain/corporate_knowledge_agent.py:1:1: F401 'typing.Optional' imported but unused\nagents/domain/corporate_knowledge_agent.py:4:1: F401 'asyncio' imported but unused\nagents/domain/corporate_knowledge_agent.py:6:1: E302 expected 2 blank lines, found 1\nagents/domain/corporate_knowledge_agent.py:8:1: W293 blank line contains whitespace\nagents/domain/corporate_knowledge_agent.py:14:1: W293 blank line contains whitespace\nagents/domain/corporate_knowledge_agent.py:20:1: W293 blank line contains whitespace\nagents/domain/corporate_knowledge_agent.py:23:1: W293 blank line contains whitespace\nagents/domain/corporate_knowledge_agent.py:26:1: W293 blank line contains whitespace\nagents/domain/corporate_knowledge_agent.py:27:80: E501 line too long (82 > 79 characters)\nagents/domain/corporate_knowledge_agent.py:31:1: W293 blank line contains whitespace\nagents/domain/corporate_knowledge_agent.py:46:1: W293 blank line contains whitespace\nagents/domain/corporate_knowledge_agent.py:47:80: E501 line too long (80 > 79 characters)\nagents/domain/corporate_knowledge_agent.py:60:1: W293 blank line contains whitespace\nagents/domain/corporate_knowledge_agent.py:69:1: W293 blank line contains whitespace\nagents/domain/corporate_knowledge_agent.py:70:80: E501 line too long (94 > 79 characters)\nagents/domain/corporate_knowledge_agent.py:74:1: W293 blank line contains whitespace\nagents/domain/corporate_knowledge_agent.py:75:80: E501 line too long (83 > 79 characters)\nagents/domain/corporate_knowledge_agent.py:87:1: W293 blank line contains whitespace\nagents/domain/corporate_knowledge_agent.py:88:80: E501 line too long (83 > 79 characters)\nagents/domain/corporate_knowledge_agent.py:93:1: W293 blank line contains whitespace\nagents/domain/corporate_knowledge_agent.py:96:1: W293 blank line contains whitespace\nagents/domain/corporate_knowledge_agent.py:106:1: W293 blank line contains whitespace\nagents/domain/corporate_knowledge_agent.py:117:1: W293 blank line contains whitespace\nagents/domain/corporate_knowledge_agent.py:118:80: E501 line too long (83 > 79 characters)\nagents/domain/corporate_knowledge_agent.py:122:1: W293 blank line contains whitespace\nagents/domain/corporate_knowledge_agent.py:133:1: W293 blank line contains whitespace\nagents/domain/corporate_knowledge_agent.py:134:80: E501 line too long (83 > 79 characters)\nagents/domain/corporate_knowledge_agent.py:139:1: W293 blank line contains whitespace\nagents/domain/corporate_knowledge_agent.py:142:1: W293 blank line contains whitespace\nagents/domain/corporate_knowledge_agent.py:145:1: W293 blank line contains whitespace\nagents/domain/corporate_knowledge_agent.py:151:1: W293 blank line contains whitespace\nagents/domain/corporate_knowledge_agent.py:162:1: W293 blank line contains whitespace\nagents/domain/corporate_knowledge_agent.py:163:80: E501 line too long (83 > 79 characters)\nagents/domain/corporate_knowledge_agent.py:172:1: W293 blank line contains whitespace\nagents/domain/corporate_knowledge_agent.py:176:1: W293 blank line contains whitespace\nagents/domain/corporate_knowledge_agent.py:184:1: W293 blank line contains whitespace\nagents/domain/corporate_knowledge_agent.py:185:80: E501 line too long (82 > 79 characters)\nagents/domain/corporate_knowledge_agent.py:189:1: W293 blank line contains whitespace\nagents/domain/corporate_knowledge_agent.py:190:80: E501 line too long (85 > 79 characters)\nagents/domain/corporate_knowledge_agent.py:193:13: W291 trailing whitespace\nagents/domain/corporate_knowledge_agent.py:193:14: W292 no newline at end of file\nagents/domain/diary_agent.py:45:80: E501 line too long (80 > 79 characters)\nagents/domain/diary_agent.py:49:80: E501 line too long (85 > 79 characters)\nagents/domain/diary_agent.py:52:80: E501 line too long (83 > 79 characters)\nagents/domain/judge_agent.py:12:80: E501 line too long (95 > 79 characters)\nagents/domain/judge_agent.py:22:80: E501 line too long (90 > 79 characters)\nagents/domain/judge_agent.py:38:80: E501 line too long (111 > 79 characters)\nagents/domain/judge_agent.py:42:80: E501 line too long (114 > 79 characters)\nagents/domain/judge_agent.py:53:80: E501 line too long (82 > 79 characters)\nagents/domain/judge_agent.py:58:80: E501 line too long (99 > 79 characters)\nagents/domain/simple_agents.py:24:80: E501 line too long (115 > 79 characters)\nagents/domain/simple_agents.py:28:80: E501 line too long (118 > 79 characters)\nagents/domain/simple_agents.py:36:80: E501 line too long (83 > 79 characters)\nagents/domain/simple_agents.py:51:80: E501 line too long (81 > 79 characters)\nagents/domain/test_swarm_coordinator.py:5:1: F401 'loguru.logger' imported but unused\nagents/domain/test_swarm_coordinator.py:11:1: E302 expected 2 blank lines, found 1\nagents/domain/test_swarm_coordinator.py:20:1: W293 blank line contains whitespace\nagents/domain/test_swarm_coordinator.py:37:1: W293 blank line contains whitespace\nagents/domain/test_swarm_coordinator.py:43:1: W293 blank line contains whitespace\nagents/domain/test_swarm_coordinator.py:58:1: W293 blank line contains whitespace\nagents/domain/test_swarm_coordinator.py:65:1: W293 blank line contains whitespace\nagents/domain/test_swarm_coordinator.py:74:1: W293 blank line contains whitespace\nagents/domain/test_swarm_coordinator.py:87:1: W293 blank line contains whitespace\nagents/domain/test_swarm_coordinator.py:91:80: E501 line too long (88 > 79 characters)\nagents/domain/test_swarm_coordinator.py:93:1: W293 blank line contains whitespace\nagents/domain/test_swarm_coordinator.py:96:1: W293 blank line contains whitespace\nagents/domain/test_swarm_coordinator.py:106:1: W293 blank line contains whitespace\nagents/domain/test_swarm_coordinator.py:112:1: W293 blank line contains whitespace\nagents/domain/test_swarm_coordinator.py:123:1: W293 blank line contains whitespace\nagents/domain/test_swarm_coordinator.py:132:1: W293 blank line contains whitespace\nagents/domain/test_swarm_coordinator.py:133:80: E501 line too long (99 > 79 characters)\nagents/domain/test_swarm_coordinator.py:139:1: W293 blank line contains whitespace\nagents/domain/test_swarm_coordinator.py:146:1: W293 blank line contains whitespace\nagents/domain/test_swarm_coordinator.py:149:80: E501 line too long (98 > 79 characters)\nagents/domain/test_swarm_coordinator.py:160:1: W293 blank line contains whitespace\nagents/domain/test_swarm_coordinator.py:167:80: E501 line too long (125 > 79 characters)\nagents/domain/test_swarm_coordinator.py:170:1: W293 blank line contains whitespace\nagents/domain/test_swarm_coordinator.py:173:80: E501 line too long (93 > 79 characters)\nagents/domain/test_swarm_coordinator.py:176:1: W293 blank line contains whitespace\nagents/domain/test_swarm_coordinator.py:178:80: E501 line too long (82 > 79 characters)\nagents/domain/test_swarm_coordinator.py:185:1: W293 blank line contains whitespace\nagents/domain/test_swarm_coordinator.py:186:80: E501 line too long (122 > 79 characters)\nagents/domain/test_swarm_coordinator.py:190:1: W293 blank line contains whitespace\nagents/domain/test_swarm_coordinator.py:192:80: E501 line too long (84 > 79 characters)\nagents/domain/test_swarm_coordinator.py:195:1: W293 blank line contains whitespace\nagents/domain/test_swarm_coordinator.py:198:1: W293 blank line contains whitespace\nagents/domain/test_swarm_coordinator.py:201:1: W293 blank line contains whitespace\nagents/domain/test_swarm_coordinator.py:204:1: W293 blank line contains whitespace\nagents/domain/test_swarm_coordinator.py:209:80: E501 line too long (111 > 79 characters)\nagents/domain/test_swarm_coordinator.py:214:1: W293 blank line contains whitespace\nagents/domain/test_swarm_coordinator.py:217:1: W293 blank line contains whitespace\nagents/domain/test_swarm_coordinator.py:224:1: W293 blank line contains whitespace\nagents/domain/test_swarm_coordinator.py:227:24: W291 trailing whitespace\nagents/domain/test_swarm_coordinator.py:227:25: W292 no newline at end of file\nagents/domain/vertex_email_agent.py:5:1: E302 expected 2 blank lines, found 1\nagents/domain/vertex_email_agent.py:40:80: E501 line too long (80 > 79 characters)\nagents/domain/vertex_email_agent.py:63:80: E501 line too long (80 > 79 characters)\nagents/domain/vertex_email_agent.py:67:80: E501 line too long (83 > 79 characters)\nagents/utils/email_integration.py:13:38: W291 trailing whitespace\nagents/utils/email_integration.py:13:39: W292 no newline at end of file\n"
    },
    "pylint": {
      "success": false,
      "output": "************* Module agents.core.agent_health\nagents/core/agent_health.py:23:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_health.py:30:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_health.py:37:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_health.py:40:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_health.py:52:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_health.py:55:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_health.py:57:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_health.py:70:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_health.py:73:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_health.py:75:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_health.py:80:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_health.py:85:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_health.py:96:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_health.py:98:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_health.py:106:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_health.py:120:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_health.py:127:0: C0304: Final newline missing (missing-final-newline)\nagents/core/agent_health.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nagents/core/agent_health.py:10:0: R0902: Too many instance attributes (8/7) (too-many-instance-attributes)\nagents/core/agent_health.py:58:15: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/core/agent_health.py:89:20: R0916: Too many boolean expressions in if statement (7/5) (too-many-boolean-expressions)\nagents/core/agent_health.py:89:20: R1714: Consider merging these comparisons with 'in' by using 'check.status not in ('idle', 'busy')'. Use a set instead if elements are hashable. (consider-using-in)\nagents/core/agent_health.py:111:21: R0916: Too many boolean expressions in if statement (7/5) (too-many-boolean-expressions)\nagents/core/agent_health.py:111:22: R1714: Consider merging these comparisons with 'in' by using 'check.status in ('idle', 'busy')'. Use a set instead if elements are hashable. (consider-using-in)\nagents/core/agent_health.py:3:0: C0411: standard import \"asyncio\" should be placed before third party import \"loguru.logger\" (wrong-import-order)\nagents/core/agent_health.py:4:0: C0411: standard import \"time\" should be placed before third party import \"loguru.logger\" (wrong-import-order)\nagents/core/agent_health.py:5:0: C0411: standard import \"dataclasses.dataclass\" should be placed before third party import \"loguru.logger\" (wrong-import-order)\nagents/core/agent_health.py:6:0: C0411: standard import \"datetime.datetime\" should be placed before third party import \"loguru.logger\" (wrong-import-order)\nagents/core/agent_health.py:6:0: W0611: Unused datetime imported from datetime (unused-import)\nagents/core/agent_health.py:6:0: W0611: Unused timedelta imported from datetime (unused-import)\nagents/core/agent_health.py:7:0: W0611: Unused AgentStatus imported from base_agent (unused-import)\n************* Module agents.core.agent_registry\nagents/core/agent_registry.py:22:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:27:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:32:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:40:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:47:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:53:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:60:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:83:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:89:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:93:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:107:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:118:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:127:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:132:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:135:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:144:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:159:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:174:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:183:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:188:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:190:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:196:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:203:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:214:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:217:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:224:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:229:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:235:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:238:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:245:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:249:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:257:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:262:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:267:0: C0301: Line too long (104/100) (line-too-long)\nagents/core/agent_registry.py:269:0: C0301: Line too long (110/100) (line-too-long)\nagents/core/agent_registry.py:293:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:298:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:316:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:328:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:339:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:346:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:349:64: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:350:70: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:358:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:360:0: C0301: Line too long (101/100) (line-too-long)\nagents/core/agent_registry.py:361:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:365:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:370:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:374:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:378:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:381:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:384:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:391:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:406:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:411:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:416:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:460:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:472:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:476:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:484:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:487:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:494:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:499:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:512:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:527:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:530:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:547:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:552:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:559:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:564:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:570:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:577:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:582:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:600:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:608:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:610:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:627:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:635:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:637:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:653:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:660:0: C0301: Line too long (107/100) (line-too-long)\nagents/core/agent_registry.py:662:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:673:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:684:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:699:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:707:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:726:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:728:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:737:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:746:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:757:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:766:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:772:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:786:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:790:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:796:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:799:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:802:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:807:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:812:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:825:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:835:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:844:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:853:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_registry.py:872:0: C0304: Final newline missing (missing-final-newline)\nagents/core/agent_registry.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nagents/core/agent_registry.py:26:8: W0107: Unnecessary pass statement (unnecessary-pass)\nagents/core/agent_registry.py:31:8: W0107: Unnecessary pass statement (unnecessary-pass)\nagents/core/agent_registry.py:36:8: W0107: Unnecessary pass statement (unnecessary-pass)\nagents/core/agent_registry.py:73:23: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/core/agent_registry.py:88:8: W0612: Unused variable 'timestamp' (unused-variable)\nagents/core/agent_registry.py:193:19: E1101: Instance of 'WorkflowNotifier' has no '_capability_locks' member (no-member)\nagents/core/agent_registry.py:194:24: E1101: Instance of 'WorkflowNotifier' has no '_capability_map' member (no-member)\nagents/core/agent_registry.py:195:20: E1101: Instance of 'WorkflowNotifier' has no '_agents' member (no-member)\nagents/core/agent_registry.py:195:84: E1101: Instance of 'WorkflowNotifier' has no '_agents' member (no-member)\nagents/core/agent_registry.py:199:19: E1101: Instance of 'WorkflowNotifier' has no '_agent_locks' member (no-member)\nagents/core/agent_registry.py:200:31: E1101: Instance of 'WorkflowNotifier' has no '_agents' member (no-member)\nagents/core/agent_registry.py:202:25: E1101: Instance of 'WorkflowNotifier' has no '_agents' member (no-member)\nagents/core/agent_registry.py:210:19: E1101: Instance of 'WorkflowNotifier' has no '_agent_locks' member (no-member)\nagents/core/agent_registry.py:211:31: E1101: Instance of 'WorkflowNotifier' has no '_agents' member (no-member)\nagents/core/agent_registry.py:215:20: E1101: Instance of 'WorkflowNotifier' has no '_agents' member (no-member)\nagents/core/agent_registry.py:220:27: E1101: Instance of 'WorkflowNotifier' has no '_capability_locks' member (no-member)\nagents/core/agent_registry.py:221:20: E1101: Instance of 'WorkflowNotifier' has no '_capability_map' member (no-member)\nagents/core/agent_registry.py:222:27: E1101: Instance of 'WorkflowNotifier' has no '_capability_map' member (no-member)\nagents/core/agent_registry.py:223:28: E1101: Instance of 'WorkflowNotifier' has no '_capability_map' member (no-member)\nagents/core/agent_registry.py:227:27: E1101: Instance of 'WorkflowNotifier' has no '_capability_locks' member (no-member)\nagents/core/agent_registry.py:228:20: E1101: Instance of 'WorkflowNotifier' has no '_capability_map' member (no-member)\nagents/core/agent_registry.py:236:18: E1101: Instance of 'WorkflowNotifier' has no '_workflow_notifier' member (no-member)\nagents/core/agent_registry.py:240:28: E1101: Instance of 'WorkflowNotifier' has no '_observers' member (no-member)\nagents/core/agent_registry.py:243:23: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/core/agent_registry.py:248:14: E1101: Instance of 'WorkflowNotifier' has no '_workflow_notifier' member (no-member)\nagents/core/agent_registry.py:254:23: E1101: Instance of 'WorkflowNotifier' has no '_capability_locks' member (no-member)\nagents/core/agent_registry.py:255:23: E1101: Instance of 'WorkflowNotifier' has no '_capability_map' member (no-member)\nagents/core/agent_registry.py:265:8: R1705: Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it (no-else-return)\nagents/core/agent_registry.py:275:20: E1101: Instance of 'WorkflowNotifier' has no '_agents' member (no-member)\nagents/core/agent_registry.py:283:31: E1101: Instance of 'WorkflowNotifier' has no '_agents' member (no-member)\nagents/core/agent_registry.py:291:27: E1101: Instance of 'WorkflowNotifier' has no '_observers' member (no-member)\nagents/core/agent_registry.py:292:12: E1101: Instance of 'WorkflowNotifier' has no '_observers' member (no-member)\nagents/core/agent_registry.py:296:23: E1101: Instance of 'WorkflowNotifier' has no '_observers' member (no-member)\nagents/core/agent_registry.py:297:12: E1101: Instance of 'WorkflowNotifier' has no '_observers' member (no-member)\nagents/core/agent_registry.py:301:19: E1101: Instance of 'WorkflowNotifier' has no '_agent_locks' member (no-member)\nagents/core/agent_registry.py:302:12: E1101: Instance of 'WorkflowNotifier' has no '_agents' member (no-member)\nagents/core/agent_registry.py:303:12: E1101: Instance of 'WorkflowNotifier' has no '_capability_map' member (no-member)\nagents/core/agent_registry.py:314:0: R0902: Too many instance attributes (9/7) (too-many-instance-attributes)\nagents/core/agent_registry.py:359:31: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/core/agent_registry.py:331:8: R1702: Too many nested blocks (8/5) (too-many-nested-blocks)\nagents/core/agent_registry.py:438:16: E1101: Instance of 'AgentRegistry' has no '_capabilities' member (no-member)\nagents/core/agent_registry.py:448:22: E1101: Instance of 'WorkflowNotifier' has no 'notify_agent_registered' member (no-member)\nagents/core/agent_registry.py:454:33: E1101: Instance of 'AgentRegistry' has no '_capabilities' member (no-member)\nagents/core/agent_registry.py:455:20: E1101: Instance of 'AgentRegistry' has no '_capabilities' member (no-member)\nagents/core/agent_registry.py:459:12: W0707: Consider explicitly re-raising using 'raise RuntimeError(f'Failed to register agent {agent.agent_id}: {str(e)}') from e' (raise-missing-from)\nagents/core/agent_registry.py:492:27: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/core/agent_registry.py:575:27: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/core/agent_registry.py:633:23: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/core/agent_registry.py:724:23: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/core/agent_registry.py:764:23: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/core/agent_registry.py:809:15: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/core/agent_registry.py:792:27: E1120: No value for argument 'error_type' in unbound method call (no-value-for-parameter)\nagents/core/agent_registry.py:843:80: E1101: Class 'AgentStatus' has no 'ACTIVE' member (no-member)\nagents/core/agent_registry.py:871:19: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/core/agent_registry.py:314:0: R0904: Too many public methods (23/20) (too-many-public-methods)\nagents/core/agent_registry.py:6:0: C0411: standard import \"importlib\" should be placed before third party import \"loguru.logger\" and first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\", \"agents.core.recovery_strategies.RecoveryStrategyFactory\"  (wrong-import-order)\nagents/core/agent_registry.py:7:0: C0411: standard import \"inspect\" should be placed before third party import \"loguru.logger\" and first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\", \"agents.core.recovery_strategies.RecoveryStrategyFactory\"  (wrong-import-order)\nagents/core/agent_registry.py:8:0: C0411: standard import \"os\" should be placed before third party import \"loguru.logger\" and first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\", \"agents.core.recovery_strategies.RecoveryStrategyFactory\"  (wrong-import-order)\nagents/core/agent_registry.py:9:0: C0411: third party import \"yaml\" should be placed before first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\", \"agents.core.recovery_strategies.RecoveryStrategyFactory\"  (wrong-import-order)\nagents/core/agent_registry.py:10:0: C0411: standard import \"pathlib.Path\" should be placed before third party imports \"loguru.logger\", \"yaml\" and first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\", \"agents.core.recovery_strategies.RecoveryStrategyFactory\"  (wrong-import-order)\nagents/core/agent_registry.py:11:0: C0411: standard import \"sys\" should be placed before third party imports \"loguru.logger\", \"yaml\" and first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\", \"agents.core.recovery_strategies.RecoveryStrategyFactory\"  (wrong-import-order)\nagents/core/agent_registry.py:12:0: C0411: standard import \"asyncio\" should be placed before third party imports \"loguru.logger\", \"yaml\" and first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\", \"agents.core.recovery_strategies.RecoveryStrategyFactory\"  (wrong-import-order)\nagents/core/agent_registry.py:13:0: C0411: standard import \"collections.defaultdict\" should be placed before third party imports \"loguru.logger\", \"yaml\" and first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\", \"agents.core.recovery_strategies.RecoveryStrategyFactory\"  (wrong-import-order)\nagents/core/agent_registry.py:14:0: C0411: standard import \"abc.ABC\" should be placed before third party imports \"loguru.logger\", \"yaml\" and first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\", \"agents.core.recovery_strategies.RecoveryStrategyFactory\"  (wrong-import-order)\nagents/core/agent_registry.py:16:0: C0411: standard import \"time\" should be placed before third party imports \"loguru.logger\", \"yaml\", first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\", \"agents.core.recovery_strategies.RecoveryStrategyFactory\", and local import \"base_agent.AgentStatus\" (wrong-import-order)\nagents/core/agent_registry.py:17:0: C0411: standard import \"datetime.datetime\" should be placed before third party imports \"loguru.logger\", \"yaml\", first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\", \"agents.core.recovery_strategies.RecoveryStrategyFactory\", and local import \"base_agent.AgentStatus\" (wrong-import-order)\nagents/core/agent_registry.py:18:0: C0411: standard import \"uuid\" should be placed before third party imports \"loguru.logger\", \"yaml\", first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\", \"agents.core.recovery_strategies.RecoveryStrategyFactory\", and local import \"base_agent.AgentStatus\" (wrong-import-order)\nagents/core/agent_registry.py:1:0: W0611: Unused Type imported from typing (unused-import)\nagents/core/agent_registry.py:1:0: W0611: Unused Union imported from typing (unused-import)\nagents/core/agent_registry.py:4:0: W0611: Unused CapabilitySet imported from agents.core.capability_types (unused-import)\nagents/core/agent_registry.py:5:0: W0611: Unused TimeoutRecoveryStrategy imported from agents.core.recovery_strategies (unused-import)\nagents/core/agent_registry.py:9:0: W0611: Unused import yaml (unused-import)\nagents/core/agent_registry.py:10:0: W0611: Unused Path imported from pathlib (unused-import)\nagents/core/agent_registry.py:11:0: W0611: Unused import sys (unused-import)\nagents/core/agent_registry.py:16:0: W0611: Unused import time (unused-import)\n************* Module agents.core.scientific_swarm_agent\nagents/core/scientific_swarm_agent.py:14:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:28:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:33:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:44:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:65:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:72:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:75:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:82:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:93:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:104:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:111:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:123:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:126:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:137:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:145:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:148:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:159:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:170:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:178:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:183:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:187:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:191:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:193:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:198:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:202:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:210:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:214:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:216:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:224:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:230:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:235:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:240:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:242:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:247:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/scientific_swarm_agent.py:252:0: C0304: Final newline missing (missing-final-newline)\nagents/core/scientific_swarm_agent.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nagents/core/scientific_swarm_agent.py:56:15: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/core/scientific_swarm_agent.py:48:12: R1705: Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\" (no-else-return)\nagents/core/scientific_swarm_agent.py:55:29: E1101: Instance of 'ScientificSwarmAgent' has no '_handle_unknown_message' member (no-member)\nagents/core/scientific_swarm_agent.py:171:36: W0613: Unused argument 'code_artifact' (unused-argument)\nagents/core/scientific_swarm_agent.py:217:38: W0613: Unused argument 'code' (unused-argument)\nagents/core/scientific_swarm_agent.py:4:0: C0411: third party import \"loguru.logger\" should be placed before first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\"  (wrong-import-order)\nagents/core/scientific_swarm_agent.py:5:0: C0411: standard import \"asyncio\" should be placed before third party import \"loguru.logger\" and first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\"  (wrong-import-order)\nagents/core/scientific_swarm_agent.py:6:0: C0411: standard import \"datetime.datetime\" should be placed before third party import \"loguru.logger\" and first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\"  (wrong-import-order)\nagents/core/scientific_swarm_agent.py:4:0: W0611: Unused logger imported from loguru (unused-import)\nagents/core/scientific_swarm_agent.py:5:0: W0611: Unused import asyncio (unused-import)\n************* Module agents.core.workflow_transaction\nagents/core/workflow_transaction.py:9:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_transaction.py:15:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_transaction.py:34:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_transaction.py:40:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_transaction.py:48:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_transaction.py:56:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_transaction.py:58:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_transaction.py:68:0: C0304: Final newline missing (missing-final-newline)\nagents/core/workflow_transaction.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nagents/core/workflow_transaction.py:3:0: C0411: standard import \"asyncio\" should be placed before third party import \"loguru.logger\" (wrong-import-order)\nagents/core/workflow_transaction.py:4:0: C0411: standard import \"contextlib.asynccontextmanager\" should be placed before third party import \"loguru.logger\" (wrong-import-order)\nagents/core/workflow_transaction.py:1:0: W0611: Unused List imported from typing (unused-import)\nagents/core/workflow_transaction.py:1:0: W0611: Unused Optional imported from typing (unused-import)\nagents/core/workflow_transaction.py:5:0: W0611: Unused WorkflowStep imported from workflow_types (unused-import)\nagents/core/workflow_transaction.py:5:0: W0611: Unused WorkflowStatus imported from workflow_types (unused-import)\n************* Module agents.core.agent_message\nagents/core/agent_message.py:36:0: C0304: Final newline missing (missing-final-newline)\nagents/core/agent_message.py:1:0: C0114: Missing module docstring (missing-module-docstring)\n************* Module agents.core.workflow_types\nagents/core/workflow_types.py:34:0: C0304: Final newline missing (missing-final-newline)\nagents/core/workflow_types.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nagents/core/workflow_types.py:14:0: R0902: Too many instance attributes (8/7) (too-many-instance-attributes)\n************* Module agents.core.remote_kg_agent\nagents/core/remote_kg_agent.py:9:0: C0301: Line too long (115/100) (line-too-long)\nagents/core/remote_kg_agent.py:78:0: C0304: Final newline missing (missing-final-newline)\nagents/core/remote_kg_agent.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nagents/core/remote_kg_agent.py:36:19: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/core/remote_kg_agent.py:63:19: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/core/remote_kg_agent.py:72:25: E1101: Instance of 'RemoteKGAgent' has no '_handle_unknown_message' member (no-member)\nagents/core/remote_kg_agent.py:16:4: R0911: Too many return statements (7/6) (too-many-return-statements)\n************* Module agents.core.agent_factory\nagents/core/agent_factory.py:16:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:17:0: C0301: Line too long (106/100) (line-too-long)\nagents/core/agent_factory.py:37:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:41:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:46:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:50:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:72:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:75:52: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:76:0: C0301: Line too long (106/100) (line-too-long)\nagents/core/agent_factory.py:78:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:113:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:128:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:131:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:134:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:139:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:143:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:147:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:148:0: C0301: Line too long (124/100) (line-too-long)\nagents/core/agent_factory.py:150:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:171:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:176:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:183:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:188:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:194:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:198:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:202:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:231:0: C0301: Line too long (101/100) (line-too-long)\nagents/core/agent_factory.py:232:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:237:0: C0301: Line too long (121/100) (line-too-long)\nagents/core/agent_factory.py:240:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:253:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:257:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:260:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:265:0: C0301: Line too long (117/100) (line-too-long)\nagents/core/agent_factory.py:266:0: C0301: Line too long (101/100) (line-too-long)\nagents/core/agent_factory.py:269:0: C0301: Line too long (117/100) (line-too-long)\nagents/core/agent_factory.py:270:0: C0301: Line too long (114/100) (line-too-long)\nagents/core/agent_factory.py:271:0: C0301: Line too long (104/100) (line-too-long)\nagents/core/agent_factory.py:272:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:274:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:284:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:285:0: C0301: Line too long (108/100) (line-too-long)\nagents/core/agent_factory.py:286:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:288:0: C0301: Line too long (104/100) (line-too-long)\nagents/core/agent_factory.py:289:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:294:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:296:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:304:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_factory.py:310:0: C0304: Final newline missing (missing-final-newline)\nagents/core/agent_factory.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nagents/core/agent_factory.py:14:0: R0902: Too many instance attributes (14/7) (too-many-instance-attributes)\nagents/core/agent_factory.py:44:41: W0212: Access to a protected member _is_initialized of a client class (protected-access)\nagents/core/agent_factory.py:153:12: W0707: Consider explicitly re-raising using 'raise RuntimeError(f'Failed to create agent: {str(e)}') from e' (raise-missing-from)\nagents/core/agent_factory.py:300:12: W0612: Unused variable 'agent_id' (unused-variable)\nagents/core/agent_factory.py:6:0: C0411: standard import \"asyncio\" should be placed before third party import \"loguru.logger\" and first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\", \"agents.core.agent_registry.AgentRegistry\"  (wrong-import-order)\nagents/core/agent_factory.py:7:0: C0411: standard import \"time\" should be placed before third party import \"loguru.logger\" and first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\", \"agents.core.agent_registry.AgentRegistry\"  (wrong-import-order)\nagents/core/agent_factory.py:8:0: C0411: standard import \"datetime.datetime\" should be placed before third party import \"loguru.logger\" and first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\", \"agents.core.agent_registry.AgentRegistry\"  (wrong-import-order)\nagents/core/agent_factory.py:9:0: C0411: third party import \"rdflib.Graph\" should be placed before first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\", \"agents.core.agent_registry.AgentRegistry\"  (wrong-import-order)\nagents/core/agent_factory.py:10:0: C0411: third party import \"rdflib.namespace.RDF\" should be placed before first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\", \"agents.core.agent_registry.AgentRegistry\"  (wrong-import-order)\nagents/core/agent_factory.py:11:0: C0411: standard import \"collections.defaultdict\" should be placed before third party imports \"loguru.logger\", \"rdflib.Graph\", \"rdflib.namespace.RDF\" and first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\", \"agents.core.agent_registry.AgentRegistry\"  (wrong-import-order)\nagents/core/agent_factory.py:12:0: C0411: standard import \"uuid\" should be placed before third party imports \"loguru.logger\", \"rdflib.Graph\", \"rdflib.namespace.RDF\" and first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\", \"agents.core.agent_registry.AgentRegistry\"  (wrong-import-order)\nagents/core/agent_factory.py:1:0: W0611: Unused Any imported from typing (unused-import)\nagents/core/agent_factory.py:1:0: W0611: Unused Union imported from typing (unused-import)\nagents/core/agent_factory.py:3:0: W0611: Unused AgentStatus imported from agents.core.base_agent (unused-import)\nagents/core/agent_factory.py:4:0: W0611: Unused CapabilitySet imported from agents.core.capability_types (unused-import)\nagents/core/agent_factory.py:9:0: W0611: Unused BNode imported from rdflib (unused-import)\nagents/core/agent_factory.py:10:0: W0611: Unused RDFS imported from rdflib.namespace (unused-import)\n************* Module agents.core.reasoner\nagents/core/reasoner.py:12:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/reasoner.py:23:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/reasoner.py:30:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/reasoner.py:50:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/reasoner.py:54:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/reasoner.py:58:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/reasoner.py:62:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/reasoner.py:65:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/reasoner.py:67:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/reasoner.py:90:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/reasoner.py:112:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/reasoner.py:135:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/reasoner.py:142:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/reasoner.py:147:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/reasoner.py:154:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/reasoner.py:156:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/reasoner.py:157:44: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/reasoner.py:158:53: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/reasoner.py:160:0: C0301: Line too long (103/100) (line-too-long)\nagents/core/reasoner.py:169:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/reasoner.py:175:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/reasoner.py:188:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/reasoner.py:198:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/reasoner.py:202:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/reasoner.py:204:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/reasoner.py:205:0: C0301: Line too long (115/100) (line-too-long)\nagents/core/reasoner.py:226:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/reasoner.py:250:0: C0304: Final newline missing (missing-final-newline)\nagents/core/reasoner.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nagents/core/reasoner.py:31:59: W0613: Unused argument 'depth' (unused-argument)\nagents/core/reasoner.py:229:8: R1705: Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it (no-else-return)\nagents/core/reasoner.py:245:44: E0602: Undefined variable 'URIRef' (undefined-variable)\nagents/core/reasoner.py:245:52: E0602: Undefined variable 'Literal' (undefined-variable)\nagents/core/reasoner.py:6:0: C0411: standard import \"logging\" should be placed before third party imports \"rdflib.Graph\", \"SPARQLWrapper.SPARQLWrapper\" and first party imports \"utils.graphdb_utils.GraphDBUtils\", \"config.graphdb_config.NAMESPACES\"  (wrong-import-order)\nagents/core/reasoner.py:2:0: W0611: Unused Graph imported from rdflib (unused-import)\nagents/core/reasoner.py:2:0: W0611: Unused RDF imported from rdflib (unused-import)\nagents/core/reasoner.py:2:0: W0611: Unused RDFS imported from rdflib (unused-import)\nagents/core/reasoner.py:2:0: W0611: Unused OWL imported from rdflib (unused-import)\nagents/core/reasoner.py:3:0: W0611: Unused SPARQLWrapper imported from SPARQLWrapper (unused-import)\nagents/core/reasoner.py:3:0: W0611: Unused JSON imported from SPARQLWrapper (unused-import)\n************* Module agents.core.agent_integrator\nagents/core/agent_integrator.py:9:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_integrator.py:15:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_integrator.py:24:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_integrator.py:48:0: C0301: Line too long (108/100) (line-too-long)\nagents/core/agent_integrator.py:50:0: C0301: Line too long (122/100) (line-too-long)\nagents/core/agent_integrator.py:54:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_integrator.py:69:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_integrator.py:84:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_integrator.py:88:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_integrator.py:92:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_integrator.py:96:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agent_integrator.py:109:0: C0304: Final newline missing (missing-final-newline)\nagents/core/agent_integrator.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nagents/core/agent_integrator.py:19:18: E1101: Instance of 'AgentRegistry' has no 'discover_agents' member (no-member)\nagents/core/agent_integrator.py:45:22: E1120: No value for argument 'capabilities' in method call (no-value-for-parameter)\nagents/core/agent_integrator.py:49:22: E1121: Too many positional arguments for method call (too-many-function-args)\nagents/core/agent_integrator.py:58:12: R1705: Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it (no-else-return)\nagents/core/agent_integrator.py:73:12: R1705: Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it (no-else-return)\nagents/core/agent_integrator.py:74:29: E1101: Instance of 'AgentRegistry' has no 'broadcast_message_by_capabilities' member (no-member)\nagents/core/agent_integrator.py:5:0: C0411: first party import \"kg.models.graph_manager.KnowledgeGraphManager\" should be placed before local imports \"agent_registry.AgentRegistry\", \"base_agent.AgentMessage\" (wrong-import-order)\n************* Module agents.core.workflow_notifier\nagents/core/workflow_notifier.py:7:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_notifier.py:14:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_notifier.py:20:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_notifier.py:26:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_notifier.py:30:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_notifier.py:35:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_notifier.py:42:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_notifier.py:45:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_notifier.py:49:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_notifier.py:58:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_notifier.py:103:0: C0304: Final newline missing (missing-final-newline)\nagents/core/workflow_notifier.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nagents/core/workflow_notifier.py:67:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)\nagents/core/workflow_notifier.py:73:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)\nagents/core/workflow_notifier.py:79:8: W1203: Use lazy % formatting in logging functions (logging-fstring-interpolation)\nagents/core/workflow_notifier.py:3:0: W0611: Unused Optional imported from typing (unused-import)\n************* Module agents.core.workflow_persistence\nagents/core/workflow_persistence.py:14:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_persistence.py:21:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_persistence.py:26:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_persistence.py:39:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_persistence.py:47:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_persistence.py:51:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_persistence.py:59:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_persistence.py:60:0: C0301: Line too long (104/100) (line-too-long)\nagents/core/workflow_persistence.py:61:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_persistence.py:68:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_persistence.py:72:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_persistence.py:78:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_persistence.py:87:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_persistence.py:89:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_persistence.py:96:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_persistence.py:101:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_persistence.py:110:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_persistence.py:122:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_persistence.py:124:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_persistence.py:125:0: C0301: Line too long (104/100) (line-too-long)\nagents/core/workflow_persistence.py:130:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_persistence.py:135:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_persistence.py:138:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_persistence.py:147:0: C0304: Final newline missing (missing-final-newline)\nagents/core/workflow_persistence.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nagents/core/workflow_persistence.py:3:0: C0411: standard import \"json\" should be placed before third party import \"loguru.logger\" (wrong-import-order)\nagents/core/workflow_persistence.py:4:0: C0411: standard import \"os\" should be placed before third party import \"loguru.logger\" (wrong-import-order)\nagents/core/workflow_persistence.py:5:0: C0411: standard import \"time\" should be placed before third party import \"loguru.logger\" (wrong-import-order)\nagents/core/workflow_persistence.py:6:0: C0411: standard import \"datetime.datetime\" should be placed before third party import \"loguru.logger\" (wrong-import-order)\nagents/core/workflow_persistence.py:8:0: C0411: third party import \"aiofiles\" should be placed before local import \"base_agent.AgentMessage\" (wrong-import-order)\nagents/core/workflow_persistence.py:9:0: C0411: standard import \"shutil\" should be placed before third party imports \"loguru.logger\", \"aiofiles\" and local import \"base_agent.AgentMessage\" (wrong-import-order)\nagents/core/workflow_persistence.py:10:0: C0411: standard import \"tempfile\" should be placed before third party imports \"loguru.logger\", \"aiofiles\" and local import \"base_agent.AgentMessage\" (wrong-import-order)\nagents/core/workflow_persistence.py:7:0: W0611: Unused AgentMessage imported from base_agent (unused-import)\n************* Module agents.core.base_agent\nagents/core/base_agent.py:27:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:45:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:56:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:69:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:74:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:78:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:82:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:86:0: C0301: Line too long (101/100) (line-too-long)\nagents/core/base_agent.py:87:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:91:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:93:0: C0301: Line too long (122/100) (line-too-long)\nagents/core/base_agent.py:98:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:110:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:117:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:129:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:135:0: C0301: Line too long (106/100) (line-too-long)\nagents/core/base_agent.py:137:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:149:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:155:0: C0301: Line too long (111/100) (line-too-long)\nagents/core/base_agent.py:157:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:173:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:180:0: C0301: Line too long (101/100) (line-too-long)\nagents/core/base_agent.py:181:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:184:0: C0301: Line too long (109/100) (line-too-long)\nagents/core/base_agent.py:186:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:202:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:207:0: C0301: Line too long (120/100) (line-too-long)\nagents/core/base_agent.py:209:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:225:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:230:0: C0301: Line too long (122/100) (line-too-long)\nagents/core/base_agent.py:232:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:248:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:253:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:256:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:259:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:262:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:268:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:280:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:292:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:295:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:314:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:317:0: C0301: Line too long (102/100) (line-too-long)\nagents/core/base_agent.py:319:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:334:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:337:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:355:0: C0301: Line too long (103/100) (line-too-long)\nagents/core/base_agent.py:357:0: C0301: Line too long (104/100) (line-too-long)\nagents/core/base_agent.py:362:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:365:0: C0301: Line too long (101/100) (line-too-long)\nagents/core/base_agent.py:367:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:380:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:387:0: C0301: Line too long (109/100) (line-too-long)\nagents/core/base_agent.py:392:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:401:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:404:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:407:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:413:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:422:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/base_agent.py:429:0: C0304: Final newline missing (missing-final-newline)\nagents/core/base_agent.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nagents/core/base_agent.py:28:4: R0913: Too many arguments (6/5) (too-many-arguments)\nagents/core/base_agent.py:28:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)\nagents/core/base_agent.py:25:0: R0903: Too few public methods (0/2) (too-few-public-methods)\nagents/core/base_agent.py:43:0: R0902: Too many instance attributes (12/7) (too-many-instance-attributes)\nagents/core/base_agent.py:46:4: R0913: Too many arguments (6/5) (too-many-arguments)\nagents/core/base_agent.py:46:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)\nagents/core/base_agent.py:279:8: W0107: Unnecessary pass statement (unnecessary-pass)\nagents/core/base_agent.py:342:20: R1705: Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it (no-else-return)\nagents/core/base_agent.py:320:4: R0912: Too many branches (13/12) (too-many-branches)\nagents/core/base_agent.py:5:0: C0411: standard import \"time\" should be placed before third party imports \"pydantic.BaseModel\", \"loguru.logger\" (wrong-import-order)\nagents/core/base_agent.py:9:0: C0411: standard import \"uuid\" should be placed before third party imports \"pydantic.BaseModel\", \"loguru.logger\", \"rdflib.BNode\", \"rdflib.namespace.RDF\", \"rdflib.Namespace\" (wrong-import-order)\nagents/core/base_agent.py:10:0: C0411: standard import \"datetime.datetime\" should be placed before third party imports \"pydantic.BaseModel\", \"loguru.logger\", \"rdflib.BNode\", \"rdflib.namespace.RDF\", \"rdflib.Namespace\" (wrong-import-order)\nagents/core/base_agent.py:11:0: C0411: standard import \"dataclasses.dataclass\" should be placed before third party imports \"pydantic.BaseModel\", \"loguru.logger\", \"rdflib.BNode\", \"rdflib.namespace.RDF\", \"rdflib.Namespace\" (wrong-import-order)\nagents/core/base_agent.py:12:0: C0411: standard import \"enum.Enum\" should be placed before third party imports \"pydantic.BaseModel\", \"loguru.logger\", \"rdflib.BNode\", \"rdflib.namespace.RDF\", \"rdflib.Namespace\" (wrong-import-order)\nagents/core/base_agent.py:13:0: C0411: standard import \"asyncio\" should be placed before third party imports \"pydantic.BaseModel\", \"loguru.logger\", \"rdflib.BNode\", \"rdflib.namespace.RDF\", \"rdflib.Namespace\" (wrong-import-order)\nagents/core/base_agent.py:3:0: W0611: Unused BaseModel imported from pydantic (unused-import)\nagents/core/base_agent.py:6:0: W0611: Unused BNode imported from rdflib (unused-import)\nagents/core/base_agent.py:7:0: W0611: Unused RDF imported from rdflib.namespace (unused-import)\nagents/core/base_agent.py:10:0: W0611: Unused datetime imported from datetime (unused-import)\nagents/core/base_agent.py:11:0: W0611: Unused dataclass imported from dataclasses (unused-import)\n************* Module agents.core.multi_agent\nagents/core/multi_agent.py:9:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/multi_agent.py:20:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/multi_agent.py:26:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/multi_agent.py:32:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/multi_agent.py:40:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/multi_agent.py:43:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/multi_agent.py:52:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/multi_agent.py:62:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/multi_agent.py:63:0: C0304: Final newline missing (missing-final-newline)\nagents/core/multi_agent.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nagents/core/multi_agent.py:27:35: E1101: Instance of 'MultiAgent' has no 'capabilities' member; maybe '_capabilities'? (no-member)\nagents/core/multi_agent.py:38:56: E1101: Instance of 'MultiAgent' has no 'capabilities' member; maybe '_capabilities'? (no-member)\nagents/core/multi_agent.py:42:71: E1101: Instance of 'MultiAgent' has no 'capabilities' member; maybe '_capabilities'? (no-member)\nagents/core/multi_agent.py:5:0: C0412: Imports from package agents are not grouped (ungrouped-imports)\n************* Module agents.core.feature_z_agent\nagents/core/feature_z_agent.py:9:0: C0301: Line too long (141/100) (line-too-long)\nagents/core/feature_z_agent.py:48:0: C0304: Final newline missing (missing-final-newline)\nagents/core/feature_z_agent.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nagents/core/feature_z_agent.py:35:15: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/core/feature_z_agent.py:2:0: C0411: standard import \"typing.Dict\" should be placed before first party import \"agents.core.base_agent.BaseAgent\"  (wrong-import-order)\n************* Module agents.core.capability_types\nagents/core/capability_types.py:10:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:17:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:24:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:29:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:38:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:49:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:59:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:62:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:65:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:76:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:113:0: C0301: Line too long (132/100) (line-too-long)\nagents/core/capability_types.py:117:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:123:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:129:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:139:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:146:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:151:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:154:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:158:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:163:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:166:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:171:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:174:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:179:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:182:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:186:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:195:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:198:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:205:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:210:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:213:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:223:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:224:0: C0301: Line too long (107/100) (line-too-long)\nagents/core/capability_types.py:228:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:231:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:241:0: C0301: Line too long (104/100) (line-too-long)\nagents/core/capability_types.py:243:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:244:0: C0301: Line too long (103/100) (line-too-long)\nagents/core/capability_types.py:248:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:251:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:261:0: C0301: Line too long (102/100) (line-too-long)\nagents/core/capability_types.py:263:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:268:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:276:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:286:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/capability_types.py:289:0: C0304: Final newline missing (missing-final-newline)\nagents/core/capability_types.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nagents/core/capability_types.py:1:0: W0611: Unused List imported from typing (unused-import)\nagents/core/capability_types.py:5:0: W0611: Unused defaultdict imported from collections (unused-import)\n************* Module agents.core.workflow_manager\nagents/core/workflow_manager.py:58:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:80:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:92:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:97:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:122:0: C0301: Line too long (106/100) (line-too-long)\nagents/core/workflow_manager.py:124:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:130:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:135:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:139:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:144:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:153:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:158:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:166:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:170:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:174:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:176:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:190:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:193:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:200:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:209:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:215:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:224:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:230:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:234:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:240:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:245:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:250:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:255:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:264:0: C0301: Line too long (101/100) (line-too-long)\nagents/core/workflow_manager.py:265:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:276:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:282:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:302:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:312:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:316:0: C0301: Line too long (108/100) (line-too-long)\nagents/core/workflow_manager.py:317:0: C0301: Line too long (102/100) (line-too-long)\nagents/core/workflow_manager.py:318:0: C0301: Line too long (103/100) (line-too-long)\nagents/core/workflow_manager.py:320:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:324:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:335:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:343:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:353:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:355:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:361:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:367:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:372:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:384:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:386:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:390:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:395:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:401:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:404:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:410:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:413:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:417:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:419:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:425:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:430:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:435:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:438:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:444:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:449:0: C0301: Line too long (111/100) (line-too-long)\nagents/core/workflow_manager.py:455:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:465:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:471:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:474:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_manager.py:479:0: C0304: Final newline missing (missing-final-newline)\nagents/core/workflow_manager.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nagents/core/workflow_manager.py:24:0: E0102: class already defined line 20 (function-redefined)\nagents/core/workflow_manager.py:34:0: E0102: class already defined line 20 (function-redefined)\nagents/core/workflow_manager.py:34:0: R0902: Too many instance attributes (8/7) (too-many-instance-attributes)\nagents/core/workflow_manager.py:46:0: E0102: class already defined line 20 (function-redefined)\nagents/core/workflow_manager.py:56:0: R0902: Too many instance attributes (12/7) (too-many-instance-attributes)\nagents/core/workflow_manager.py:98:4: R0913: Too many arguments (6/5) (too-many-arguments)\nagents/core/workflow_manager.py:98:4: R0917: Too many positional arguments (6/5) (too-many-positional-arguments)\nagents/core/workflow_manager.py:203:12: W0612: Unused variable 'result' (unused-variable)\nagents/core/workflow_manager.py:236:4: W0237: Parameter 'agent_id' has been renamed to 'agent' in overriding 'WorkflowManager.on_agent_registered' method (arguments-renamed)\nagents/core/workflow_manager.py:263:27: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/core/workflow_manager.py:269:16: W0612: Unused variable 'workflow_id' (unused-variable)\nagents/core/workflow_manager.py:459:16: W0612: Unused variable 'workflow_id' (unused-variable)\nagents/core/workflow_manager.py:10:0: C0411: standard import \"uuid\" should be placed before third party import \"loguru.logger\" and local imports \"agent_registry.AgentRegistry\", \"base_agent.AgentMessage\", \"workflow_persistence.WorkflowPersistence\" (...) \"capability_types.Capability\", \"workflow_transaction.WorkflowTransaction\", \"agent_health.AgentHealth\" (wrong-import-order)\nagents/core/workflow_manager.py:11:0: C0411: standard import \"time\" should be placed before third party import \"loguru.logger\" and local imports \"agent_registry.AgentRegistry\", \"base_agent.AgentMessage\", \"workflow_persistence.WorkflowPersistence\" (...) \"capability_types.Capability\", \"workflow_transaction.WorkflowTransaction\", \"agent_health.AgentHealth\" (wrong-import-order)\nagents/core/workflow_manager.py:12:0: C0411: standard import \"random\" should be placed before third party import \"loguru.logger\" and local imports \"agent_registry.AgentRegistry\", \"base_agent.AgentMessage\", \"workflow_persistence.WorkflowPersistence\" (...) \"capability_types.Capability\", \"workflow_transaction.WorkflowTransaction\", \"agent_health.AgentHealth\" (wrong-import-order)\nagents/core/workflow_manager.py:13:0: C0411: standard import \"collections.defaultdict\" should be placed before third party import \"loguru.logger\" and local imports \"agent_registry.AgentRegistry\", \"base_agent.AgentMessage\", \"workflow_persistence.WorkflowPersistence\" (...) \"capability_types.Capability\", \"workflow_transaction.WorkflowTransaction\", \"agent_health.AgentHealth\" (wrong-import-order)\nagents/core/workflow_manager.py:14:0: C0411: standard import \"datetime.datetime\" should be placed before third party import \"loguru.logger\" and local imports \"agent_registry.AgentRegistry\", \"base_agent.AgentMessage\", \"workflow_persistence.WorkflowPersistence\" (...) \"capability_types.Capability\", \"workflow_transaction.WorkflowTransaction\", \"agent_health.AgentHealth\" (wrong-import-order)\nagents/core/workflow_manager.py:15:0: C0411: standard import \"asyncio\" should be placed before third party import \"loguru.logger\" and local imports \"agent_registry.AgentRegistry\", \"base_agent.AgentMessage\", \"workflow_persistence.WorkflowPersistence\" (...) \"capability_types.Capability\", \"workflow_transaction.WorkflowTransaction\", \"agent_health.AgentHealth\" (wrong-import-order)\nagents/core/workflow_manager.py:16:0: C0411: third party import \"backoff\" should be placed before local imports \"agent_registry.AgentRegistry\", \"base_agent.AgentMessage\", \"workflow_persistence.WorkflowPersistence\" (...) \"capability_types.Capability\", \"workflow_transaction.WorkflowTransaction\", \"agent_health.AgentHealth\" (wrong-import-order)\nagents/core/workflow_manager.py:17:0: C0411: standard import \"contextlib.asynccontextmanager\" should be placed before third party imports \"loguru.logger\", \"backoff\" and local imports \"agent_registry.AgentRegistry\", \"base_agent.AgentMessage\", \"workflow_persistence.WorkflowPersistence\" (...) \"capability_types.Capability\", \"workflow_transaction.WorkflowTransaction\", \"agent_health.AgentHealth\" (wrong-import-order)\nagents/core/workflow_manager.py:18:0: C0411: standard import \"dataclasses.dataclass\" should be placed before third party imports \"loguru.logger\", \"backoff\" and local imports \"agent_registry.AgentRegistry\", \"base_agent.AgentMessage\", \"workflow_persistence.WorkflowPersistence\" (...) \"capability_types.Capability\", \"workflow_transaction.WorkflowTransaction\", \"agent_health.AgentHealth\" (wrong-import-order)\nagents/core/workflow_manager.py:19:0: C0411: standard import \"enum.Enum\" should be placed before third party imports \"loguru.logger\", \"backoff\" and local imports \"agent_registry.AgentRegistry\", \"base_agent.AgentMessage\", \"workflow_persistence.WorkflowPersistence\" (...) \"capability_types.Capability\", \"workflow_transaction.WorkflowTransaction\", \"agent_health.AgentHealth\" (wrong-import-order)\nagents/core/workflow_manager.py:21:0: C0411: standard import \"functools.lru_cache\" should be placed before third party imports \"loguru.logger\", \"backoff\" and local imports \"agent_registry.AgentRegistry\", \"base_agent.AgentMessage\", \"workflow_persistence.WorkflowPersistence\" (...) \"workflow_transaction.WorkflowTransaction\", \"agent_health.AgentHealth\", \"workflow_types.Workflow\" (wrong-import-order)\nagents/core/workflow_manager.py:22:0: C0411: third party import \"prometheus_client.CollectorRegistry\" should be placed before local imports \"agent_registry.AgentRegistry\", \"base_agent.AgentMessage\", \"workflow_persistence.WorkflowPersistence\" (...) \"workflow_transaction.WorkflowTransaction\", \"agent_health.AgentHealth\", \"workflow_types.Workflow\" (wrong-import-order)\nagents/core/workflow_manager.py:1:0: W0611: Unused Union imported from typing (unused-import)\nagents/core/workflow_manager.py:4:0: W0611: Unused AgentMessage imported from base_agent (unused-import)\nagents/core/workflow_manager.py:4:0: W0611: Unused AgentStatus imported from base_agent (unused-import)\nagents/core/workflow_manager.py:7:0: W0611: Unused CapabilityType imported from capability_types (unused-import)\nagents/core/workflow_manager.py:7:0: W0611: Unused CapabilitySet imported from capability_types (unused-import)\nagents/core/workflow_manager.py:9:0: W0611: Unused AgentHealth imported from agent_health (unused-import)\nagents/core/workflow_manager.py:9:0: W0611: Unused HealthCheck imported from agent_health (unused-import)\nagents/core/workflow_manager.py:12:0: W0611: Unused import random (unused-import)\nagents/core/workflow_manager.py:13:0: W0611: Unused defaultdict imported from collections (unused-import)\nagents/core/workflow_manager.py:14:0: W0611: Unused datetime imported from datetime (unused-import)\nagents/core/workflow_manager.py:17:0: W0611: Unused asynccontextmanager imported from contextlib (unused-import)\nagents/core/workflow_manager.py:21:0: W0611: Unused lru_cache imported from functools (unused-import)\nagents/core/workflow_manager.py:22:0: W0611: Unused CollectorRegistry imported from prometheus_client (unused-import)\n************* Module agents.core.recovery_strategies\nagents/core/recovery_strategies.py:8:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/recovery_strategies.py:13:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/recovery_strategies.py:21:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/recovery_strategies.py:33:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/recovery_strategies.py:39:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/recovery_strategies.py:51:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/recovery_strategies.py:57:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/recovery_strategies.py:69:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/recovery_strategies.py:75:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/recovery_strategies.py:87:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/recovery_strategies.py:93:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/recovery_strategies.py:101:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/recovery_strategies.py:107:0: C0304: Final newline missing (missing-final-newline)\nagents/core/recovery_strategies.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nagents/core/recovery_strategies.py:12:8: W0107: Unnecessary pass statement (unnecessary-pass)\nagents/core/recovery_strategies.py:17:8: W0107: Unnecessary pass statement (unnecessary-pass)\nagents/core/recovery_strategies.py:30:15: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/core/recovery_strategies.py:48:15: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/core/recovery_strategies.py:66:15: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/core/recovery_strategies.py:84:15: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/core/recovery_strategies.py:91:0: R0903: Too few public methods (1/2) (too-few-public-methods)\nagents/core/recovery_strategies.py:2:0: W0611: Unused Dict imported from typing (unused-import)\nagents/core/recovery_strategies.py:2:0: W0611: Unused Any imported from typing (unused-import)\nagents/core/recovery_strategies.py:4:0: W0611: Unused AgentStatus imported from base_agent (unused-import)\n************* Module agents.core.sensor_agent\nagents/core/sensor_agent.py:9:0: C0301: Line too long (138/100) (line-too-long)\nagents/core/sensor_agent.py:59:0: C0304: Final newline missing (missing-final-newline)\nagents/core/sensor_agent.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nagents/core/sensor_agent.py:35:15: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/core/sensor_agent.py:2:0: C0411: standard import \"typing.Dict\" should be placed before first party import \"agents.core.base_agent.BaseAgent\"  (wrong-import-order)\n************* Module agents.core.agentic_prompt_agent\nagents/core/agentic_prompt_agent.py:16:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agentic_prompt_agent.py:41:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agentic_prompt_agent.py:46:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agentic_prompt_agent.py:56:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agentic_prompt_agent.py:77:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agentic_prompt_agent.py:84:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agentic_prompt_agent.py:87:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agentic_prompt_agent.py:90:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agentic_prompt_agent.py:99:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agentic_prompt_agent.py:120:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agentic_prompt_agent.py:131:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agentic_prompt_agent.py:137:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agentic_prompt_agent.py:140:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agentic_prompt_agent.py:147:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agentic_prompt_agent.py:150:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agentic_prompt_agent.py:159:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agentic_prompt_agent.py:170:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agentic_prompt_agent.py:177:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agentic_prompt_agent.py:181:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agentic_prompt_agent.py:192:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agentic_prompt_agent.py:207:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agentic_prompt_agent.py:227:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agentic_prompt_agent.py:229:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agentic_prompt_agent.py:241:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agentic_prompt_agent.py:246:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agentic_prompt_agent.py:250:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agentic_prompt_agent.py:252:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agentic_prompt_agent.py:257:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/agentic_prompt_agent.py:262:0: C0304: Final newline missing (missing-final-newline)\nagents/core/agentic_prompt_agent.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nagents/core/agentic_prompt_agent.py:68:15: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/core/agentic_prompt_agent.py:60:12: R1705: Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\" (no-else-return)\nagents/core/agentic_prompt_agent.py:67:29: E1101: Instance of 'AgenticPromptAgent' has no '_handle_unknown_message' member (no-member)\nagents/core/agentic_prompt_agent.py:232:8: W0613: Unused argument 'code_artifact' (unused-argument)\nagents/core/agentic_prompt_agent.py:233:8: W0613: Unused argument 'review_prompt' (unused-argument)\nagents/core/agentic_prompt_agent.py:4:0: C0411: third party import \"loguru.logger\" should be placed before first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\"  (wrong-import-order)\nagents/core/agentic_prompt_agent.py:5:0: C0411: standard import \"asyncio\" should be placed before third party import \"loguru.logger\" and first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\"  (wrong-import-order)\nagents/core/agentic_prompt_agent.py:6:0: C0411: standard import \"datetime.datetime\" should be placed before third party import \"loguru.logger\" and first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\"  (wrong-import-order)\nagents/core/agentic_prompt_agent.py:7:0: C0411: standard import \"json\" should be placed before third party import \"loguru.logger\" and first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\"  (wrong-import-order)\nagents/core/agentic_prompt_agent.py:8:0: C0411: third party import \"rdflib.URIRef\" should be placed before first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\"  (wrong-import-order)\nagents/core/agentic_prompt_agent.py:9:0: C0411: third party import \"rdflib.namespace.RDF\" should be placed before first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\"  (wrong-import-order)\nagents/core/agentic_prompt_agent.py:4:0: W0611: Unused logger imported from loguru (unused-import)\nagents/core/agentic_prompt_agent.py:5:0: W0611: Unused import asyncio (unused-import)\n************* Module agents.core.ttl_validation_agent\nagents/core/ttl_validation_agent.py:38:0: C0304: Final newline missing (missing-final-newline)\nagents/core/ttl_validation_agent.py:1:0: C0114: Missing module docstring (missing-module-docstring)\n************* Module agents.core.research_agent\nagents/core/research_agent.py:16:0: C0301: Line too long (140/100) (line-too-long)\nagents/core/research_agent.py:30:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/research_agent.py:39:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/research_agent.py:50:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/research_agent.py:59:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/research_agent.py:69:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/research_agent.py:76:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/research_agent.py:108:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/research_agent.py:111:0: C0301: Line too long (102/100) (line-too-long)\nagents/core/research_agent.py:112:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/research_agent.py:116:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/research_agent.py:120:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/research_agent.py:126:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/research_agent.py:164:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/research_agent.py:169:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/research_agent.py:173:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/research_agent.py:177:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/research_agent.py:183:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/research_agent.py:193:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/research_agent.py:198:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/research_agent.py:201:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/research_agent.py:208:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/research_agent.py:213:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/research_agent.py:217:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/research_agent.py:245:0: C0304: Final newline missing (missing-final-newline)\nagents/core/research_agent.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nagents/core/research_agent.py:87:15: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/core/research_agent.py:97:4: R0913: Too many arguments (7/5) (too-many-arguments)\nagents/core/research_agent.py:97:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)\nagents/core/research_agent.py:152:45: E1101: Instance of 'KnowledgeGraphReasoner' has no 'get_concept_details' member (no-member)\nagents/core/research_agent.py:158:8: W0613: Unused argument 'topic' (unused-argument)\nagents/core/research_agent.py:219:15: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/core/research_agent.py:3:0: C0411: standard import \"typing.Dict\" should be placed before first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.reasoner.KnowledgeGraphReasoner\"  (wrong-import-order)\nagents/core/research_agent.py:4:0: C0411: standard import \"time\" should be placed before first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.reasoner.KnowledgeGraphReasoner\"  (wrong-import-order)\nagents/core/research_agent.py:4:0: W0611: Unused import time (unused-import)\n************* Module agents.core.workflow_monitor\nagents/core/workflow_monitor.py:30:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:64:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:69:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:74:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:78:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:82:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:86:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:90:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:98:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:126:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:153:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:167:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:169:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:172:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:179:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:183:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:188:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:192:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:195:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:197:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:201:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:204:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:206:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:214:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:221:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:230:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:231:0: C0301: Line too long (108/100) (line-too-long)\nagents/core/workflow_monitor.py:240:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:247:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:250:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:257:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:259:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:267:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:269:0: C0301: Line too long (102/100) (line-too-long)\nagents/core/workflow_monitor.py:273:0: C0301: Line too long (114/100) (line-too-long)\nagents/core/workflow_monitor.py:275:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:284:0: C0301: Line too long (104/100) (line-too-long)\nagents/core/workflow_monitor.py:286:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:294:0: C0301: Line too long (124/100) (line-too-long)\nagents/core/workflow_monitor.py:296:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:300:0: C0301: Line too long (122/100) (line-too-long)\nagents/core/workflow_monitor.py:304:0: C0301: Line too long (113/100) (line-too-long)\nagents/core/workflow_monitor.py:306:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:324:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:332:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:335:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:342:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:352:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:361:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:366:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:371:0: C0301: Line too long (113/100) (line-too-long)\nagents/core/workflow_monitor.py:372:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:379:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:396:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:406:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:414:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:425:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:436:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:446:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:447:0: C0301: Line too long (103/100) (line-too-long)\nagents/core/workflow_monitor.py:460:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:469:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:475:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:490:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:494:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:501:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:504:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:506:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:510:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:520:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:532:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:536:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:538:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/workflow_monitor.py:539:0: C0304: Final newline missing (missing-final-newline)\nagents/core/workflow_monitor.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nagents/core/workflow_monitor.py:28:0: R0902: Too many instance attributes (17/7) (too-many-instance-attributes)\nagents/core/workflow_monitor.py:75:59: W0613: Unused argument 'error' (unused-argument)\nagents/core/workflow_monitor.py:94:24: W0212: Access to a protected member _value of a client class (protected-access)\nagents/core/workflow_monitor.py:95:21: W0212: Access to a protected member _value of a client class (protected-access)\nagents/core/workflow_monitor.py:96:22: W0212: Access to a protected member _value of a client class (protected-access)\nagents/core/workflow_monitor.py:102:21: W0212: Access to a protected member _value of a client class (protected-access)\nagents/core/workflow_monitor.py:105:4: E0102: method already defined line 31 (function-redefined)\nagents/core/workflow_monitor.py:233:4: E0102: method already defined line 75 (function-redefined)\nagents/core/workflow_monitor.py:325:4: E0102: method already defined line 91 (function-redefined)\nagents/core/workflow_monitor.py:4:0: C0411: standard import \"time\" should be placed before third party import \"loguru.logger\" (wrong-import-order)\nagents/core/workflow_monitor.py:5:0: C0411: standard import \"datetime.datetime\" should be placed before third party import \"loguru.logger\" (wrong-import-order)\nagents/core/workflow_monitor.py:6:0: C0411: standard import \"collections.defaultdict\" should be placed before third party import \"loguru.logger\" (wrong-import-order)\nagents/core/workflow_monitor.py:8:0: C0411: standard import \"dataclasses.dataclass\" should be placed before third party import \"loguru.logger\" and local import \"base_agent.AgentMessage\" (wrong-import-order)\nagents/core/workflow_monitor.py:9:0: C0411: standard import \"enum.Enum\" should be placed before third party import \"loguru.logger\" and local import \"base_agent.AgentMessage\" (wrong-import-order)\nagents/core/workflow_monitor.py:10:0: C0411: third party import \"prometheus_client.Counter\" should be placed before local import \"base_agent.AgentMessage\" (wrong-import-order)\nagents/core/workflow_monitor.py:1:0: W0611: Unused Set imported from typing (unused-import)\nagents/core/workflow_monitor.py:7:0: W0611: Unused AgentMessage imported from base_agent (unused-import)\n************* Module agents.core.supervisor_agent\nagents/core/supervisor_agent.py:15:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/supervisor_agent.py:41:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/supervisor_agent.py:48:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/supervisor_agent.py:58:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/supervisor_agent.py:72:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/supervisor_agent.py:78:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/supervisor_agent.py:81:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/supervisor_agent.py:87:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/supervisor_agent.py:105:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/supervisor_agent.py:111:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/supervisor_agent.py:114:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/supervisor_agent.py:120:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/supervisor_agent.py:135:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/supervisor_agent.py:139:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/supervisor_agent.py:148:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/supervisor_agent.py:157:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/supervisor_agent.py:161:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/supervisor_agent.py:175:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/core/supervisor_agent.py:185:0: C0304: Final newline missing (missing-final-newline)\nagents/core/supervisor_agent.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nagents/core/supervisor_agent.py:13:0: R0902: Too many instance attributes (8/7) (too-many-instance-attributes)\nagents/core/supervisor_agent.py:55:19: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/core/supervisor_agent.py:61:8: R1705: Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\" (no-else-return)\nagents/core/supervisor_agent.py:97:15: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/core/supervisor_agent.py:127:15: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/core/supervisor_agent.py:162:8: R1705: Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\" (no-else-return)\nagents/core/supervisor_agent.py:7:0: C0411: standard import \"asyncio\" should be placed before third party import \"loguru.logger\" and first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\", \"agents.core.agent_factory.AgentFactory\", \"agents.core.agent_registry.AgentRegistry\"  (wrong-import-order)\nagents/core/supervisor_agent.py:8:0: C0411: standard import \"time\" should be placed before third party import \"loguru.logger\" and first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\", \"agents.core.agent_factory.AgentFactory\", \"agents.core.agent_registry.AgentRegistry\"  (wrong-import-order)\nagents/core/supervisor_agent.py:9:0: C0411: standard import \"datetime.datetime\" should be placed before third party import \"loguru.logger\" and first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\", \"agents.core.agent_factory.AgentFactory\", \"agents.core.agent_registry.AgentRegistry\"  (wrong-import-order)\nagents/core/supervisor_agent.py:10:0: C0411: third party import \"rdflib.Graph\" should be placed before first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\", \"agents.core.agent_factory.AgentFactory\", \"agents.core.agent_registry.AgentRegistry\"  (wrong-import-order)\nagents/core/supervisor_agent.py:11:0: C0411: third party import \"rdflib.namespace.RDF\" should be placed before first party imports \"agents.core.base_agent.BaseAgent\", \"agents.core.capability_types.Capability\", \"agents.core.agent_factory.AgentFactory\", \"agents.core.agent_registry.AgentRegistry\"  (wrong-import-order)\nagents/core/supervisor_agent.py:1:0: W0611: Unused List imported from typing (unused-import)\nagents/core/supervisor_agent.py:1:0: W0611: Unused Set imported from typing (unused-import)\nagents/core/supervisor_agent.py:3:0: W0611: Unused AgentStatus imported from agents.core.base_agent (unused-import)\nagents/core/supervisor_agent.py:4:0: W0611: Unused CapabilitySet imported from agents.core.capability_types (unused-import)\nagents/core/supervisor_agent.py:8:0: W0611: Unused import time (unused-import)\nagents/core/supervisor_agent.py:9:0: W0611: Unused datetime imported from datetime (unused-import)\nagents/core/supervisor_agent.py:10:0: W0611: Unused BNode imported from rdflib (unused-import)\nagents/core/supervisor_agent.py:11:0: W0611: Unused RDF imported from rdflib.namespace (unused-import)\nagents/core/supervisor_agent.py:11:0: W0611: Unused RDFS imported from rdflib.namespace (unused-import)\n************* Module agents.core.data_processor_agent\nagents/core/data_processor_agent.py:9:0: C0301: Line too long (146/100) (line-too-long)\nagents/core/data_processor_agent.py:58:0: C0304: Final newline missing (missing-final-newline)\nagents/core/data_processor_agent.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nagents/core/data_processor_agent.py:34:15: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/core/data_processor_agent.py:2:0: C0411: standard import \"typing.Dict\" should be placed before first party import \"agents.core.base_agent.BaseAgent\"  (wrong-import-order)\n************* Module agents.utils.email_integration\nagents/utils/email_integration.py:13:0: C0304: Final newline missing (missing-final-newline)\nagents/utils/email_integration.py:1:0: C0114: Missing module docstring (missing-module-docstring)\n************* Module agents.diary.diary_agent\nagents/diary/diary_agent.py:44:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/diary/diary_agent.py:62:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/diary/diary_agent.py:65:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/diary/diary_agent.py:68:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/diary/diary_agent.py:100:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/diary/diary_agent.py:103:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/diary/diary_agent.py:115:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/diary/diary_agent.py:118:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/diary/diary_agent.py:126:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/diary/diary_agent.py:128:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/diary/diary_agent.py:138:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/diary/diary_agent.py:145:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/diary/diary_agent.py:150:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/diary/diary_agent.py:161:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/diary/diary_agent.py:167:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/diary/diary_agent.py:175:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/diary/diary_agent.py:195:0: C0301: Line too long (106/100) (line-too-long)\nagents/diary/diary_agent.py:196:0: C0304: Final newline missing (missing-final-newline)\nagents/diary/diary_agent.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nagents/diary/diary_agent.py:42:0: R0902: Too many instance attributes (9/7) (too-many-instance-attributes)\nagents/diary/diary_agent.py:45:4: R0913: Too many arguments (7/5) (too-many-arguments)\nagents/diary/diary_agent.py:45:4: R0917: Too many positional arguments (7/5) (too-many-positional-arguments)\nagents/diary/diary_agent.py:72:15: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/diary/diary_agent.py:124:17: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)\nagents/diary/diary_agent.py:151:15: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/diary/diary_agent.py:176:15: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/diary/diary_agent.py:5:0: C0411: standard import \"time\" should be placed before third party imports \"qdrant_client.QdrantClient\", \"qdrant_client.http.models\" (wrong-import-order)\nagents/diary/diary_agent.py:7:0: C0411: standard import \"uuid\" should be placed before third party imports \"qdrant_client.QdrantClient\", \"qdrant_client.http.models\", \"pydantic.Field\" (wrong-import-order)\nagents/diary/diary_agent.py:8:0: C0411: standard import \"json\" should be placed before third party imports \"qdrant_client.QdrantClient\", \"qdrant_client.http.models\", \"pydantic.Field\" (wrong-import-order)\nagents/diary/diary_agent.py:10:0: C0411: standard import \"logging\" should be placed before third party imports \"qdrant_client.QdrantClient\", \"qdrant_client.http.models\", \"pydantic.Field\", \"openai\" (wrong-import-order)\nagents/diary/diary_agent.py:1:0: W0611: Unused Callable imported from typing (unused-import)\nagents/diary/diary_agent.py:6:0: W0611: Unused Field imported from pydantic (unused-import)\nagents/diary/diary_agent.py:8:0: W0611: Unused import json (unused-import)\nagents/diary/diary_agent.py:10:0: W0611: Unused import logging (unused-import)\n************* Module agents.diary.__init__\nagents/diary/__init__.py:3:0: C0304: Final newline missing (missing-final-newline)\n************* Module agents.diary\nagents/diary/__init__.py:1:0: C0114: Missing module docstring (missing-module-docstring)\n************* Module agents.diary.example\nagents/diary/example.py:8:0: C0301: Line too long (107/100) (line-too-long)\nagents/diary/example.py:12:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/diary/example.py:19:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/diary/example.py:24:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/diary/example.py:31:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/diary/example.py:41:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/diary/example.py:44:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/diary/example.py:53:0: C0304: Final newline missing (missing-final-newline)\nagents/diary/example.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nagents/diary/example.py:1:0: E0401: Unable to import 'diary_agent' (import-error)\nagents/diary/example.py:4:0: C0116: Missing function or method docstring (missing-function-docstring)\nagents/diary/example.py:2:0: C0411: standard import \"time\" should be placed before third party import \"diary_agent.DiaryAgent\" (wrong-import-order)\n************* Module agents.domain.judge_agent\nagents/domain/judge_agent.py:38:0: C0301: Line too long (111/100) (line-too-long)\nagents/domain/judge_agent.py:42:0: C0301: Line too long (114/100) (line-too-long)\nagents/domain/judge_agent.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nagents/domain/judge_agent.py:60:8: E1101: Instance of 'JudgeAgent' has no 'write_diary' member (no-member)\nagents/domain/judge_agent.py:47:39: W0613: Unused argument 'challenge_data' (unused-argument)\nagents/domain/judge_agent.py:6:0: C0411: third party import \"loguru.logger\" should be placed before first party imports \"agents.core.base_agent.BaseAgent\", \"kg.models.graph_manager.KnowledgeGraphManager\"  (wrong-import-order)\n************* Module agents.domain.diary_agent\nagents/domain/diary_agent.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nagents/domain/diary_agent.py:16:8: R1705: Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\" (no-else-return)\n************* Module agents.domain.test_swarm_coordinator\nagents/domain/test_swarm_coordinator.py:20:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/test_swarm_coordinator.py:37:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/test_swarm_coordinator.py:43:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/test_swarm_coordinator.py:58:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/test_swarm_coordinator.py:65:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/test_swarm_coordinator.py:74:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/test_swarm_coordinator.py:87:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/test_swarm_coordinator.py:93:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/test_swarm_coordinator.py:96:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/test_swarm_coordinator.py:106:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/test_swarm_coordinator.py:112:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/test_swarm_coordinator.py:123:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/test_swarm_coordinator.py:132:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/test_swarm_coordinator.py:139:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/test_swarm_coordinator.py:146:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/test_swarm_coordinator.py:160:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/test_swarm_coordinator.py:167:0: C0301: Line too long (125/100) (line-too-long)\nagents/domain/test_swarm_coordinator.py:170:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/test_swarm_coordinator.py:176:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/test_swarm_coordinator.py:185:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/test_swarm_coordinator.py:186:0: C0301: Line too long (122/100) (line-too-long)\nagents/domain/test_swarm_coordinator.py:190:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/test_swarm_coordinator.py:204:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/test_swarm_coordinator.py:209:0: C0301: Line too long (111/100) (line-too-long)\nagents/domain/test_swarm_coordinator.py:214:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/test_swarm_coordinator.py:217:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/test_swarm_coordinator.py:224:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/test_swarm_coordinator.py:227:0: C0304: Final newline missing (missing-final-newline)\nagents/domain/test_swarm_coordinator.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nagents/domain/test_swarm_coordinator.py:27:23: E1101: Class 'CapabilityType' has no 'TEST_ANALYSIS' member (no-member)\nagents/domain/test_swarm_coordinator.py:28:23: E1101: Class 'CapabilityType' has no 'COORDINATION' member (no-member)\nagents/domain/test_swarm_coordinator.py:29:23: E1101: Class 'CapabilityType' has no 'PROGRESS_TRACKING' member (no-member)\nagents/domain/test_swarm_coordinator.py:30:23: E1101: Class 'CapabilityType' has no 'PEER_REVIEW' member (no-member)\nagents/domain/test_swarm_coordinator.py:33:33: E0110: Abstract class 'CodeReviewAgent' with abstract methods instantiated (abstract-class-instantiated)\nagents/domain/test_swarm_coordinator.py:177:15: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/domain/test_swarm_coordinator.py:137:17: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)\nagents/domain/test_swarm_coordinator.py:152:25: W1514: Using open without explicitly specifying an encoding (unspecified-encoding)\nagents/domain/test_swarm_coordinator.py:225:15: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/domain/test_swarm_coordinator.py:189:12: C0415: Import outside toplevel (openai) (import-outside-toplevel)\nagents/domain/test_swarm_coordinator.py:206:29: E1101: Module 'openai' has no 'ChatCompletion' member (no-member)\nagents/domain/test_swarm_coordinator.py:5:0: C0411: third party import \"loguru.logger\" should be placed before first party imports \"agents.core.scientific_swarm_agent.ScientificSwarmAgent\", \"agents.core.capability_types.Capability\", \"agents.domain.code_review_agent.CodeReviewAgent\"  (wrong-import-order)\nagents/domain/test_swarm_coordinator.py:6:0: C0411: standard import \"asyncio\" should be placed before third party import \"loguru.logger\" and first party imports \"agents.core.scientific_swarm_agent.ScientificSwarmAgent\", \"agents.core.capability_types.Capability\", \"agents.domain.code_review_agent.CodeReviewAgent\"  (wrong-import-order)\nagents/domain/test_swarm_coordinator.py:7:0: C0411: standard import \"os\" should be placed before third party import \"loguru.logger\" and first party imports \"agents.core.scientific_swarm_agent.ScientificSwarmAgent\", \"agents.core.capability_types.Capability\", \"agents.domain.code_review_agent.CodeReviewAgent\"  (wrong-import-order)\nagents/domain/test_swarm_coordinator.py:8:0: C0411: standard import \"json\" should be placed before third party import \"loguru.logger\" and first party imports \"agents.core.scientific_swarm_agent.ScientificSwarmAgent\", \"agents.core.capability_types.Capability\", \"agents.domain.code_review_agent.CodeReviewAgent\"  (wrong-import-order)\nagents/domain/test_swarm_coordinator.py:9:0: C0411: standard import \"datetime.datetime\" should be placed before third party import \"loguru.logger\" and first party imports \"agents.core.scientific_swarm_agent.ScientificSwarmAgent\", \"agents.core.capability_types.Capability\", \"agents.domain.code_review_agent.CodeReviewAgent\"  (wrong-import-order)\nagents/domain/test_swarm_coordinator.py:5:0: W0611: Unused logger imported from loguru (unused-import)\n************* Module agents.domain\nagents/domain/__init__.py:1:0: C0114: Missing module docstring (missing-module-docstring)\n************* Module agents.domain.corporate_knowledge_agent\nagents/domain/corporate_knowledge_agent.py:8:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/corporate_knowledge_agent.py:14:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/corporate_knowledge_agent.py:20:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/corporate_knowledge_agent.py:23:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/corporate_knowledge_agent.py:26:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/corporate_knowledge_agent.py:31:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/corporate_knowledge_agent.py:46:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/corporate_knowledge_agent.py:60:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/corporate_knowledge_agent.py:69:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/corporate_knowledge_agent.py:74:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/corporate_knowledge_agent.py:87:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/corporate_knowledge_agent.py:93:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/corporate_knowledge_agent.py:96:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/corporate_knowledge_agent.py:106:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/corporate_knowledge_agent.py:117:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/corporate_knowledge_agent.py:122:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/corporate_knowledge_agent.py:133:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/corporate_knowledge_agent.py:139:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/corporate_knowledge_agent.py:142:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/corporate_knowledge_agent.py:145:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/corporate_knowledge_agent.py:151:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/corporate_knowledge_agent.py:162:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/corporate_knowledge_agent.py:172:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/corporate_knowledge_agent.py:176:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/corporate_knowledge_agent.py:184:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/corporate_knowledge_agent.py:189:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/corporate_knowledge_agent.py:193:0: C0304: Final newline missing (missing-final-newline)\nagents/domain/corporate_knowledge_agent.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nagents/domain/corporate_knowledge_agent.py:35:12: R1705: Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\" (no-else-return)\nagents/domain/corporate_knowledge_agent.py:78:12: R1705: Unnecessary \"elif\" after \"return\", remove the leading \"el\" from \"elif\" (no-else-return)\nagents/domain/corporate_knowledge_agent.py:188:8: W0107: Unnecessary pass statement (unnecessary-pass)\nagents/domain/corporate_knowledge_agent.py:193:8: W0107: Unnecessary pass statement (unnecessary-pass)\nagents/domain/corporate_knowledge_agent.py:3:0: C0411: third party import \"loguru.logger\" should be placed before first party import \"agents.core.base_agent.BaseAgent\"  (wrong-import-order)\nagents/domain/corporate_knowledge_agent.py:4:0: C0411: standard import \"asyncio\" should be placed before third party import \"loguru.logger\" and first party import \"agents.core.base_agent.BaseAgent\"  (wrong-import-order)\nagents/domain/corporate_knowledge_agent.py:1:0: W0611: Unused List imported from typing (unused-import)\nagents/domain/corporate_knowledge_agent.py:1:0: W0611: Unused Optional imported from typing (unused-import)\nagents/domain/corporate_knowledge_agent.py:4:0: W0611: Unused import asyncio (unused-import)\n************* Module agents.domain.vertex_email_agent\nagents/domain/vertex_email_agent.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nagents/domain/vertex_email_agent.py:48:8: E1101: Instance of 'VertexEmailAgent' has no 'write_diary' member (no-member)\nagents/domain/vertex_email_agent.py:3:0: C0411: third party import \"loguru.logger\" should be placed before first party import \"agents.core.base_agent.BaseAgent\"  (wrong-import-order)\n************* Module agents.domain.code_review_agent\nagents/domain/code_review_agent.py:19:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:42:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:47:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:63:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:71:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:94:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:98:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:102:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:106:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:110:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:113:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:125:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:136:0: C0301: Line too long (109/100) (line-too-long)\nagents/domain/code_review_agent.py:139:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:141:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:156:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:160:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:173:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:175:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:239:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:266:0: C0301: Line too long (108/100) (line-too-long)\nagents/domain/code_review_agent.py:278:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:282:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:286:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:288:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:292:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:296:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:298:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:303:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:308:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:310:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:318:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:322:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:325:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:334:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:338:0: C0303: Trailing whitespace (trailing-whitespace)\nagents/domain/code_review_agent.py:340:0: C0304: Final newline missing (missing-final-newline)\nagents/domain/code_review_agent.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nagents/domain/code_review_agent.py:179:8: W0621: Redefining name 'ast' from outer scope (line 5) (redefined-outer-name)\nagents/domain/code_review_agent.py:179:8: W0404: Reimport 'ast' (imported line 5) (reimported)\nagents/domain/code_review_agent.py:179:8: C0415: Import outside toplevel (ast) (import-outside-toplevel)\nagents/domain/code_review_agent.py:182:15: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/domain/code_review_agent.py:176:4: R0912: Too many branches (16/12) (too-many-branches)\nagents/domain/code_review_agent.py:243:8: W0621: Redefining name 'ast' from outer scope (line 5) (redefined-outer-name)\nagents/domain/code_review_agent.py:243:8: W0404: Reimport 'ast' (imported line 5) (reimported)\nagents/domain/code_review_agent.py:243:8: C0415: Import outside toplevel (ast) (import-outside-toplevel)\nagents/domain/code_review_agent.py:246:15: W0718: Catching too general exception Exception (broad-exception-caught)\nagents/domain/code_review_agent.py:4:0: C0411: third party import \"loguru.logger\" should be placed before first party imports \"agents.core.scientific_swarm_agent.ScientificSwarmAgent\", \"agents.core.capability_types.Capability\"  (wrong-import-order)\nagents/domain/code_review_agent.py:5:0: C0411: standard import \"ast\" should be placed before third party import \"loguru.logger\" and first party imports \"agents.core.scientific_swarm_agent.ScientificSwarmAgent\", \"agents.core.capability_types.Capability\"  (wrong-import-order)\nagents/domain/code_review_agent.py:6:0: C0411: standard import \"re\" should be placed before third party import \"loguru.logger\" and first party imports \"agents.core.scientific_swarm_agent.ScientificSwarmAgent\", \"agents.core.capability_types.Capability\"  (wrong-import-order)\nagents/domain/code_review_agent.py:7:0: C0411: standard import \"datetime.datetime\" should be placed before third party import \"loguru.logger\" and first party imports \"agents.core.scientific_swarm_agent.ScientificSwarmAgent\", \"agents.core.capability_types.Capability\"  (wrong-import-order)\nagents/domain/code_review_agent.py:1:0: W0611: Unused Set imported from typing (unused-import)\nagents/domain/code_review_agent.py:4:0: W0611: Unused logger imported from loguru (unused-import)\n************* Module agents.domain.simple_agents\nagents/domain/simple_agents.py:24:0: C0301: Line too long (115/100) (line-too-long)\nagents/domain/simple_agents.py:28:0: C0301: Line too long (118/100) (line-too-long)\nagents/domain/simple_agents.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nagents/domain/simple_agents.py:34:0: C0115: Missing class docstring (missing-class-docstring)\nagents/domain/simple_agents.py:39:0: C0115: Missing class docstring (missing-class-docstring)\nagents/domain/simple_agents.py:44:0: C0115: Missing class docstring (missing-class-docstring)\nagents/domain/simple_agents.py:49:0: C0115: Missing class docstring (missing-class-docstring)\nagents/domain/simple_agents.py:1:0: R0801: Similar lines in 2 files\n==agents.core.workflow_manager:[32:50]\n==agents.core.workflow_types:[12:30]\n@dataclass\nclass WorkflowStep:\n    \"\"\"A step in a workflow.\"\"\"\n    id: str\n    capability: str\n    parameters: Dict\n    status: WorkflowStatus = WorkflowStatus.PENDING\n    assigned_agent: Optional[str] = None\n    error: Optional[str] = None\n    start_time: Optional[float] = None\n    end_time: Optional[float] = None\n\n@dataclass\nclass Workflow:\n    \"\"\"A complete workflow.\"\"\"\n    id: str\n    steps: List[WorkflowStep]\n    status: WorkflowStatus = WorkflowStatus.PENDING (duplicate-code)\nagents/domain/simple_agents.py:1:0: R0801: Similar lines in 2 files\n==agents.core.agent_factory:[174:195]\n==agents.core.agent_registry:[215:235]\n            old_capabilities = await agent.get_capabilities()\n\n            # Remove old capabilities\n            for capability in old_capabilities:\n                async with self._capability_locks[capability.type]:\n                    self._capability_map[capability.type].discard(agent_id)\n                    if not self._capability_map[capability.type]:\n                        del self._capability_map[capability.type]\n\n            # Add new capabilities\n            for capability in new_capabilities:\n                async with self._capability_locks[capability.type]:\n                    self._capability_map[capability.type].add(agent_id)\n\n            # Update agent capabilities\n            for capability in old_capabilities:\n                await agent.remove_capability(capability)\n            for capability in new_capabilities:\n                await agent.add_capability(capability)\n (duplicate-code)\nagents/domain/simple_agents.py:1:0: R0801: Similar lines in 2 files\n==agents.core.agentic_prompt_agent:[157:173]\n==agents.core.scientific_swarm_agent:[91:107]\n                })\n\n            return AgentMessage(\n                sender=self.agent_id,\n                recipient=message.sender,\n                content={\"review_result\": review_result},\n                timestamp=message.timestamp,\n                message_type=\"review_response\"\n            )\n        except Exception as e:\n            self.logger.error(f\"Error handling review request: {str(e)}\")\n            raise\n\n    async def _handle_consensus_check(self, message: AgentMessage) -> AgentMessage:\n        \"\"\"Handle consensus check requests.\"\"\"\n        try: (duplicate-code)\nagents/domain/simple_agents.py:1:0: R0801: Similar lines in 2 files\n==agents.core.agentic_prompt_agent:[65:80]\n==agents.core.scientific_swarm_agent:[53:68]\n            else:\n                return await self._handle_unknown_message(message)\n        except Exception as e:\n            self.logger.error(f\"Error processing message: {str(e)}\")\n            return AgentMessage(\n                sender=self.agent_id,\n                recipient=message.sender,\n                content={\"error\": str(e)},\n                timestamp=message.timestamp,\n                message_type=\"error\"\n            )\n\n    async def _handle_review_request(self, message: AgentMessage) -> AgentMessage:\n        \"\"\"Handle code review requests.\"\"\"\n        try: (duplicate-code)\nagents/domain/simple_agents.py:1:0: R0801: Similar lines in 2 files\n==agents.core.data_processor_agent:[49:58]\n==agents.core.research_agent:[236:245]\n            if self.knowledge_graph:\n                await self.knowledge_graph.add_triple(\n                    update_data.get('subject', ''),\n                    update_data.get('predicate', ''),\n                    update_data.get('object', '')\n                )\n        except Exception as e:\n            self.logger.error(f\"Error updating knowledge graph: {str(e)}\")\n            raise (duplicate-code)\nagents/domain/simple_agents.py:1:0: R0801: Similar lines in 2 files\n==agents.domain.diary_agent:[35:45]\n==agents.domain.judge_agent:[28:38]\n            )\n        return AgentMessage(\n            sender=self.agent_id,\n            recipient=message.sender,\n            content={\"status\": \"error\", \"message\": \"Unknown message type\"},\n            timestamp=message.timestamp,\n            message_type=\"error_response\",\n        )\n\n    async def update_knowledge_graph(self, update_data: Dict[str, Any]) -> None: (duplicate-code)\nagents/domain/simple_agents.py:1:0: R0801: Similar lines in 2 files\n==agents.core.remote_kg_agent:[61:68]\n==agents.core.sensor_agent:[33:40]\n            )\n        except Exception as e:\n            return AgentMessage(\n                sender=self.agent_id,\n                recipient=message.sender,\n                content={\"error\": str(e)},\n                timestamp=message.timestamp, (duplicate-code)\nagents/domain/simple_agents.py:1:0: R0801: Similar lines in 2 files\n==agents.core.feature_z_agent:[33:40]\n==agents.core.remote_kg_agent:[34:41]\n                )\n            except Exception as e:\n                return AgentMessage(\n                    sender=self.agent_id,\n                    recipient=message.sender,\n                    content={\"error\": str(e)},\n                    timestamp=message.timestamp, (duplicate-code)\nagents/domain/simple_agents.py:1:0: R0801: Similar lines in 2 files\n==agents.core.agentic_prompt_agent:[235:246]\n==agents.core.scientific_swarm_agent:[172:183]\n        review_result = {\n            'status': 'pending',\n            'findings': [],\n            'recommendations': []\n        }\n\n        # Implement review logic based on capabilities\n        if await self.has_capability(CapabilityType.CODE_REVIEW):\n            # Add code review findings\n            pass\n (duplicate-code)\nagents/domain/simple_agents.py:1:0: R0801: Similar lines in 2 files\n==agents.domain.judge_agent:[35:48]\n==agents.domain.vertex_email_agent:[60:70]\n        )\n\n    async def update_knowledge_graph(self, update_data: Dict[str, Any]) -> None:  # pragma: no cover - not used\n        if self.knowledge_graph:\n            await self.knowledge_graph.update_graph(update_data)\n\n    async def query_knowledge_graph(self, query: Dict[str, Any]) -> Dict[str, Any]:  # pragma: no cover - not used\n        if not self.knowledge_graph:\n            return {}\n        return await self.knowledge_graph.query_graph(query.get(\"sparql\", \"\"))\n\n    async def evaluate_challenge(self, challenge_data: str) -> str:\n        \"\"\"Check if any email entries exist in the knowledge graph.\"\"\" (duplicate-code)\nagents/domain/simple_agents.py:1:0: R0801: Similar lines in 2 files\n==agents.core.workflow_manager:[23:30]\n==agents.core.workflow_types:[4:12]\nclass WorkflowStatus(str, Enum):\n    \"\"\"Status of a workflow.\"\"\"\n    PENDING = \"pending\"\n    RUNNING = \"running\"\n    COMPLETED = \"completed\"\n    FAILED = \"failed\"\n    CANCELLED = \"cancelled\" (duplicate-code)\nagents/domain/simple_agents.py:1:0: R0801: Similar lines in 2 files\n==agents.core.workflow_manager:[292:298]\n==agents.core.workflow_transaction:[22:28]\n                    \"status\": step.status,\n                    \"assigned_agent\": step.assigned_agent,\n                    \"error\": step.error,\n                    \"start_time\": step.start_time,\n                    \"end_time\": step.end_time\n                } (duplicate-code)\nagents/domain/simple_agents.py:1:0: R0801: Similar lines in 2 files\n==agents.core.agent_factory:[34:43]\n==agents.core.agent_registry:[367:376]\n        if self._is_initialized:\n            return\n\n        async with self._initialization_lock:\n            if self._is_initialized:  # Double-check after acquiring lock\n                return\n\n            try:\n                # Initialize registry if not already initialized (duplicate-code)\nagents/domain/simple_agents.py:1:0: R0801: Similar lines in 2 files\n==agents.core.feature_z_agent:[35:40]\n==agents.core.research_agent:[88:93]\n            return AgentMessage(\n                sender=self.agent_id,\n                recipient=message.sender,\n                content={\"error\": str(e)},\n                timestamp=message.timestamp, (duplicate-code)\nagents/domain/simple_agents.py:1:0: R0801: Similar lines in 2 files\n==agents.core.remote_kg_agent:[28:33]\n==agents.domain.diary_agent:[29:34]\n            return AgentMessage(\n                sender=self.agent_id,\n                recipient=message.sender,\n                content={\"results\": results},\n                timestamp=message.timestamp, (duplicate-code)\nagents/domain/simple_agents.py:1:0: R0801: Similar lines in 2 files\n==agents.core.agentic_prompt_agent:[69:74]\n==agents.core.remote_kg_agent:[63:68]\n                return AgentMessage(\n                    sender=self.agent_id,\n                    recipient=message.sender,\n                    content={\"error\": str(e)},\n                    timestamp=message.timestamp, (duplicate-code)\nagents/domain/simple_agents.py:1:0: R0801: Similar lines in 2 files\n==agents.core.agentic_prompt_agent:[254:262]\n==agents.core.scientific_swarm_agent:[244:252]\n        if self.knowledge_graph:\n            await self.knowledge_graph.update_graph(update_data)\n\n    async def query_knowledge_graph(self, query: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Query the knowledge graph for prompt and review information.\"\"\"\n        if not self.knowledge_graph:\n            return {}\n        return await self.knowledge_graph.query_graph(query.get('sparql', '')) (duplicate-code)\nagents/domain/simple_agents.py:1:0: R0801: Similar lines in 2 files\n==agents.core.remote_kg_agent:[36:41]\n==agents.core.scientific_swarm_agent:[57:62]\n            return AgentMessage(\n                sender=self.agent_id,\n                recipient=message.sender,\n                content={\"error\": str(e)},\n                timestamp=message.timestamp, (duplicate-code)\n\n-----------------------------------\nYour code has been rated at 5.44/10\n\n"
    }
  }
}